# Generated from grammar/Modelica.g4 by ANTLR 4.13.0
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        93,
        1133,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        1,
        0,
        1,
        0,
        3,
        0,
        229,
        8,
        0,
        1,
        0,
        3,
        0,
        232,
        8,
        0,
        1,
        0,
        3,
        0,
        235,
        8,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        240,
        8,
        0,
        10,
        0,
        12,
        0,
        243,
        9,
        0,
        1,
        1,
        3,
        1,
        246,
        8,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        3,
        2,
        252,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        257,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        262,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        268,
        8,
        2,
        1,
        2,
        3,
        2,
        271,
        8,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        275,
        8,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        280,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        290,
        8,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        296,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        306,
        8,
        6,
        1,
        6,
        3,
        6,
        309,
        8,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        319,
        8,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        5,
        7,
        330,
        8,
        7,
        10,
        7,
        12,
        7,
        333,
        9,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        3,
        8,
        339,
        8,
        8,
        1,
        9,
        1,
        9,
        3,
        9,
        343,
        8,
        9,
        1,
        9,
        3,
        9,
        346,
        8,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        353,
        8,
        10,
        10,
        10,
        12,
        10,
        356,
        9,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        5,
        12,
        366,
        8,
        12,
        10,
        12,
        12,
        12,
        369,
        9,
        12,
        1,
        12,
        3,
        12,
        372,
        8,
        12,
        1,
        12,
        3,
        12,
        375,
        8,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        3,
        14,
        383,
        8,
        14,
        1,
        14,
        3,
        14,
        386,
        8,
        14,
        1,
        14,
        3,
        14,
        389,
        8,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        398,
        8,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        3,
        17,
        405,
        8,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        5,
        21,
        420,
        8,
        21,
        10,
        21,
        12,
        21,
        423,
        9,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        428,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        441,
        8,
        23,
        3,
        23,
        443,
        8,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        5,
        24,
        450,
        8,
        24,
        10,
        24,
        12,
        24,
        453,
        9,
        24,
        1,
        25,
        3,
        25,
        456,
        8,
        25,
        1,
        25,
        3,
        25,
        459,
        8,
        25,
        1,
        25,
        3,
        25,
        462,
        8,
        25,
        1,
        25,
        3,
        25,
        465,
        8,
        25,
        1,
        25,
        3,
        25,
        468,
        8,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        472,
        8,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        477,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        3,
        26,
        482,
        8,
        26,
        1,
        26,
        3,
        26,
        485,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        490,
        8,
        27,
        1,
        28,
        1,
        28,
        3,
        28,
        494,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        3,
        29,
        500,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        505,
        8,
        29,
        5,
        29,
        507,
        8,
        29,
        10,
        29,
        12,
        29,
        510,
        9,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        515,
        8,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        520,
        8,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        3,
        32,
        525,
        8,
        32,
        1,
        32,
        3,
        32,
        528,
        8,
        32,
        1,
        32,
        3,
        32,
        531,
        8,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        5,
        33,
        536,
        8,
        33,
        10,
        33,
        12,
        33,
        539,
        9,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        544,
        8,
        34,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        3,
        35,
        550,
        8,
        35,
        1,
        35,
        3,
        35,
        553,
        8,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        558,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        564,
        8,
        36,
        1,
        37,
        1,
        37,
        3,
        37,
        568,
        8,
        37,
        1,
        38,
        1,
        38,
        3,
        38,
        572,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        5,
        39,
        579,
        8,
        39,
        10,
        39,
        12,
        39,
        582,
        9,
        39,
        1,
        40,
        1,
        40,
        3,
        40,
        586,
        8,
        40,
        1,
        41,
        3,
        41,
        589,
        8,
        41,
        1,
        41,
        3,
        41,
        592,
        8,
        41,
        1,
        41,
        1,
        41,
        3,
        41,
        596,
        8,
        41,
        1,
        42,
        1,
        42,
        3,
        42,
        600,
        8,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        3,
        43,
        606,
        8,
        43,
        1,
        43,
        3,
        43,
        609,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        614,
        8,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        619,
        8,
        44,
        1,
        44,
        3,
        44,
        622,
        8,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        48,
        3,
        48,
        635,
        8,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        49,
        3,
        49,
        641,
        8,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        5,
        50,
        649,
        8,
        50,
        10,
        50,
        12,
        50,
        652,
        9,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        5,
        51,
        657,
        8,
        51,
        10,
        51,
        12,
        51,
        660,
        9,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        673,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        3,
        53,
        681,
        8,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        3,
        53,
        696,
        8,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        5,
        54,
        705,
        8,
        54,
        10,
        54,
        12,
        54,
        708,
        9,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        713,
        8,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        5,
        55,
        721,
        8,
        55,
        10,
        55,
        12,
        55,
        724,
        9,
        55,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        5,
        56,
        731,
        8,
        56,
        10,
        56,
        12,
        56,
        734,
        9,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        739,
        8,
        56,
        1,
        56,
        1,
        56,
        1,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        5,
        60,
        757,
        8,
        60,
        10,
        60,
        12,
        60,
        760,
        9,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        5,
        63,
        779,
        8,
        63,
        10,
        63,
        12,
        63,
        782,
        9,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        3,
        64,
        787,
        8,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        65,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        5,
        66,
        801,
        8,
        66,
        10,
        66,
        12,
        66,
        804,
        9,
        66,
        1,
        66,
        1,
        66,
        1,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        5,
        67,
        814,
        8,
        67,
        10,
        67,
        12,
        67,
        817,
        9,
        67,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        69,
        1,
        70,
        1,
        70,
        1,
        70,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        71,
        1,
        72,
        1,
        72,
        3,
        72,
        841,
        8,
        72,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        5,
        73,
        848,
        8,
        73,
        10,
        73,
        12,
        73,
        851,
        9,
        73,
        1,
        73,
        1,
        73,
        1,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        1,
        78,
        1,
        78,
        1,
        78,
        1,
        78,
        1,
        78,
        3,
        78,
        873,
        8,
        78,
        3,
        78,
        875,
        8,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        5,
        79,
        881,
        8,
        79,
        10,
        79,
        12,
        79,
        884,
        9,
        79,
        1,
        80,
        1,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        5,
        81,
        892,
        8,
        81,
        10,
        81,
        12,
        81,
        895,
        9,
        81,
        1,
        82,
        1,
        82,
        1,
        83,
        3,
        83,
        900,
        8,
        83,
        1,
        83,
        1,
        83,
        1,
        84,
        1,
        84,
        1,
        84,
        1,
        84,
        3,
        84,
        908,
        8,
        84,
        1,
        85,
        1,
        85,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        5,
        86,
        916,
        8,
        86,
        10,
        86,
        12,
        86,
        919,
        9,
        86,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        88,
        1,
        88,
        1,
        89,
        1,
        89,
        1,
        90,
        1,
        90,
        1,
        90,
        1,
        90,
        5,
        90,
        932,
        8,
        90,
        10,
        90,
        12,
        90,
        935,
        9,
        90,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        3,
        92,
        943,
        8,
        92,
        1,
        93,
        1,
        93,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        3,
        94,
        955,
        8,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        5,
        94,
        967,
        8,
        94,
        10,
        94,
        12,
        94,
        970,
        9,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        1,
        94,
        3,
        94,
        979,
        8,
        94,
        1,
        95,
        3,
        95,
        982,
        8,
        95,
        1,
        95,
        1,
        95,
        1,
        95,
        5,
        95,
        987,
        8,
        95,
        10,
        95,
        12,
        95,
        990,
        9,
        95,
        1,
        96,
        1,
        96,
        1,
        96,
        5,
        96,
        995,
        8,
        96,
        10,
        96,
        12,
        96,
        998,
        9,
        96,
        1,
        97,
        3,
        97,
        1001,
        8,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1005,
        8,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1010,
        8,
        97,
        5,
        97,
        1012,
        8,
        97,
        10,
        97,
        12,
        97,
        1015,
        9,
        97,
        1,
        98,
        1,
        98,
        3,
        98,
        1019,
        8,
        98,
        1,
        98,
        1,
        98,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        5,
        99,
        1030,
        8,
        99,
        10,
        99,
        12,
        99,
        1033,
        9,
        99,
        1,
        99,
        1,
        99,
        3,
        99,
        1037,
        8,
        99,
        1,
        99,
        3,
        99,
        1040,
        8,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        5,
        100,
        1045,
        8,
        100,
        10,
        100,
        12,
        100,
        1048,
        9,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        102,
        1,
        102,
        3,
        102,
        1056,
        8,
        102,
        1,
        103,
        1,
        103,
        1,
        103,
        1,
        103,
        3,
        103,
        1062,
        8,
        103,
        1,
        103,
        1,
        103,
        1,
        104,
        3,
        104,
        1067,
        8,
        104,
        1,
        104,
        1,
        104,
        3,
        104,
        1071,
        8,
        104,
        5,
        104,
        1073,
        8,
        104,
        10,
        104,
        12,
        104,
        1076,
        9,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        5,
        105,
        1081,
        8,
        105,
        10,
        105,
        12,
        105,
        1084,
        9,
        105,
        1,
        106,
        1,
        106,
        1,
        106,
        5,
        106,
        1089,
        8,
        106,
        10,
        106,
        12,
        106,
        1092,
        9,
        106,
        1,
        106,
        1,
        106,
        3,
        106,
        1096,
        8,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        107,
        5,
        107,
        1102,
        8,
        107,
        10,
        107,
        12,
        107,
        1105,
        9,
        107,
        1,
        107,
        1,
        107,
        1,
        108,
        1,
        108,
        3,
        108,
        1111,
        8,
        108,
        1,
        109,
        1,
        109,
        3,
        109,
        1115,
        8,
        109,
        1,
        110,
        1,
        110,
        1,
        110,
        1,
        110,
        5,
        110,
        1121,
        8,
        110,
        10,
        110,
        12,
        110,
        1124,
        9,
        110,
        3,
        110,
        1126,
        8,
        110,
        1,
        111,
        1,
        111,
        1,
        112,
        1,
        112,
        1,
        112,
        1,
        112,
        0,
        0,
        113,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        0,
        8,
        1,
        0,
        57,
        58,
        1,
        0,
        71,
        72,
        1,
        0,
        80,
        81,
        1,
        0,
        82,
        84,
        1,
        0,
        25,
        30,
        2,
        0,
        15,
        16,
        20,
        21,
        2,
        0,
        17,
        18,
        22,
        23,
        2,
        0,
        19,
        19,
        24,
        24,
        1184,
        0,
        231,
        1,
        0,
        0,
        0,
        2,
        245,
        1,
        0,
        0,
        0,
        4,
        251,
        1,
        0,
        0,
        0,
        6,
        279,
        1,
        0,
        0,
        0,
        8,
        295,
        1,
        0,
        0,
        0,
        10,
        297,
        1,
        0,
        0,
        0,
        12,
        318,
        1,
        0,
        0,
        0,
        14,
        320,
        1,
        0,
        0,
        0,
        16,
        338,
        1,
        0,
        0,
        0,
        18,
        340,
        1,
        0,
        0,
        0,
        20,
        349,
        1,
        0,
        0,
        0,
        22,
        357,
        1,
        0,
        0,
        0,
        24,
        360,
        1,
        0,
        0,
        0,
        26,
        376,
        1,
        0,
        0,
        0,
        28,
        380,
        1,
        0,
        0,
        0,
        30,
        392,
        1,
        0,
        0,
        0,
        32,
        397,
        1,
        0,
        0,
        0,
        34,
        402,
        1,
        0,
        0,
        0,
        36,
        408,
        1,
        0,
        0,
        0,
        38,
        410,
        1,
        0,
        0,
        0,
        40,
        413,
        1,
        0,
        0,
        0,
        42,
        421,
        1,
        0,
        0,
        0,
        44,
        427,
        1,
        0,
        0,
        0,
        46,
        429,
        1,
        0,
        0,
        0,
        48,
        446,
        1,
        0,
        0,
        0,
        50,
        455,
        1,
        0,
        0,
        0,
        52,
        478,
        1,
        0,
        0,
        0,
        54,
        486,
        1,
        0,
        0,
        0,
        56,
        491,
        1,
        0,
        0,
        0,
        58,
        499,
        1,
        0,
        0,
        0,
        60,
        511,
        1,
        0,
        0,
        0,
        62,
        516,
        1,
        0,
        0,
        0,
        64,
        524,
        1,
        0,
        0,
        0,
        66,
        532,
        1,
        0,
        0,
        0,
        68,
        540,
        1,
        0,
        0,
        0,
        70,
        547,
        1,
        0,
        0,
        0,
        72,
        563,
        1,
        0,
        0,
        0,
        74,
        567,
        1,
        0,
        0,
        0,
        76,
        569,
        1,
        0,
        0,
        0,
        78,
        575,
        1,
        0,
        0,
        0,
        80,
        585,
        1,
        0,
        0,
        0,
        82,
        588,
        1,
        0,
        0,
        0,
        84,
        597,
        1,
        0,
        0,
        0,
        86,
        603,
        1,
        0,
        0,
        0,
        88,
        615,
        1,
        0,
        0,
        0,
        90,
        623,
        1,
        0,
        0,
        0,
        92,
        627,
        1,
        0,
        0,
        0,
        94,
        630,
        1,
        0,
        0,
        0,
        96,
        634,
        1,
        0,
        0,
        0,
        98,
        640,
        1,
        0,
        0,
        0,
        100,
        650,
        1,
        0,
        0,
        0,
        102,
        658,
        1,
        0,
        0,
        0,
        104,
        672,
        1,
        0,
        0,
        0,
        106,
        695,
        1,
        0,
        0,
        0,
        108,
        699,
        1,
        0,
        0,
        0,
        110,
        722,
        1,
        0,
        0,
        0,
        112,
        725,
        1,
        0,
        0,
        0,
        114,
        743,
        1,
        0,
        0,
        0,
        116,
        747,
        1,
        0,
        0,
        0,
        118,
        751,
        1,
        0,
        0,
        0,
        120,
        758,
        1,
        0,
        0,
        0,
        122,
        761,
        1,
        0,
        0,
        0,
        124,
        768,
        1,
        0,
        0,
        0,
        126,
        775,
        1,
        0,
        0,
        0,
        128,
        783,
        1,
        0,
        0,
        0,
        130,
        788,
        1,
        0,
        0,
        0,
        132,
        795,
        1,
        0,
        0,
        0,
        134,
        808,
        1,
        0,
        0,
        0,
        136,
        821,
        1,
        0,
        0,
        0,
        138,
        825,
        1,
        0,
        0,
        0,
        140,
        829,
        1,
        0,
        0,
        0,
        142,
        832,
        1,
        0,
        0,
        0,
        144,
        840,
        1,
        0,
        0,
        0,
        146,
        842,
        1,
        0,
        0,
        0,
        148,
        855,
        1,
        0,
        0,
        0,
        150,
        859,
        1,
        0,
        0,
        0,
        152,
        863,
        1,
        0,
        0,
        0,
        154,
        865,
        1,
        0,
        0,
        0,
        156,
        867,
        1,
        0,
        0,
        0,
        158,
        876,
        1,
        0,
        0,
        0,
        160,
        885,
        1,
        0,
        0,
        0,
        162,
        887,
        1,
        0,
        0,
        0,
        164,
        896,
        1,
        0,
        0,
        0,
        166,
        899,
        1,
        0,
        0,
        0,
        168,
        903,
        1,
        0,
        0,
        0,
        170,
        909,
        1,
        0,
        0,
        0,
        172,
        911,
        1,
        0,
        0,
        0,
        174,
        920,
        1,
        0,
        0,
        0,
        176,
        923,
        1,
        0,
        0,
        0,
        178,
        925,
        1,
        0,
        0,
        0,
        180,
        927,
        1,
        0,
        0,
        0,
        182,
        936,
        1,
        0,
        0,
        0,
        184,
        938,
        1,
        0,
        0,
        0,
        186,
        944,
        1,
        0,
        0,
        0,
        188,
        978,
        1,
        0,
        0,
        0,
        190,
        981,
        1,
        0,
        0,
        0,
        192,
        991,
        1,
        0,
        0,
        0,
        194,
        1000,
        1,
        0,
        0,
        0,
        196,
        1016,
        1,
        0,
        0,
        0,
        198,
        1039,
        1,
        0,
        0,
        0,
        200,
        1041,
        1,
        0,
        0,
        0,
        202,
        1049,
        1,
        0,
        0,
        0,
        204,
        1055,
        1,
        0,
        0,
        0,
        206,
        1057,
        1,
        0,
        0,
        0,
        208,
        1066,
        1,
        0,
        0,
        0,
        210,
        1077,
        1,
        0,
        0,
        0,
        212,
        1085,
        1,
        0,
        0,
        0,
        214,
        1097,
        1,
        0,
        0,
        0,
        216,
        1110,
        1,
        0,
        0,
        0,
        218,
        1112,
        1,
        0,
        0,
        0,
        220,
        1125,
        1,
        0,
        0,
        0,
        222,
        1127,
        1,
        0,
        0,
        0,
        224,
        1129,
        1,
        0,
        0,
        0,
        226,
        228,
        5,
        65,
        0,
        0,
        227,
        229,
        3,
        192,
        96,
        0,
        228,
        227,
        1,
        0,
        0,
        0,
        228,
        229,
        1,
        0,
        0,
        0,
        229,
        230,
        1,
        0,
        0,
        0,
        230,
        232,
        5,
        5,
        0,
        0,
        231,
        226,
        1,
        0,
        0,
        0,
        231,
        232,
        1,
        0,
        0,
        0,
        232,
        241,
        1,
        0,
        0,
        0,
        233,
        235,
        5,
        66,
        0,
        0,
        234,
        233,
        1,
        0,
        0,
        0,
        234,
        235,
        1,
        0,
        0,
        0,
        235,
        236,
        1,
        0,
        0,
        0,
        236,
        237,
        3,
        2,
        1,
        0,
        237,
        238,
        5,
        5,
        0,
        0,
        238,
        240,
        1,
        0,
        0,
        0,
        239,
        234,
        1,
        0,
        0,
        0,
        240,
        243,
        1,
        0,
        0,
        0,
        241,
        239,
        1,
        0,
        0,
        0,
        241,
        242,
        1,
        0,
        0,
        0,
        242,
        1,
        1,
        0,
        0,
        0,
        243,
        241,
        1,
        0,
        0,
        0,
        244,
        246,
        5,
        67,
        0,
        0,
        245,
        244,
        1,
        0,
        0,
        0,
        245,
        246,
        1,
        0,
        0,
        0,
        246,
        247,
        1,
        0,
        0,
        0,
        247,
        248,
        3,
        4,
        2,
        0,
        248,
        249,
        3,
        6,
        3,
        0,
        249,
        3,
        1,
        0,
        0,
        0,
        250,
        252,
        5,
        46,
        0,
        0,
        251,
        250,
        1,
        0,
        0,
        0,
        251,
        252,
        1,
        0,
        0,
        0,
        252,
        274,
        1,
        0,
        0,
        0,
        253,
        275,
        5,
        49,
        0,
        0,
        254,
        275,
        5,
        50,
        0,
        0,
        255,
        257,
        5,
        47,
        0,
        0,
        256,
        255,
        1,
        0,
        0,
        0,
        256,
        257,
        1,
        0,
        0,
        0,
        257,
        258,
        1,
        0,
        0,
        0,
        258,
        275,
        5,
        52,
        0,
        0,
        259,
        275,
        5,
        54,
        0,
        0,
        260,
        262,
        5,
        48,
        0,
        0,
        261,
        260,
        1,
        0,
        0,
        0,
        261,
        262,
        1,
        0,
        0,
        0,
        262,
        263,
        1,
        0,
        0,
        0,
        263,
        275,
        5,
        55,
        0,
        0,
        264,
        275,
        5,
        53,
        0,
        0,
        265,
        275,
        5,
        56,
        0,
        0,
        266,
        268,
        7,
        0,
        0,
        0,
        267,
        266,
        1,
        0,
        0,
        0,
        267,
        268,
        1,
        0,
        0,
        0,
        268,
        270,
        1,
        0,
        0,
        0,
        269,
        271,
        5,
        47,
        0,
        0,
        270,
        269,
        1,
        0,
        0,
        0,
        270,
        271,
        1,
        0,
        0,
        0,
        271,
        272,
        1,
        0,
        0,
        0,
        272,
        275,
        5,
        51,
        0,
        0,
        273,
        275,
        5,
        47,
        0,
        0,
        274,
        253,
        1,
        0,
        0,
        0,
        274,
        254,
        1,
        0,
        0,
        0,
        274,
        256,
        1,
        0,
        0,
        0,
        274,
        259,
        1,
        0,
        0,
        0,
        274,
        261,
        1,
        0,
        0,
        0,
        274,
        264,
        1,
        0,
        0,
        0,
        274,
        265,
        1,
        0,
        0,
        0,
        274,
        267,
        1,
        0,
        0,
        0,
        274,
        273,
        1,
        0,
        0,
        0,
        275,
        5,
        1,
        0,
        0,
        0,
        276,
        280,
        3,
        8,
        4,
        0,
        277,
        280,
        3,
        12,
        6,
        0,
        278,
        280,
        3,
        14,
        7,
        0,
        279,
        276,
        1,
        0,
        0,
        0,
        279,
        277,
        1,
        0,
        0,
        0,
        279,
        278,
        1,
        0,
        0,
        0,
        280,
        7,
        1,
        0,
        0,
        0,
        281,
        282,
        5,
        93,
        0,
        0,
        282,
        283,
        3,
        220,
        110,
        0,
        283,
        284,
        3,
        24,
        12,
        0,
        284,
        285,
        3,
        10,
        5,
        0,
        285,
        296,
        1,
        0,
        0,
        0,
        286,
        287,
        5,
        68,
        0,
        0,
        287,
        289,
        5,
        93,
        0,
        0,
        288,
        290,
        3,
        76,
        38,
        0,
        289,
        288,
        1,
        0,
        0,
        0,
        289,
        290,
        1,
        0,
        0,
        0,
        290,
        291,
        1,
        0,
        0,
        0,
        291,
        292,
        3,
        220,
        110,
        0,
        292,
        293,
        3,
        24,
        12,
        0,
        293,
        294,
        3,
        10,
        5,
        0,
        294,
        296,
        1,
        0,
        0,
        0,
        295,
        281,
        1,
        0,
        0,
        0,
        295,
        286,
        1,
        0,
        0,
        0,
        296,
        9,
        1,
        0,
        0,
        0,
        297,
        298,
        5,
        59,
        0,
        0,
        298,
        299,
        5,
        93,
        0,
        0,
        299,
        11,
        1,
        0,
        0,
        0,
        300,
        301,
        5,
        93,
        0,
        0,
        301,
        302,
        5,
        13,
        0,
        0,
        302,
        303,
        3,
        16,
        8,
        0,
        303,
        305,
        3,
        190,
        95,
        0,
        304,
        306,
        3,
        214,
        107,
        0,
        305,
        304,
        1,
        0,
        0,
        0,
        305,
        306,
        1,
        0,
        0,
        0,
        306,
        308,
        1,
        0,
        0,
        0,
        307,
        309,
        3,
        76,
        38,
        0,
        308,
        307,
        1,
        0,
        0,
        0,
        308,
        309,
        1,
        0,
        0,
        0,
        309,
        310,
        1,
        0,
        0,
        0,
        310,
        311,
        3,
        218,
        109,
        0,
        311,
        319,
        1,
        0,
        0,
        0,
        312,
        313,
        5,
        93,
        0,
        0,
        313,
        314,
        5,
        13,
        0,
        0,
        314,
        315,
        5,
        70,
        0,
        0,
        315,
        316,
        3,
        18,
        9,
        0,
        316,
        317,
        3,
        218,
        109,
        0,
        317,
        319,
        1,
        0,
        0,
        0,
        318,
        300,
        1,
        0,
        0,
        0,
        318,
        312,
        1,
        0,
        0,
        0,
        319,
        13,
        1,
        0,
        0,
        0,
        320,
        321,
        5,
        93,
        0,
        0,
        321,
        322,
        5,
        13,
        0,
        0,
        322,
        323,
        5,
        60,
        0,
        0,
        323,
        324,
        5,
        7,
        0,
        0,
        324,
        325,
        3,
        190,
        95,
        0,
        325,
        326,
        5,
        3,
        0,
        0,
        326,
        331,
        5,
        93,
        0,
        0,
        327,
        328,
        5,
        3,
        0,
        0,
        328,
        330,
        5,
        93,
        0,
        0,
        329,
        327,
        1,
        0,
        0,
        0,
        330,
        333,
        1,
        0,
        0,
        0,
        331,
        329,
        1,
        0,
        0,
        0,
        331,
        332,
        1,
        0,
        0,
        0,
        332,
        334,
        1,
        0,
        0,
        0,
        333,
        331,
        1,
        0,
        0,
        0,
        334,
        335,
        5,
        8,
        0,
        0,
        335,
        336,
        3,
        218,
        109,
        0,
        336,
        15,
        1,
        0,
        0,
        0,
        337,
        339,
        7,
        1,
        0,
        0,
        338,
        337,
        1,
        0,
        0,
        0,
        338,
        339,
        1,
        0,
        0,
        0,
        339,
        17,
        1,
        0,
        0,
        0,
        340,
        345,
        5,
        7,
        0,
        0,
        341,
        343,
        3,
        20,
        10,
        0,
        342,
        341,
        1,
        0,
        0,
        0,
        342,
        343,
        1,
        0,
        0,
        0,
        343,
        346,
        1,
        0,
        0,
        0,
        344,
        346,
        5,
        6,
        0,
        0,
        345,
        342,
        1,
        0,
        0,
        0,
        345,
        344,
        1,
        0,
        0,
        0,
        346,
        347,
        1,
        0,
        0,
        0,
        347,
        348,
        5,
        8,
        0,
        0,
        348,
        19,
        1,
        0,
        0,
        0,
        349,
        354,
        3,
        22,
        11,
        0,
        350,
        351,
        5,
        3,
        0,
        0,
        351,
        353,
        3,
        22,
        11,
        0,
        352,
        350,
        1,
        0,
        0,
        0,
        353,
        356,
        1,
        0,
        0,
        0,
        354,
        352,
        1,
        0,
        0,
        0,
        354,
        355,
        1,
        0,
        0,
        0,
        355,
        21,
        1,
        0,
        0,
        0,
        356,
        354,
        1,
        0,
        0,
        0,
        357,
        358,
        5,
        93,
        0,
        0,
        358,
        359,
        3,
        218,
        109,
        0,
        359,
        23,
        1,
        0,
        0,
        0,
        360,
        367,
        3,
        36,
        18,
        0,
        361,
        366,
        3,
        38,
        19,
        0,
        362,
        366,
        3,
        40,
        20,
        0,
        363,
        366,
        3,
        96,
        48,
        0,
        364,
        366,
        3,
        98,
        49,
        0,
        365,
        361,
        1,
        0,
        0,
        0,
        365,
        362,
        1,
        0,
        0,
        0,
        365,
        363,
        1,
        0,
        0,
        0,
        365,
        364,
        1,
        0,
        0,
        0,
        366,
        369,
        1,
        0,
        0,
        0,
        367,
        365,
        1,
        0,
        0,
        0,
        367,
        368,
        1,
        0,
        0,
        0,
        368,
        371,
        1,
        0,
        0,
        0,
        369,
        367,
        1,
        0,
        0,
        0,
        370,
        372,
        3,
        28,
        14,
        0,
        371,
        370,
        1,
        0,
        0,
        0,
        371,
        372,
        1,
        0,
        0,
        0,
        372,
        374,
        1,
        0,
        0,
        0,
        373,
        375,
        3,
        26,
        13,
        0,
        374,
        373,
        1,
        0,
        0,
        0,
        374,
        375,
        1,
        0,
        0,
        0,
        375,
        25,
        1,
        0,
        0,
        0,
        376,
        377,
        5,
        86,
        0,
        0,
        377,
        378,
        3,
        76,
        38,
        0,
        378,
        379,
        5,
        5,
        0,
        0,
        379,
        27,
        1,
        0,
        0,
        0,
        380,
        382,
        5,
        87,
        0,
        0,
        381,
        383,
        3,
        30,
        15,
        0,
        382,
        381,
        1,
        0,
        0,
        0,
        382,
        383,
        1,
        0,
        0,
        0,
        383,
        385,
        1,
        0,
        0,
        0,
        384,
        386,
        3,
        32,
        16,
        0,
        385,
        384,
        1,
        0,
        0,
        0,
        385,
        386,
        1,
        0,
        0,
        0,
        386,
        388,
        1,
        0,
        0,
        0,
        387,
        389,
        3,
        224,
        112,
        0,
        388,
        387,
        1,
        0,
        0,
        0,
        388,
        389,
        1,
        0,
        0,
        0,
        389,
        390,
        1,
        0,
        0,
        0,
        390,
        391,
        5,
        5,
        0,
        0,
        391,
        29,
        1,
        0,
        0,
        0,
        392,
        393,
        5,
        90,
        0,
        0,
        393,
        31,
        1,
        0,
        0,
        0,
        394,
        395,
        3,
        194,
        97,
        0,
        395,
        396,
        5,
        13,
        0,
        0,
        396,
        398,
        1,
        0,
        0,
        0,
        397,
        394,
        1,
        0,
        0,
        0,
        397,
        398,
        1,
        0,
        0,
        0,
        398,
        399,
        1,
        0,
        0,
        0,
        399,
        400,
        5,
        93,
        0,
        0,
        400,
        401,
        3,
        34,
        17,
        0,
        401,
        33,
        1,
        0,
        0,
        0,
        402,
        404,
        5,
        7,
        0,
        0,
        403,
        405,
        3,
        210,
        105,
        0,
        404,
        403,
        1,
        0,
        0,
        0,
        404,
        405,
        1,
        0,
        0,
        0,
        405,
        406,
        1,
        0,
        0,
        0,
        406,
        407,
        5,
        8,
        0,
        0,
        407,
        35,
        1,
        0,
        0,
        0,
        408,
        409,
        3,
        42,
        21,
        0,
        409,
        37,
        1,
        0,
        0,
        0,
        410,
        411,
        5,
        73,
        0,
        0,
        411,
        412,
        3,
        42,
        21,
        0,
        412,
        39,
        1,
        0,
        0,
        0,
        413,
        414,
        5,
        74,
        0,
        0,
        414,
        415,
        3,
        42,
        21,
        0,
        415,
        41,
        1,
        0,
        0,
        0,
        416,
        417,
        3,
        44,
        22,
        0,
        417,
        418,
        5,
        5,
        0,
        0,
        418,
        420,
        1,
        0,
        0,
        0,
        419,
        416,
        1,
        0,
        0,
        0,
        420,
        423,
        1,
        0,
        0,
        0,
        421,
        419,
        1,
        0,
        0,
        0,
        421,
        422,
        1,
        0,
        0,
        0,
        422,
        43,
        1,
        0,
        0,
        0,
        423,
        421,
        1,
        0,
        0,
        0,
        424,
        428,
        3,
        46,
        23,
        0,
        425,
        428,
        3,
        52,
        26,
        0,
        426,
        428,
        3,
        50,
        25,
        0,
        427,
        424,
        1,
        0,
        0,
        0,
        427,
        425,
        1,
        0,
        0,
        0,
        427,
        426,
        1,
        0,
        0,
        0,
        428,
        45,
        1,
        0,
        0,
        0,
        429,
        442,
        5,
        69,
        0,
        0,
        430,
        431,
        5,
        93,
        0,
        0,
        431,
        432,
        5,
        13,
        0,
        0,
        432,
        443,
        3,
        192,
        96,
        0,
        433,
        440,
        3,
        192,
        96,
        0,
        434,
        441,
        5,
        22,
        0,
        0,
        435,
        436,
        5,
        4,
        0,
        0,
        436,
        437,
        5,
        9,
        0,
        0,
        437,
        438,
        3,
        48,
        24,
        0,
        438,
        439,
        5,
        10,
        0,
        0,
        439,
        441,
        1,
        0,
        0,
        0,
        440,
        434,
        1,
        0,
        0,
        0,
        440,
        435,
        1,
        0,
        0,
        0,
        440,
        441,
        1,
        0,
        0,
        0,
        441,
        443,
        1,
        0,
        0,
        0,
        442,
        430,
        1,
        0,
        0,
        0,
        442,
        433,
        1,
        0,
        0,
        0,
        443,
        444,
        1,
        0,
        0,
        0,
        444,
        445,
        3,
        218,
        109,
        0,
        445,
        47,
        1,
        0,
        0,
        0,
        446,
        451,
        5,
        93,
        0,
        0,
        447,
        448,
        5,
        3,
        0,
        0,
        448,
        450,
        5,
        93,
        0,
        0,
        449,
        447,
        1,
        0,
        0,
        0,
        450,
        453,
        1,
        0,
        0,
        0,
        451,
        449,
        1,
        0,
        0,
        0,
        451,
        452,
        1,
        0,
        0,
        0,
        452,
        49,
        1,
        0,
        0,
        0,
        453,
        451,
        1,
        0,
        0,
        0,
        454,
        456,
        5,
        75,
        0,
        0,
        455,
        454,
        1,
        0,
        0,
        0,
        455,
        456,
        1,
        0,
        0,
        0,
        456,
        458,
        1,
        0,
        0,
        0,
        457,
        459,
        5,
        66,
        0,
        0,
        458,
        457,
        1,
        0,
        0,
        0,
        458,
        459,
        1,
        0,
        0,
        0,
        459,
        461,
        1,
        0,
        0,
        0,
        460,
        462,
        5,
        76,
        0,
        0,
        461,
        460,
        1,
        0,
        0,
        0,
        461,
        462,
        1,
        0,
        0,
        0,
        462,
        464,
        1,
        0,
        0,
        0,
        463,
        465,
        5,
        77,
        0,
        0,
        464,
        463,
        1,
        0,
        0,
        0,
        464,
        465,
        1,
        0,
        0,
        0,
        465,
        467,
        1,
        0,
        0,
        0,
        466,
        468,
        5,
        78,
        0,
        0,
        467,
        466,
        1,
        0,
        0,
        0,
        467,
        468,
        1,
        0,
        0,
        0,
        468,
        471,
        1,
        0,
        0,
        0,
        469,
        472,
        3,
        2,
        1,
        0,
        470,
        472,
        3,
        62,
        31,
        0,
        471,
        469,
        1,
        0,
        0,
        0,
        471,
        470,
        1,
        0,
        0,
        0,
        472,
        476,
        1,
        0,
        0,
        0,
        473,
        474,
        3,
        54,
        27,
        0,
        474,
        475,
        3,
        218,
        109,
        0,
        475,
        477,
        1,
        0,
        0,
        0,
        476,
        473,
        1,
        0,
        0,
        0,
        476,
        477,
        1,
        0,
        0,
        0,
        477,
        51,
        1,
        0,
        0,
        0,
        478,
        479,
        5,
        68,
        0,
        0,
        479,
        481,
        3,
        190,
        95,
        0,
        480,
        482,
        3,
        56,
        28,
        0,
        481,
        480,
        1,
        0,
        0,
        0,
        481,
        482,
        1,
        0,
        0,
        0,
        482,
        484,
        1,
        0,
        0,
        0,
        483,
        485,
        3,
        224,
        112,
        0,
        484,
        483,
        1,
        0,
        0,
        0,
        484,
        485,
        1,
        0,
        0,
        0,
        485,
        53,
        1,
        0,
        0,
        0,
        486,
        487,
        5,
        79,
        0,
        0,
        487,
        489,
        3,
        190,
        95,
        0,
        488,
        490,
        3,
        76,
        38,
        0,
        489,
        488,
        1,
        0,
        0,
        0,
        489,
        490,
        1,
        0,
        0,
        0,
        490,
        55,
        1,
        0,
        0,
        0,
        491,
        493,
        5,
        7,
        0,
        0,
        492,
        494,
        3,
        58,
        29,
        0,
        493,
        492,
        1,
        0,
        0,
        0,
        493,
        494,
        1,
        0,
        0,
        0,
        494,
        495,
        1,
        0,
        0,
        0,
        495,
        496,
        5,
        8,
        0,
        0,
        496,
        57,
        1,
        0,
        0,
        0,
        497,
        500,
        3,
        80,
        40,
        0,
        498,
        500,
        3,
        60,
        30,
        0,
        499,
        497,
        1,
        0,
        0,
        0,
        499,
        498,
        1,
        0,
        0,
        0,
        500,
        508,
        1,
        0,
        0,
        0,
        501,
        504,
        5,
        3,
        0,
        0,
        502,
        505,
        3,
        80,
        40,
        0,
        503,
        505,
        3,
        60,
        30,
        0,
        504,
        502,
        1,
        0,
        0,
        0,
        504,
        503,
        1,
        0,
        0,
        0,
        505,
        507,
        1,
        0,
        0,
        0,
        506,
        501,
        1,
        0,
        0,
        0,
        507,
        510,
        1,
        0,
        0,
        0,
        508,
        506,
        1,
        0,
        0,
        0,
        508,
        509,
        1,
        0,
        0,
        0,
        509,
        59,
        1,
        0,
        0,
        0,
        510,
        508,
        1,
        0,
        0,
        0,
        511,
        514,
        5,
        44,
        0,
        0,
        512,
        515,
        3,
        140,
        70,
        0,
        513,
        515,
        5,
        93,
        0,
        0,
        514,
        512,
        1,
        0,
        0,
        0,
        514,
        513,
        1,
        0,
        0,
        0,
        515,
        61,
        1,
        0,
        0,
        0,
        516,
        517,
        3,
        64,
        32,
        0,
        517,
        519,
        3,
        190,
        95,
        0,
        518,
        520,
        3,
        214,
        107,
        0,
        519,
        518,
        1,
        0,
        0,
        0,
        519,
        520,
        1,
        0,
        0,
        0,
        520,
        521,
        1,
        0,
        0,
        0,
        521,
        522,
        3,
        66,
        33,
        0,
        522,
        63,
        1,
        0,
        0,
        0,
        523,
        525,
        7,
        2,
        0,
        0,
        524,
        523,
        1,
        0,
        0,
        0,
        524,
        525,
        1,
        0,
        0,
        0,
        525,
        527,
        1,
        0,
        0,
        0,
        526,
        528,
        7,
        3,
        0,
        0,
        527,
        526,
        1,
        0,
        0,
        0,
        527,
        528,
        1,
        0,
        0,
        0,
        528,
        530,
        1,
        0,
        0,
        0,
        529,
        531,
        7,
        1,
        0,
        0,
        530,
        529,
        1,
        0,
        0,
        0,
        530,
        531,
        1,
        0,
        0,
        0,
        531,
        65,
        1,
        0,
        0,
        0,
        532,
        537,
        3,
        68,
        34,
        0,
        533,
        534,
        5,
        3,
        0,
        0,
        534,
        536,
        3,
        68,
        34,
        0,
        535,
        533,
        1,
        0,
        0,
        0,
        536,
        539,
        1,
        0,
        0,
        0,
        537,
        535,
        1,
        0,
        0,
        0,
        537,
        538,
        1,
        0,
        0,
        0,
        538,
        67,
        1,
        0,
        0,
        0,
        539,
        537,
        1,
        0,
        0,
        0,
        540,
        543,
        3,
        70,
        35,
        0,
        541,
        542,
        5,
        36,
        0,
        0,
        542,
        544,
        3,
        144,
        72,
        0,
        543,
        541,
        1,
        0,
        0,
        0,
        543,
        544,
        1,
        0,
        0,
        0,
        544,
        545,
        1,
        0,
        0,
        0,
        545,
        546,
        3,
        218,
        109,
        0,
        546,
        69,
        1,
        0,
        0,
        0,
        547,
        549,
        5,
        93,
        0,
        0,
        548,
        550,
        3,
        214,
        107,
        0,
        549,
        548,
        1,
        0,
        0,
        0,
        549,
        550,
        1,
        0,
        0,
        0,
        550,
        552,
        1,
        0,
        0,
        0,
        551,
        553,
        3,
        72,
        36,
        0,
        552,
        551,
        1,
        0,
        0,
        0,
        552,
        553,
        1,
        0,
        0,
        0,
        553,
        71,
        1,
        0,
        0,
        0,
        554,
        557,
        3,
        76,
        38,
        0,
        555,
        556,
        5,
        13,
        0,
        0,
        556,
        558,
        3,
        74,
        37,
        0,
        557,
        555,
        1,
        0,
        0,
        0,
        557,
        558,
        1,
        0,
        0,
        0,
        558,
        564,
        1,
        0,
        0,
        0,
        559,
        560,
        5,
        13,
        0,
        0,
        560,
        564,
        3,
        74,
        37,
        0,
        561,
        562,
        5,
        14,
        0,
        0,
        562,
        564,
        3,
        74,
        37,
        0,
        563,
        554,
        1,
        0,
        0,
        0,
        563,
        559,
        1,
        0,
        0,
        0,
        563,
        561,
        1,
        0,
        0,
        0,
        564,
        73,
        1,
        0,
        0,
        0,
        565,
        568,
        3,
        144,
        72,
        0,
        566,
        568,
        5,
        44,
        0,
        0,
        567,
        565,
        1,
        0,
        0,
        0,
        567,
        566,
        1,
        0,
        0,
        0,
        568,
        75,
        1,
        0,
        0,
        0,
        569,
        571,
        5,
        7,
        0,
        0,
        570,
        572,
        3,
        78,
        39,
        0,
        571,
        570,
        1,
        0,
        0,
        0,
        571,
        572,
        1,
        0,
        0,
        0,
        572,
        573,
        1,
        0,
        0,
        0,
        573,
        574,
        5,
        8,
        0,
        0,
        574,
        77,
        1,
        0,
        0,
        0,
        575,
        580,
        3,
        80,
        40,
        0,
        576,
        577,
        5,
        3,
        0,
        0,
        577,
        579,
        3,
        80,
        40,
        0,
        578,
        576,
        1,
        0,
        0,
        0,
        579,
        582,
        1,
        0,
        0,
        0,
        580,
        578,
        1,
        0,
        0,
        0,
        580,
        581,
        1,
        0,
        0,
        0,
        581,
        79,
        1,
        0,
        0,
        0,
        582,
        580,
        1,
        0,
        0,
        0,
        583,
        586,
        3,
        82,
        41,
        0,
        584,
        586,
        3,
        86,
        43,
        0,
        585,
        583,
        1,
        0,
        0,
        0,
        585,
        584,
        1,
        0,
        0,
        0,
        586,
        81,
        1,
        0,
        0,
        0,
        587,
        589,
        5,
        85,
        0,
        0,
        588,
        587,
        1,
        0,
        0,
        0,
        588,
        589,
        1,
        0,
        0,
        0,
        589,
        591,
        1,
        0,
        0,
        0,
        590,
        592,
        5,
        66,
        0,
        0,
        591,
        590,
        1,
        0,
        0,
        0,
        591,
        592,
        1,
        0,
        0,
        0,
        592,
        595,
        1,
        0,
        0,
        0,
        593,
        596,
        3,
        84,
        42,
        0,
        594,
        596,
        3,
        88,
        44,
        0,
        595,
        593,
        1,
        0,
        0,
        0,
        595,
        594,
        1,
        0,
        0,
        0,
        596,
        83,
        1,
        0,
        0,
        0,
        597,
        599,
        3,
        192,
        96,
        0,
        598,
        600,
        3,
        72,
        36,
        0,
        599,
        598,
        1,
        0,
        0,
        0,
        599,
        600,
        1,
        0,
        0,
        0,
        600,
        601,
        1,
        0,
        0,
        0,
        601,
        602,
        3,
        220,
        110,
        0,
        602,
        85,
        1,
        0,
        0,
        0,
        603,
        605,
        5,
        75,
        0,
        0,
        604,
        606,
        5,
        85,
        0,
        0,
        605,
        604,
        1,
        0,
        0,
        0,
        605,
        606,
        1,
        0,
        0,
        0,
        606,
        608,
        1,
        0,
        0,
        0,
        607,
        609,
        5,
        66,
        0,
        0,
        608,
        607,
        1,
        0,
        0,
        0,
        608,
        609,
        1,
        0,
        0,
        0,
        609,
        613,
        1,
        0,
        0,
        0,
        610,
        614,
        3,
        94,
        47,
        0,
        611,
        614,
        3,
        90,
        45,
        0,
        612,
        614,
        3,
        88,
        44,
        0,
        613,
        610,
        1,
        0,
        0,
        0,
        613,
        611,
        1,
        0,
        0,
        0,
        613,
        612,
        1,
        0,
        0,
        0,
        614,
        87,
        1,
        0,
        0,
        0,
        615,
        618,
        5,
        78,
        0,
        0,
        616,
        619,
        3,
        94,
        47,
        0,
        617,
        619,
        3,
        90,
        45,
        0,
        618,
        616,
        1,
        0,
        0,
        0,
        618,
        617,
        1,
        0,
        0,
        0,
        619,
        621,
        1,
        0,
        0,
        0,
        620,
        622,
        3,
        54,
        27,
        0,
        621,
        620,
        1,
        0,
        0,
        0,
        621,
        622,
        1,
        0,
        0,
        0,
        622,
        89,
        1,
        0,
        0,
        0,
        623,
        624,
        3,
        64,
        32,
        0,
        624,
        625,
        3,
        190,
        95,
        0,
        625,
        626,
        3,
        92,
        46,
        0,
        626,
        91,
        1,
        0,
        0,
        0,
        627,
        628,
        3,
        70,
        35,
        0,
        628,
        629,
        3,
        218,
        109,
        0,
        629,
        93,
        1,
        0,
        0,
        0,
        630,
        631,
        3,
        4,
        2,
        0,
        631,
        632,
        3,
        12,
        6,
        0,
        632,
        95,
        1,
        0,
        0,
        0,
        633,
        635,
        5,
        62,
        0,
        0,
        634,
        633,
        1,
        0,
        0,
        0,
        634,
        635,
        1,
        0,
        0,
        0,
        635,
        636,
        1,
        0,
        0,
        0,
        636,
        637,
        5,
        63,
        0,
        0,
        637,
        638,
        3,
        100,
        50,
        0,
        638,
        97,
        1,
        0,
        0,
        0,
        639,
        641,
        5,
        62,
        0,
        0,
        640,
        639,
        1,
        0,
        0,
        0,
        640,
        641,
        1,
        0,
        0,
        0,
        641,
        642,
        1,
        0,
        0,
        0,
        642,
        643,
        5,
        64,
        0,
        0,
        643,
        644,
        3,
        102,
        51,
        0,
        644,
        99,
        1,
        0,
        0,
        0,
        645,
        646,
        3,
        104,
        52,
        0,
        646,
        647,
        5,
        5,
        0,
        0,
        647,
        649,
        1,
        0,
        0,
        0,
        648,
        645,
        1,
        0,
        0,
        0,
        649,
        652,
        1,
        0,
        0,
        0,
        650,
        648,
        1,
        0,
        0,
        0,
        650,
        651,
        1,
        0,
        0,
        0,
        651,
        101,
        1,
        0,
        0,
        0,
        652,
        650,
        1,
        0,
        0,
        0,
        653,
        654,
        3,
        106,
        53,
        0,
        654,
        655,
        5,
        5,
        0,
        0,
        655,
        657,
        1,
        0,
        0,
        0,
        656,
        653,
        1,
        0,
        0,
        0,
        657,
        660,
        1,
        0,
        0,
        0,
        658,
        656,
        1,
        0,
        0,
        0,
        658,
        659,
        1,
        0,
        0,
        0,
        659,
        103,
        1,
        0,
        0,
        0,
        660,
        658,
        1,
        0,
        0,
        0,
        661,
        662,
        3,
        156,
        78,
        0,
        662,
        663,
        5,
        13,
        0,
        0,
        663,
        664,
        3,
        144,
        72,
        0,
        664,
        673,
        1,
        0,
        0,
        0,
        665,
        673,
        3,
        108,
        54,
        0,
        666,
        673,
        3,
        122,
        61,
        0,
        667,
        673,
        3,
        140,
        70,
        0,
        668,
        673,
        3,
        132,
        66,
        0,
        669,
        670,
        3,
        194,
        97,
        0,
        670,
        671,
        3,
        196,
        98,
        0,
        671,
        673,
        1,
        0,
        0,
        0,
        672,
        661,
        1,
        0,
        0,
        0,
        672,
        665,
        1,
        0,
        0,
        0,
        672,
        666,
        1,
        0,
        0,
        0,
        672,
        667,
        1,
        0,
        0,
        0,
        672,
        668,
        1,
        0,
        0,
        0,
        672,
        669,
        1,
        0,
        0,
        0,
        673,
        674,
        1,
        0,
        0,
        0,
        674,
        675,
        3,
        218,
        109,
        0,
        675,
        105,
        1,
        0,
        0,
        0,
        676,
        680,
        3,
        194,
        97,
        0,
        677,
        678,
        5,
        14,
        0,
        0,
        678,
        681,
        3,
        144,
        72,
        0,
        679,
        681,
        3,
        196,
        98,
        0,
        680,
        677,
        1,
        0,
        0,
        0,
        680,
        679,
        1,
        0,
        0,
        0,
        681,
        696,
        1,
        0,
        0,
        0,
        682,
        683,
        5,
        7,
        0,
        0,
        683,
        684,
        3,
        208,
        104,
        0,
        684,
        685,
        5,
        8,
        0,
        0,
        685,
        686,
        5,
        14,
        0,
        0,
        686,
        687,
        3,
        194,
        97,
        0,
        687,
        688,
        3,
        196,
        98,
        0,
        688,
        696,
        1,
        0,
        0,
        0,
        689,
        696,
        5,
        44,
        0,
        0,
        690,
        696,
        5,
        45,
        0,
        0,
        691,
        696,
        3,
        112,
        56,
        0,
        692,
        696,
        3,
        124,
        62,
        0,
        693,
        696,
        3,
        130,
        65,
        0,
        694,
        696,
        3,
        134,
        67,
        0,
        695,
        676,
        1,
        0,
        0,
        0,
        695,
        682,
        1,
        0,
        0,
        0,
        695,
        689,
        1,
        0,
        0,
        0,
        695,
        690,
        1,
        0,
        0,
        0,
        695,
        691,
        1,
        0,
        0,
        0,
        695,
        692,
        1,
        0,
        0,
        0,
        695,
        693,
        1,
        0,
        0,
        0,
        695,
        694,
        1,
        0,
        0,
        0,
        696,
        697,
        1,
        0,
        0,
        0,
        697,
        698,
        3,
        218,
        109,
        0,
        698,
        107,
        1,
        0,
        0,
        0,
        699,
        700,
        3,
        114,
        57,
        0,
        700,
        706,
        3,
        110,
        55,
        0,
        701,
        702,
        3,
        116,
        58,
        0,
        702,
        703,
        3,
        110,
        55,
        0,
        703,
        705,
        1,
        0,
        0,
        0,
        704,
        701,
        1,
        0,
        0,
        0,
        705,
        708,
        1,
        0,
        0,
        0,
        706,
        704,
        1,
        0,
        0,
        0,
        706,
        707,
        1,
        0,
        0,
        0,
        707,
        712,
        1,
        0,
        0,
        0,
        708,
        706,
        1,
        0,
        0,
        0,
        709,
        710,
        3,
        118,
        59,
        0,
        710,
        711,
        3,
        110,
        55,
        0,
        711,
        713,
        1,
        0,
        0,
        0,
        712,
        709,
        1,
        0,
        0,
        0,
        712,
        713,
        1,
        0,
        0,
        0,
        713,
        714,
        1,
        0,
        0,
        0,
        714,
        715,
        5,
        59,
        0,
        0,
        715,
        716,
        5,
        36,
        0,
        0,
        716,
        109,
        1,
        0,
        0,
        0,
        717,
        718,
        3,
        104,
        52,
        0,
        718,
        719,
        5,
        5,
        0,
        0,
        719,
        721,
        1,
        0,
        0,
        0,
        720,
        717,
        1,
        0,
        0,
        0,
        721,
        724,
        1,
        0,
        0,
        0,
        722,
        720,
        1,
        0,
        0,
        0,
        722,
        723,
        1,
        0,
        0,
        0,
        723,
        111,
        1,
        0,
        0,
        0,
        724,
        722,
        1,
        0,
        0,
        0,
        725,
        726,
        3,
        114,
        57,
        0,
        726,
        732,
        3,
        120,
        60,
        0,
        727,
        728,
        3,
        116,
        58,
        0,
        728,
        729,
        3,
        120,
        60,
        0,
        729,
        731,
        1,
        0,
        0,
        0,
        730,
        727,
        1,
        0,
        0,
        0,
        731,
        734,
        1,
        0,
        0,
        0,
        732,
        730,
        1,
        0,
        0,
        0,
        732,
        733,
        1,
        0,
        0,
        0,
        733,
        738,
        1,
        0,
        0,
        0,
        734,
        732,
        1,
        0,
        0,
        0,
        735,
        736,
        3,
        118,
        59,
        0,
        736,
        737,
        3,
        120,
        60,
        0,
        737,
        739,
        1,
        0,
        0,
        0,
        738,
        735,
        1,
        0,
        0,
        0,
        738,
        739,
        1,
        0,
        0,
        0,
        739,
        740,
        1,
        0,
        0,
        0,
        740,
        741,
        5,
        59,
        0,
        0,
        741,
        742,
        5,
        36,
        0,
        0,
        742,
        113,
        1,
        0,
        0,
        0,
        743,
        744,
        5,
        36,
        0,
        0,
        744,
        745,
        3,
        144,
        72,
        0,
        745,
        746,
        5,
        39,
        0,
        0,
        746,
        115,
        1,
        0,
        0,
        0,
        747,
        748,
        5,
        38,
        0,
        0,
        748,
        749,
        3,
        144,
        72,
        0,
        749,
        750,
        5,
        39,
        0,
        0,
        750,
        117,
        1,
        0,
        0,
        0,
        751,
        752,
        5,
        37,
        0,
        0,
        752,
        119,
        1,
        0,
        0,
        0,
        753,
        754,
        3,
        106,
        53,
        0,
        754,
        755,
        5,
        5,
        0,
        0,
        755,
        757,
        1,
        0,
        0,
        0,
        756,
        753,
        1,
        0,
        0,
        0,
        757,
        760,
        1,
        0,
        0,
        0,
        758,
        756,
        1,
        0,
        0,
        0,
        758,
        759,
        1,
        0,
        0,
        0,
        759,
        121,
        1,
        0,
        0,
        0,
        760,
        758,
        1,
        0,
        0,
        0,
        761,
        762,
        5,
        35,
        0,
        0,
        762,
        763,
        3,
        126,
        63,
        0,
        763,
        764,
        5,
        43,
        0,
        0,
        764,
        765,
        3,
        110,
        55,
        0,
        765,
        766,
        5,
        59,
        0,
        0,
        766,
        767,
        5,
        35,
        0,
        0,
        767,
        123,
        1,
        0,
        0,
        0,
        768,
        769,
        5,
        35,
        0,
        0,
        769,
        770,
        3,
        126,
        63,
        0,
        770,
        771,
        5,
        43,
        0,
        0,
        771,
        772,
        3,
        120,
        60,
        0,
        772,
        773,
        5,
        59,
        0,
        0,
        773,
        774,
        5,
        35,
        0,
        0,
        774,
        125,
        1,
        0,
        0,
        0,
        775,
        780,
        3,
        128,
        64,
        0,
        776,
        777,
        5,
        3,
        0,
        0,
        777,
        779,
        3,
        128,
        64,
        0,
        778,
        776,
        1,
        0,
        0,
        0,
        779,
        782,
        1,
        0,
        0,
        0,
        780,
        778,
        1,
        0,
        0,
        0,
        780,
        781,
        1,
        0,
        0,
        0,
        781,
        127,
        1,
        0,
        0,
        0,
        782,
        780,
        1,
        0,
        0,
        0,
        783,
        786,
        5,
        93,
        0,
        0,
        784,
        785,
        5,
        34,
        0,
        0,
        785,
        787,
        3,
        144,
        72,
        0,
        786,
        784,
        1,
        0,
        0,
        0,
        786,
        787,
        1,
        0,
        0,
        0,
        787,
        129,
        1,
        0,
        0,
        0,
        788,
        789,
        5,
        42,
        0,
        0,
        789,
        790,
        3,
        144,
        72,
        0,
        790,
        791,
        5,
        43,
        0,
        0,
        791,
        792,
        3,
        120,
        60,
        0,
        792,
        793,
        5,
        59,
        0,
        0,
        793,
        794,
        5,
        42,
        0,
        0,
        794,
        131,
        1,
        0,
        0,
        0,
        795,
        796,
        3,
        136,
        68,
        0,
        796,
        802,
        3,
        110,
        55,
        0,
        797,
        798,
        3,
        138,
        69,
        0,
        798,
        799,
        3,
        110,
        55,
        0,
        799,
        801,
        1,
        0,
        0,
        0,
        800,
        797,
        1,
        0,
        0,
        0,
        801,
        804,
        1,
        0,
        0,
        0,
        802,
        800,
        1,
        0,
        0,
        0,
        802,
        803,
        1,
        0,
        0,
        0,
        803,
        805,
        1,
        0,
        0,
        0,
        804,
        802,
        1,
        0,
        0,
        0,
        805,
        806,
        5,
        59,
        0,
        0,
        806,
        807,
        5,
        40,
        0,
        0,
        807,
        133,
        1,
        0,
        0,
        0,
        808,
        809,
        3,
        136,
        68,
        0,
        809,
        815,
        3,
        120,
        60,
        0,
        810,
        811,
        3,
        138,
        69,
        0,
        811,
        812,
        3,
        120,
        60,
        0,
        812,
        814,
        1,
        0,
        0,
        0,
        813,
        810,
        1,
        0,
        0,
        0,
        814,
        817,
        1,
        0,
        0,
        0,
        815,
        813,
        1,
        0,
        0,
        0,
        815,
        816,
        1,
        0,
        0,
        0,
        816,
        818,
        1,
        0,
        0,
        0,
        817,
        815,
        1,
        0,
        0,
        0,
        818,
        819,
        5,
        59,
        0,
        0,
        819,
        820,
        5,
        40,
        0,
        0,
        820,
        135,
        1,
        0,
        0,
        0,
        821,
        822,
        5,
        40,
        0,
        0,
        822,
        823,
        3,
        144,
        72,
        0,
        823,
        824,
        5,
        39,
        0,
        0,
        824,
        137,
        1,
        0,
        0,
        0,
        825,
        826,
        5,
        41,
        0,
        0,
        826,
        827,
        3,
        144,
        72,
        0,
        827,
        828,
        5,
        39,
        0,
        0,
        828,
        139,
        1,
        0,
        0,
        0,
        829,
        830,
        5,
        61,
        0,
        0,
        830,
        831,
        3,
        142,
        71,
        0,
        831,
        141,
        1,
        0,
        0,
        0,
        832,
        833,
        5,
        7,
        0,
        0,
        833,
        834,
        3,
        194,
        97,
        0,
        834,
        835,
        5,
        3,
        0,
        0,
        835,
        836,
        3,
        194,
        97,
        0,
        836,
        837,
        5,
        8,
        0,
        0,
        837,
        143,
        1,
        0,
        0,
        0,
        838,
        841,
        3,
        156,
        78,
        0,
        839,
        841,
        3,
        146,
        73,
        0,
        840,
        838,
        1,
        0,
        0,
        0,
        840,
        839,
        1,
        0,
        0,
        0,
        841,
        145,
        1,
        0,
        0,
        0,
        842,
        843,
        3,
        148,
        74,
        0,
        843,
        849,
        3,
        154,
        77,
        0,
        844,
        845,
        3,
        150,
        75,
        0,
        845,
        846,
        3,
        154,
        77,
        0,
        846,
        848,
        1,
        0,
        0,
        0,
        847,
        844,
        1,
        0,
        0,
        0,
        848,
        851,
        1,
        0,
        0,
        0,
        849,
        847,
        1,
        0,
        0,
        0,
        849,
        850,
        1,
        0,
        0,
        0,
        850,
        852,
        1,
        0,
        0,
        0,
        851,
        849,
        1,
        0,
        0,
        0,
        852,
        853,
        3,
        152,
        76,
        0,
        853,
        854,
        3,
        154,
        77,
        0,
        854,
        147,
        1,
        0,
        0,
        0,
        855,
        856,
        5,
        36,
        0,
        0,
        856,
        857,
        3,
        144,
        72,
        0,
        857,
        858,
        5,
        39,
        0,
        0,
        858,
        149,
        1,
        0,
        0,
        0,
        859,
        860,
        5,
        38,
        0,
        0,
        860,
        861,
        3,
        144,
        72,
        0,
        861,
        862,
        5,
        39,
        0,
        0,
        862,
        151,
        1,
        0,
        0,
        0,
        863,
        864,
        5,
        37,
        0,
        0,
        864,
        153,
        1,
        0,
        0,
        0,
        865,
        866,
        3,
        144,
        72,
        0,
        866,
        155,
        1,
        0,
        0,
        0,
        867,
        874,
        3,
        158,
        79,
        0,
        868,
        869,
        5,
        6,
        0,
        0,
        869,
        872,
        3,
        158,
        79,
        0,
        870,
        871,
        5,
        6,
        0,
        0,
        871,
        873,
        3,
        158,
        79,
        0,
        872,
        870,
        1,
        0,
        0,
        0,
        872,
        873,
        1,
        0,
        0,
        0,
        873,
        875,
        1,
        0,
        0,
        0,
        874,
        868,
        1,
        0,
        0,
        0,
        874,
        875,
        1,
        0,
        0,
        0,
        875,
        157,
        1,
        0,
        0,
        0,
        876,
        882,
        3,
        162,
        81,
        0,
        877,
        878,
        3,
        160,
        80,
        0,
        878,
        879,
        3,
        162,
        81,
        0,
        879,
        881,
        1,
        0,
        0,
        0,
        880,
        877,
        1,
        0,
        0,
        0,
        881,
        884,
        1,
        0,
        0,
        0,
        882,
        880,
        1,
        0,
        0,
        0,
        882,
        883,
        1,
        0,
        0,
        0,
        883,
        159,
        1,
        0,
        0,
        0,
        884,
        882,
        1,
        0,
        0,
        0,
        885,
        886,
        5,
        33,
        0,
        0,
        886,
        161,
        1,
        0,
        0,
        0,
        887,
        893,
        3,
        166,
        83,
        0,
        888,
        889,
        3,
        164,
        82,
        0,
        889,
        890,
        3,
        166,
        83,
        0,
        890,
        892,
        1,
        0,
        0,
        0,
        891,
        888,
        1,
        0,
        0,
        0,
        892,
        895,
        1,
        0,
        0,
        0,
        893,
        891,
        1,
        0,
        0,
        0,
        893,
        894,
        1,
        0,
        0,
        0,
        894,
        163,
        1,
        0,
        0,
        0,
        895,
        893,
        1,
        0,
        0,
        0,
        896,
        897,
        5,
        32,
        0,
        0,
        897,
        165,
        1,
        0,
        0,
        0,
        898,
        900,
        5,
        31,
        0,
        0,
        899,
        898,
        1,
        0,
        0,
        0,
        899,
        900,
        1,
        0,
        0,
        0,
        900,
        901,
        1,
        0,
        0,
        0,
        901,
        902,
        3,
        168,
        84,
        0,
        902,
        167,
        1,
        0,
        0,
        0,
        903,
        907,
        3,
        172,
        86,
        0,
        904,
        905,
        3,
        170,
        85,
        0,
        905,
        906,
        3,
        172,
        86,
        0,
        906,
        908,
        1,
        0,
        0,
        0,
        907,
        904,
        1,
        0,
        0,
        0,
        907,
        908,
        1,
        0,
        0,
        0,
        908,
        169,
        1,
        0,
        0,
        0,
        909,
        910,
        7,
        4,
        0,
        0,
        910,
        171,
        1,
        0,
        0,
        0,
        911,
        917,
        3,
        180,
        90,
        0,
        912,
        913,
        3,
        178,
        89,
        0,
        913,
        914,
        3,
        180,
        90,
        0,
        914,
        916,
        1,
        0,
        0,
        0,
        915,
        912,
        1,
        0,
        0,
        0,
        916,
        919,
        1,
        0,
        0,
        0,
        917,
        915,
        1,
        0,
        0,
        0,
        917,
        918,
        1,
        0,
        0,
        0,
        918,
        173,
        1,
        0,
        0,
        0,
        919,
        917,
        1,
        0,
        0,
        0,
        920,
        921,
        3,
        178,
        89,
        0,
        921,
        922,
        3,
        176,
        88,
        0,
        922,
        175,
        1,
        0,
        0,
        0,
        923,
        924,
        3,
        188,
        94,
        0,
        924,
        177,
        1,
        0,
        0,
        0,
        925,
        926,
        7,
        5,
        0,
        0,
        926,
        179,
        1,
        0,
        0,
        0,
        927,
        933,
        3,
        184,
        92,
        0,
        928,
        929,
        3,
        182,
        91,
        0,
        929,
        930,
        3,
        184,
        92,
        0,
        930,
        932,
        1,
        0,
        0,
        0,
        931,
        928,
        1,
        0,
        0,
        0,
        932,
        935,
        1,
        0,
        0,
        0,
        933,
        931,
        1,
        0,
        0,
        0,
        933,
        934,
        1,
        0,
        0,
        0,
        934,
        181,
        1,
        0,
        0,
        0,
        935,
        933,
        1,
        0,
        0,
        0,
        936,
        937,
        7,
        6,
        0,
        0,
        937,
        183,
        1,
        0,
        0,
        0,
        938,
        942,
        3,
        188,
        94,
        0,
        939,
        940,
        3,
        186,
        93,
        0,
        940,
        941,
        3,
        188,
        94,
        0,
        941,
        943,
        1,
        0,
        0,
        0,
        942,
        939,
        1,
        0,
        0,
        0,
        942,
        943,
        1,
        0,
        0,
        0,
        943,
        185,
        1,
        0,
        0,
        0,
        944,
        945,
        7,
        7,
        0,
        0,
        945,
        187,
        1,
        0,
        0,
        0,
        946,
        979,
        5,
        91,
        0,
        0,
        947,
        979,
        5,
        90,
        0,
        0,
        948,
        979,
        5,
        92,
        0,
        0,
        949,
        979,
        3,
        174,
        87,
        0,
        950,
        955,
        3,
        194,
        97,
        0,
        951,
        955,
        5,
        60,
        0,
        0,
        952,
        955,
        5,
        62,
        0,
        0,
        953,
        955,
        5,
        57,
        0,
        0,
        954,
        950,
        1,
        0,
        0,
        0,
        954,
        951,
        1,
        0,
        0,
        0,
        954,
        952,
        1,
        0,
        0,
        0,
        954,
        953,
        1,
        0,
        0,
        0,
        955,
        956,
        1,
        0,
        0,
        0,
        956,
        979,
        3,
        196,
        98,
        0,
        957,
        979,
        3,
        194,
        97,
        0,
        958,
        959,
        5,
        7,
        0,
        0,
        959,
        960,
        3,
        208,
        104,
        0,
        960,
        961,
        5,
        8,
        0,
        0,
        961,
        979,
        1,
        0,
        0,
        0,
        962,
        963,
        5,
        11,
        0,
        0,
        963,
        968,
        3,
        210,
        105,
        0,
        964,
        965,
        5,
        5,
        0,
        0,
        965,
        967,
        3,
        210,
        105,
        0,
        966,
        964,
        1,
        0,
        0,
        0,
        967,
        970,
        1,
        0,
        0,
        0,
        968,
        966,
        1,
        0,
        0,
        0,
        968,
        969,
        1,
        0,
        0,
        0,
        969,
        971,
        1,
        0,
        0,
        0,
        970,
        968,
        1,
        0,
        0,
        0,
        971,
        972,
        5,
        12,
        0,
        0,
        972,
        979,
        1,
        0,
        0,
        0,
        973,
        974,
        5,
        9,
        0,
        0,
        974,
        975,
        3,
        212,
        106,
        0,
        975,
        976,
        5,
        10,
        0,
        0,
        976,
        979,
        1,
        0,
        0,
        0,
        977,
        979,
        5,
        59,
        0,
        0,
        978,
        946,
        1,
        0,
        0,
        0,
        978,
        947,
        1,
        0,
        0,
        0,
        978,
        948,
        1,
        0,
        0,
        0,
        978,
        949,
        1,
        0,
        0,
        0,
        978,
        954,
        1,
        0,
        0,
        0,
        978,
        957,
        1,
        0,
        0,
        0,
        978,
        958,
        1,
        0,
        0,
        0,
        978,
        962,
        1,
        0,
        0,
        0,
        978,
        973,
        1,
        0,
        0,
        0,
        978,
        977,
        1,
        0,
        0,
        0,
        979,
        189,
        1,
        0,
        0,
        0,
        980,
        982,
        5,
        4,
        0,
        0,
        981,
        980,
        1,
        0,
        0,
        0,
        981,
        982,
        1,
        0,
        0,
        0,
        982,
        983,
        1,
        0,
        0,
        0,
        983,
        988,
        5,
        93,
        0,
        0,
        984,
        985,
        5,
        4,
        0,
        0,
        985,
        987,
        5,
        93,
        0,
        0,
        986,
        984,
        1,
        0,
        0,
        0,
        987,
        990,
        1,
        0,
        0,
        0,
        988,
        986,
        1,
        0,
        0,
        0,
        988,
        989,
        1,
        0,
        0,
        0,
        989,
        191,
        1,
        0,
        0,
        0,
        990,
        988,
        1,
        0,
        0,
        0,
        991,
        996,
        5,
        93,
        0,
        0,
        992,
        993,
        5,
        4,
        0,
        0,
        993,
        995,
        5,
        93,
        0,
        0,
        994,
        992,
        1,
        0,
        0,
        0,
        995,
        998,
        1,
        0,
        0,
        0,
        996,
        994,
        1,
        0,
        0,
        0,
        996,
        997,
        1,
        0,
        0,
        0,
        997,
        193,
        1,
        0,
        0,
        0,
        998,
        996,
        1,
        0,
        0,
        0,
        999,
        1001,
        5,
        4,
        0,
        0,
        1000,
        999,
        1,
        0,
        0,
        0,
        1000,
        1001,
        1,
        0,
        0,
        0,
        1001,
        1002,
        1,
        0,
        0,
        0,
        1002,
        1004,
        5,
        93,
        0,
        0,
        1003,
        1005,
        3,
        214,
        107,
        0,
        1004,
        1003,
        1,
        0,
        0,
        0,
        1004,
        1005,
        1,
        0,
        0,
        0,
        1005,
        1013,
        1,
        0,
        0,
        0,
        1006,
        1007,
        5,
        4,
        0,
        0,
        1007,
        1009,
        5,
        93,
        0,
        0,
        1008,
        1010,
        3,
        214,
        107,
        0,
        1009,
        1008,
        1,
        0,
        0,
        0,
        1009,
        1010,
        1,
        0,
        0,
        0,
        1010,
        1012,
        1,
        0,
        0,
        0,
        1011,
        1006,
        1,
        0,
        0,
        0,
        1012,
        1015,
        1,
        0,
        0,
        0,
        1013,
        1011,
        1,
        0,
        0,
        0,
        1013,
        1014,
        1,
        0,
        0,
        0,
        1014,
        195,
        1,
        0,
        0,
        0,
        1015,
        1013,
        1,
        0,
        0,
        0,
        1016,
        1018,
        5,
        7,
        0,
        0,
        1017,
        1019,
        3,
        198,
        99,
        0,
        1018,
        1017,
        1,
        0,
        0,
        0,
        1018,
        1019,
        1,
        0,
        0,
        0,
        1019,
        1020,
        1,
        0,
        0,
        0,
        1020,
        1021,
        5,
        8,
        0,
        0,
        1021,
        197,
        1,
        0,
        0,
        0,
        1022,
        1023,
        3,
        144,
        72,
        0,
        1023,
        1024,
        5,
        35,
        0,
        0,
        1024,
        1025,
        3,
        126,
        63,
        0,
        1025,
        1040,
        1,
        0,
        0,
        0,
        1026,
        1031,
        3,
        204,
        102,
        0,
        1027,
        1028,
        5,
        3,
        0,
        0,
        1028,
        1030,
        3,
        204,
        102,
        0,
        1029,
        1027,
        1,
        0,
        0,
        0,
        1030,
        1033,
        1,
        0,
        0,
        0,
        1031,
        1029,
        1,
        0,
        0,
        0,
        1031,
        1032,
        1,
        0,
        0,
        0,
        1032,
        1036,
        1,
        0,
        0,
        0,
        1033,
        1031,
        1,
        0,
        0,
        0,
        1034,
        1035,
        5,
        3,
        0,
        0,
        1035,
        1037,
        3,
        200,
        100,
        0,
        1036,
        1034,
        1,
        0,
        0,
        0,
        1036,
        1037,
        1,
        0,
        0,
        0,
        1037,
        1040,
        1,
        0,
        0,
        0,
        1038,
        1040,
        3,
        200,
        100,
        0,
        1039,
        1022,
        1,
        0,
        0,
        0,
        1039,
        1026,
        1,
        0,
        0,
        0,
        1039,
        1038,
        1,
        0,
        0,
        0,
        1040,
        199,
        1,
        0,
        0,
        0,
        1041,
        1046,
        3,
        202,
        101,
        0,
        1042,
        1043,
        5,
        3,
        0,
        0,
        1043,
        1045,
        3,
        202,
        101,
        0,
        1044,
        1042,
        1,
        0,
        0,
        0,
        1045,
        1048,
        1,
        0,
        0,
        0,
        1046,
        1044,
        1,
        0,
        0,
        0,
        1046,
        1047,
        1,
        0,
        0,
        0,
        1047,
        201,
        1,
        0,
        0,
        0,
        1048,
        1046,
        1,
        0,
        0,
        0,
        1049,
        1050,
        5,
        93,
        0,
        0,
        1050,
        1051,
        5,
        13,
        0,
        0,
        1051,
        1052,
        3,
        204,
        102,
        0,
        1052,
        203,
        1,
        0,
        0,
        0,
        1053,
        1056,
        3,
        206,
        103,
        0,
        1054,
        1056,
        3,
        144,
        72,
        0,
        1055,
        1053,
        1,
        0,
        0,
        0,
        1055,
        1054,
        1,
        0,
        0,
        0,
        1056,
        205,
        1,
        0,
        0,
        0,
        1057,
        1058,
        5,
        51,
        0,
        0,
        1058,
        1059,
        3,
        190,
        95,
        0,
        1059,
        1061,
        5,
        7,
        0,
        0,
        1060,
        1062,
        3,
        200,
        100,
        0,
        1061,
        1060,
        1,
        0,
        0,
        0,
        1061,
        1062,
        1,
        0,
        0,
        0,
        1062,
        1063,
        1,
        0,
        0,
        0,
        1063,
        1064,
        5,
        8,
        0,
        0,
        1064,
        207,
        1,
        0,
        0,
        0,
        1065,
        1067,
        3,
        144,
        72,
        0,
        1066,
        1065,
        1,
        0,
        0,
        0,
        1066,
        1067,
        1,
        0,
        0,
        0,
        1067,
        1074,
        1,
        0,
        0,
        0,
        1068,
        1070,
        5,
        3,
        0,
        0,
        1069,
        1071,
        3,
        144,
        72,
        0,
        1070,
        1069,
        1,
        0,
        0,
        0,
        1070,
        1071,
        1,
        0,
        0,
        0,
        1071,
        1073,
        1,
        0,
        0,
        0,
        1072,
        1068,
        1,
        0,
        0,
        0,
        1073,
        1076,
        1,
        0,
        0,
        0,
        1074,
        1072,
        1,
        0,
        0,
        0,
        1074,
        1075,
        1,
        0,
        0,
        0,
        1075,
        209,
        1,
        0,
        0,
        0,
        1076,
        1074,
        1,
        0,
        0,
        0,
        1077,
        1082,
        3,
        144,
        72,
        0,
        1078,
        1079,
        5,
        3,
        0,
        0,
        1079,
        1081,
        3,
        144,
        72,
        0,
        1080,
        1078,
        1,
        0,
        0,
        0,
        1081,
        1084,
        1,
        0,
        0,
        0,
        1082,
        1080,
        1,
        0,
        0,
        0,
        1082,
        1083,
        1,
        0,
        0,
        0,
        1083,
        211,
        1,
        0,
        0,
        0,
        1084,
        1082,
        1,
        0,
        0,
        0,
        1085,
        1095,
        3,
        144,
        72,
        0,
        1086,
        1087,
        5,
        3,
        0,
        0,
        1087,
        1089,
        3,
        144,
        72,
        0,
        1088,
        1086,
        1,
        0,
        0,
        0,
        1089,
        1092,
        1,
        0,
        0,
        0,
        1090,
        1088,
        1,
        0,
        0,
        0,
        1090,
        1091,
        1,
        0,
        0,
        0,
        1091,
        1096,
        1,
        0,
        0,
        0,
        1092,
        1090,
        1,
        0,
        0,
        0,
        1093,
        1094,
        5,
        35,
        0,
        0,
        1094,
        1096,
        3,
        126,
        63,
        0,
        1095,
        1090,
        1,
        0,
        0,
        0,
        1095,
        1093,
        1,
        0,
        0,
        0,
        1096,
        213,
        1,
        0,
        0,
        0,
        1097,
        1098,
        5,
        11,
        0,
        0,
        1098,
        1103,
        3,
        216,
        108,
        0,
        1099,
        1100,
        5,
        3,
        0,
        0,
        1100,
        1102,
        3,
        216,
        108,
        0,
        1101,
        1099,
        1,
        0,
        0,
        0,
        1102,
        1105,
        1,
        0,
        0,
        0,
        1103,
        1101,
        1,
        0,
        0,
        0,
        1103,
        1104,
        1,
        0,
        0,
        0,
        1104,
        1106,
        1,
        0,
        0,
        0,
        1105,
        1103,
        1,
        0,
        0,
        0,
        1106,
        1107,
        5,
        12,
        0,
        0,
        1107,
        215,
        1,
        0,
        0,
        0,
        1108,
        1111,
        5,
        6,
        0,
        0,
        1109,
        1111,
        3,
        144,
        72,
        0,
        1110,
        1108,
        1,
        0,
        0,
        0,
        1110,
        1109,
        1,
        0,
        0,
        0,
        1111,
        217,
        1,
        0,
        0,
        0,
        1112,
        1114,
        3,
        220,
        110,
        0,
        1113,
        1115,
        3,
        224,
        112,
        0,
        1114,
        1113,
        1,
        0,
        0,
        0,
        1114,
        1115,
        1,
        0,
        0,
        0,
        1115,
        219,
        1,
        0,
        0,
        0,
        1116,
        1122,
        5,
        90,
        0,
        0,
        1117,
        1118,
        3,
        222,
        111,
        0,
        1118,
        1119,
        5,
        90,
        0,
        0,
        1119,
        1121,
        1,
        0,
        0,
        0,
        1120,
        1117,
        1,
        0,
        0,
        0,
        1121,
        1124,
        1,
        0,
        0,
        0,
        1122,
        1120,
        1,
        0,
        0,
        0,
        1122,
        1123,
        1,
        0,
        0,
        0,
        1123,
        1126,
        1,
        0,
        0,
        0,
        1124,
        1122,
        1,
        0,
        0,
        0,
        1125,
        1116,
        1,
        0,
        0,
        0,
        1125,
        1126,
        1,
        0,
        0,
        0,
        1126,
        221,
        1,
        0,
        0,
        0,
        1127,
        1128,
        5,
        15,
        0,
        0,
        1128,
        223,
        1,
        0,
        0,
        0,
        1129,
        1130,
        5,
        86,
        0,
        0,
        1130,
        1131,
        3,
        76,
        38,
        0,
        1131,
        225,
        1,
        0,
        0,
        0,
        130,
        228,
        231,
        234,
        241,
        245,
        251,
        256,
        261,
        267,
        270,
        274,
        279,
        289,
        295,
        305,
        308,
        318,
        331,
        338,
        342,
        345,
        354,
        365,
        367,
        371,
        374,
        382,
        385,
        388,
        397,
        404,
        421,
        427,
        440,
        442,
        451,
        455,
        458,
        461,
        464,
        467,
        471,
        476,
        481,
        484,
        489,
        493,
        499,
        504,
        508,
        514,
        519,
        524,
        527,
        530,
        537,
        543,
        549,
        552,
        557,
        563,
        567,
        571,
        580,
        585,
        588,
        591,
        595,
        599,
        605,
        608,
        613,
        618,
        621,
        634,
        640,
        650,
        658,
        672,
        680,
        695,
        706,
        712,
        722,
        732,
        738,
        758,
        780,
        786,
        802,
        815,
        840,
        849,
        872,
        874,
        882,
        893,
        899,
        907,
        917,
        933,
        942,
        954,
        968,
        978,
        981,
        988,
        996,
        1000,
        1004,
        1009,
        1013,
        1018,
        1031,
        1036,
        1039,
        1046,
        1055,
        1061,
        1066,
        1070,
        1074,
        1082,
        1090,
        1095,
        1103,
        1110,
        1114,
        1122,
        1125,
    ]


class Modelica(Parser):
    grammarFileName = "Modelica.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "'\"'",
        "','",
        "'.'",
        "';'",
        "':'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'['",
        "']'",
        "'='",
        "':='",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'^'",
        "'.+'",
        "'.-'",
        "'.*'",
        "'./'",
        "'.^'",
        "'>'",
        "'>='",
        "'<'",
        "'<='",
        "'<>'",
        "'=='",
        "'not'",
        "'and'",
        "'or'",
        "'in'",
        "'for'",
        "'if'",
        "'else'",
        "'elseif'",
        "'then'",
        "'when'",
        "'elsewhen'",
        "'while'",
        "'loop'",
        "'break'",
        "'return'",
        "'partial'",
        "'operator'",
        "'expandable'",
        "'class'",
        "'model'",
        "'function'",
        "'record'",
        "'type'",
        "'block'",
        "'connector'",
        "'package'",
        "'pure'",
        "'impure'",
        "'end'",
        "'der'",
        "'connect'",
        "'initial'",
        "'equation'",
        "'algorithm'",
        "'within'",
        "'final'",
        "'encapsulated'",
        "'extends'",
        "'import'",
        "'enumeration'",
        "'input'",
        "'output'",
        "'public'",
        "'protected'",
        "'redeclare'",
        "'inner'",
        "'outer'",
        "'replaceable'",
        "'constrainedby'",
        "'flow'",
        "'stream'",
        "'discrete'",
        "'parameter'",
        "'constant'",
        "'each'",
        "'annotation'",
        "'external'",
    ]

    symbolicNames = [
        "<INVALID>",
        "WS",
        "DQUOTE",
        "COMMA",
        "DOT",
        "SEMICOLON",
        "COLON",
        "LPAREN",
        "RPAREN",
        "LCURLY",
        "RCURLY",
        "LBRACK",
        "RBRACK",
        "EQUAL",
        "ASSIGN",
        "PLUS",
        "MINUS",
        "STAR",
        "SLASH",
        "FLEX",
        "DOTPLUS",
        "DOTMINUS",
        "DOTSTAR",
        "DOTSLASH",
        "DOTFLEX",
        "GRE",
        "GEQ",
        "LES",
        "LEQ",
        "NEQ",
        "EEQ",
        "NOT",
        "AND",
        "OR",
        "IN",
        "FOR",
        "IF",
        "ELSE",
        "ELSEIF",
        "THEN",
        "WHEN",
        "ELSEWHEN",
        "WHILE",
        "LOOP",
        "BREAK",
        "RETURN",
        "PARTIAL",
        "OPERATOR",
        "EXPANDABLE",
        "CLASS",
        "MODEL",
        "FUNCTION",
        "RECORD",
        "TYPE",
        "BLOCK",
        "CONNECTOR",
        "PACKAGE",
        "PURE",
        "IMPURE",
        "END",
        "DER",
        "CONNECT",
        "INITIAL",
        "EQUATION",
        "ALGORITHM",
        "WITHIN",
        "FINAL",
        "ENCAPSULATED",
        "EXTENDS",
        "IMPORT",
        "ENUMERATION",
        "INPUT",
        "OUTPUT",
        "PUBLIC",
        "PROTECTED",
        "REDECLARE",
        "INNER",
        "OUTER",
        "REPLACEABLE",
        "CONSTRAINEDBY",
        "FLOW",
        "STREAM",
        "DISCRETE",
        "PARAMETER",
        "CONSTANT",
        "EACH",
        "ANNOTATION",
        "EXTERNAL",
        "BLOCK_COMMENT",
        "LINE_COMMENT",
        "STRING",
        "UNUM",
        "BOOL",
        "IDENT",
    ]

    RULE_stored_definition = 0
    RULE_class_definition = 1
    RULE_class_prefixes = 2
    RULE_class_specifier = 3
    RULE_long_class_specifier = 4
    RULE_end_clause = 5
    RULE_short_class_specifier = 6
    RULE_der_class_specifier = 7
    RULE_base_prefix = 8
    RULE_enumerations = 9
    RULE_enum_list = 10
    RULE_enumeration_literal = 11
    RULE_composition = 12
    RULE_class_annotation = 13
    RULE_external_element = 14
    RULE_language_specification = 15
    RULE_external_function_call = 16
    RULE_external_function_args = 17
    RULE_initial_element_list = 18
    RULE_public_element_list = 19
    RULE_protected_element_list = 20
    RULE_element_list = 21
    RULE_element = 22
    RULE_import_clause = 23
    RULE_import_list = 24
    RULE_declaration_clause = 25
    RULE_extends_clause = 26
    RULE_constraining_clause = 27
    RULE_class_or_inheritance_modification = 28
    RULE_argument_or_inheritance_modification_list = 29
    RULE_inheritance_modification = 30
    RULE_component_clause = 31
    RULE_type_prefix = 32
    RULE_component_list = 33
    RULE_component_declaration = 34
    RULE_declaration = 35
    RULE_modification = 36
    RULE_modification_expression = 37
    RULE_class_modification = 38
    RULE_argument_list = 39
    RULE_argument = 40
    RULE_element_modification_or_replaceable = 41
    RULE_element_modification = 42
    RULE_element_redeclaration = 43
    RULE_element_replaceable = 44
    RULE_short_component_clause = 45
    RULE_short_component_declaration = 46
    RULE_short_definition = 47
    RULE_equation_section = 48
    RULE_algorithm_section = 49
    RULE_equation_list = 50
    RULE_statement_list = 51
    RULE_equation = 52
    RULE_statement = 53
    RULE_if_equation = 54
    RULE_conditional_equations = 55
    RULE_if_statement = 56
    RULE_if_branch = 57
    RULE_elseif_branch = 58
    RULE_else_branch = 59
    RULE_conditional_statements = 60
    RULE_for_equation = 61
    RULE_for_statement = 62
    RULE_for_indices = 63
    RULE_for_index = 64
    RULE_while_statement = 65
    RULE_when_equation = 66
    RULE_when_statement = 67
    RULE_when_branch = 68
    RULE_elsewhen_branch = 69
    RULE_connect_equation = 70
    RULE_connected_components = 71
    RULE_expression = 72
    RULE_if_expression = 73
    RULE_if_eval = 74
    RULE_elseif_eval = 75
    RULE_else_eval = 76
    RULE_conditional_expression = 77
    RULE_simple_expression = 78
    RULE_logical_expression = 79
    RULE_or_operator = 80
    RULE_logical_term = 81
    RULE_and_operator = 82
    RULE_logical_factor = 83
    RULE_relation = 84
    RULE_relational_operator = 85
    RULE_arithmetic_expression = 86
    RULE_unary_expression = 87
    RULE_unary_operand = 88
    RULE_add_operator = 89
    RULE_term = 90
    RULE_mul_operator = 91
    RULE_factor = 92
    RULE_exp_operator = 93
    RULE_primary = 94
    RULE_type_specifier = 95
    RULE_name = 96
    RULE_component_reference = 97
    RULE_function_call_args = 98
    RULE_function_arguments = 99
    RULE_named_arguments = 100
    RULE_named_argument = 101
    RULE_function_argument = 102
    RULE_function_partial_application = 103
    RULE_output_expression_list = 104
    RULE_expression_list = 105
    RULE_array_arguments = 106
    RULE_array_subscripts = 107
    RULE_subscript = 108
    RULE_description = 109
    RULE_description_string = 110
    RULE_cat_operator = 111
    RULE_annotation = 112

    ruleNames = [
        "stored_definition",
        "class_definition",
        "class_prefixes",
        "class_specifier",
        "long_class_specifier",
        "end_clause",
        "short_class_specifier",
        "der_class_specifier",
        "base_prefix",
        "enumerations",
        "enum_list",
        "enumeration_literal",
        "composition",
        "class_annotation",
        "external_element",
        "language_specification",
        "external_function_call",
        "external_function_args",
        "initial_element_list",
        "public_element_list",
        "protected_element_list",
        "element_list",
        "element",
        "import_clause",
        "import_list",
        "declaration_clause",
        "extends_clause",
        "constraining_clause",
        "class_or_inheritance_modification",
        "argument_or_inheritance_modification_list",
        "inheritance_modification",
        "component_clause",
        "type_prefix",
        "component_list",
        "component_declaration",
        "declaration",
        "modification",
        "modification_expression",
        "class_modification",
        "argument_list",
        "argument",
        "element_modification_or_replaceable",
        "element_modification",
        "element_redeclaration",
        "element_replaceable",
        "short_component_clause",
        "short_component_declaration",
        "short_definition",
        "equation_section",
        "algorithm_section",
        "equation_list",
        "statement_list",
        "equation",
        "statement",
        "if_equation",
        "conditional_equations",
        "if_statement",
        "if_branch",
        "elseif_branch",
        "else_branch",
        "conditional_statements",
        "for_equation",
        "for_statement",
        "for_indices",
        "for_index",
        "while_statement",
        "when_equation",
        "when_statement",
        "when_branch",
        "elsewhen_branch",
        "connect_equation",
        "connected_components",
        "expression",
        "if_expression",
        "if_eval",
        "elseif_eval",
        "else_eval",
        "conditional_expression",
        "simple_expression",
        "logical_expression",
        "or_operator",
        "logical_term",
        "and_operator",
        "logical_factor",
        "relation",
        "relational_operator",
        "arithmetic_expression",
        "unary_expression",
        "unary_operand",
        "add_operator",
        "term",
        "mul_operator",
        "factor",
        "exp_operator",
        "primary",
        "type_specifier",
        "name",
        "component_reference",
        "function_call_args",
        "function_arguments",
        "named_arguments",
        "named_argument",
        "function_argument",
        "function_partial_application",
        "output_expression_list",
        "expression_list",
        "array_arguments",
        "array_subscripts",
        "subscript",
        "description",
        "description_string",
        "cat_operator",
        "annotation",
    ]

    EOF = Token.EOF
    WS = 1
    DQUOTE = 2
    COMMA = 3
    DOT = 4
    SEMICOLON = 5
    COLON = 6
    LPAREN = 7
    RPAREN = 8
    LCURLY = 9
    RCURLY = 10
    LBRACK = 11
    RBRACK = 12
    EQUAL = 13
    ASSIGN = 14
    PLUS = 15
    MINUS = 16
    STAR = 17
    SLASH = 18
    FLEX = 19
    DOTPLUS = 20
    DOTMINUS = 21
    DOTSTAR = 22
    DOTSLASH = 23
    DOTFLEX = 24
    GRE = 25
    GEQ = 26
    LES = 27
    LEQ = 28
    NEQ = 29
    EEQ = 30
    NOT = 31
    AND = 32
    OR = 33
    IN = 34
    FOR = 35
    IF = 36
    ELSE = 37
    ELSEIF = 38
    THEN = 39
    WHEN = 40
    ELSEWHEN = 41
    WHILE = 42
    LOOP = 43
    BREAK = 44
    RETURN = 45
    PARTIAL = 46
    OPERATOR = 47
    EXPANDABLE = 48
    CLASS = 49
    MODEL = 50
    FUNCTION = 51
    RECORD = 52
    TYPE = 53
    BLOCK = 54
    CONNECTOR = 55
    PACKAGE = 56
    PURE = 57
    IMPURE = 58
    END = 59
    DER = 60
    CONNECT = 61
    INITIAL = 62
    EQUATION = 63
    ALGORITHM = 64
    WITHIN = 65
    FINAL = 66
    ENCAPSULATED = 67
    EXTENDS = 68
    IMPORT = 69
    ENUMERATION = 70
    INPUT = 71
    OUTPUT = 72
    PUBLIC = 73
    PROTECTED = 74
    REDECLARE = 75
    INNER = 76
    OUTER = 77
    REPLACEABLE = 78
    CONSTRAINEDBY = 79
    FLOW = 80
    STREAM = 81
    DISCRETE = 82
    PARAMETER = 83
    CONSTANT = 84
    EACH = 85
    ANNOTATION = 86
    EXTERNAL = 87
    BLOCK_COMMENT = 88
    LINE_COMMENT = 89
    STRING = 90
    UNUM = 91
    BOOL = 92
    IDENT = 93

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class Stored_definitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(Modelica.WITHIN, 0)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def class_definition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Class_definitionContext)
            else:
                return self.getTypedRuleContext(Modelica.Class_definitionContext, i)

        def name(self):
            return self.getTypedRuleContext(Modelica.NameContext, 0)

        def FINAL(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.FINAL)
            else:
                return self.getToken(Modelica.FINAL, i)

        def getRuleIndex(self):
            return Modelica.RULE_stored_definition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStored_definition"):
                listener.enterStored_definition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStored_definition"):
                listener.exitStored_definition(self)

    def stored_definition(self):
        localctx = Modelica.Stored_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stored_definition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 65:
                self.state = 226
                self.match(Modelica.WITHIN)
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 93:
                    self.state = 227
                    self.name()

                self.state = 230
                self.match(Modelica.SEMICOLON)

            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 46)) & ~0x3F) == 0 and ((1 << (_la - 46)) & 3153919) != 0:
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 66:
                    self.state = 233
                    self.match(Modelica.FINAL)

                self.state = 236
                self.class_definition()
                self.state = 237
                self.match(Modelica.SEMICOLON)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_definitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(Modelica.Class_prefixesContext, 0)

        def class_specifier(self):
            return self.getTypedRuleContext(Modelica.Class_specifierContext, 0)

        def ENCAPSULATED(self):
            return self.getToken(Modelica.ENCAPSULATED, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_definition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_definition"):
                listener.enterClass_definition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_definition"):
                listener.exitClass_definition(self)

    def class_definition(self):
        localctx = Modelica.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_class_definition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 67:
                self.state = 244
                self.match(Modelica.ENCAPSULATED)

            self.state = 247
            self.class_prefixes()
            self.state = 248
            self.class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_prefixesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Modelica.CLASS, 0)

        def MODEL(self):
            return self.getToken(Modelica.MODEL, 0)

        def RECORD(self):
            return self.getToken(Modelica.RECORD, 0)

        def BLOCK(self):
            return self.getToken(Modelica.BLOCK, 0)

        def CONNECTOR(self):
            return self.getToken(Modelica.CONNECTOR, 0)

        def TYPE(self):
            return self.getToken(Modelica.TYPE, 0)

        def PACKAGE(self):
            return self.getToken(Modelica.PACKAGE, 0)

        def FUNCTION(self):
            return self.getToken(Modelica.FUNCTION, 0)

        def OPERATOR(self):
            return self.getToken(Modelica.OPERATOR, 0)

        def PARTIAL(self):
            return self.getToken(Modelica.PARTIAL, 0)

        def EXPANDABLE(self):
            return self.getToken(Modelica.EXPANDABLE, 0)

        def PURE(self):
            return self.getToken(Modelica.PURE, 0)

        def IMPURE(self):
            return self.getToken(Modelica.IMPURE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_prefixes

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_prefixes"):
                listener.enterClass_prefixes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_prefixes"):
                listener.exitClass_prefixes(self)

    def class_prefixes(self):
        localctx = Modelica.Class_prefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_class_prefixes)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 46:
                self.state = 250
                self.match(Modelica.PARTIAL)

            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.state = 253
                self.match(Modelica.CLASS)
                pass

            elif la_ == 2:
                self.state = 254
                self.match(Modelica.MODEL)
                pass

            elif la_ == 3:
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 47:
                    self.state = 255
                    self.match(Modelica.OPERATOR)

                self.state = 258
                self.match(Modelica.RECORD)
                pass

            elif la_ == 4:
                self.state = 259
                self.match(Modelica.BLOCK)
                pass

            elif la_ == 5:
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 48:
                    self.state = 260
                    self.match(Modelica.EXPANDABLE)

                self.state = 263
                self.match(Modelica.CONNECTOR)
                pass

            elif la_ == 6:
                self.state = 264
                self.match(Modelica.TYPE)
                pass

            elif la_ == 7:
                self.state = 265
                self.match(Modelica.PACKAGE)
                pass

            elif la_ == 8:
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 57 or _la == 58:
                    self.state = 266
                    _la = self._input.LA(1)
                    if not (_la == 57 or _la == 58):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 47:
                    self.state = 269
                    self.match(Modelica.OPERATOR)

                self.state = 272
                self.match(Modelica.FUNCTION)
                pass

            elif la_ == 9:
                self.state = 273
                self.match(Modelica.OPERATOR)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_specifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def long_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Long_class_specifierContext, 0)

        def short_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Short_class_specifierContext, 0)

        def der_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Der_class_specifierContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_specifier"):
                listener.enterClass_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_specifier"):
                listener.exitClass_specifier(self)

    def class_specifier(self):
        localctx = Modelica.Class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_class_specifier)
        try:
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.long_class_specifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.short_class_specifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self.der_class_specifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Long_class_specifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def description_string(self):
            return self.getTypedRuleContext(Modelica.Description_stringContext, 0)

        def composition(self):
            return self.getTypedRuleContext(Modelica.CompositionContext, 0)

        def end_clause(self):
            return self.getTypedRuleContext(Modelica.End_clauseContext, 0)

        def EXTENDS(self):
            return self.getToken(Modelica.EXTENDS, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_long_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLong_class_specifier"):
                listener.enterLong_class_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLong_class_specifier"):
                listener.exitLong_class_specifier(self)

    def long_class_specifier(self):
        localctx = Modelica.Long_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_long_class_specifier)
        self._la = 0  # Token type
        try:
            self.state = 295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(Modelica.IDENT)
                self.state = 282
                self.description_string()
                self.state = 283
                self.composition()
                self.state = 284
                self.end_clause()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.match(Modelica.EXTENDS)
                self.state = 287
                self.match(Modelica.IDENT)
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 7:
                    self.state = 288
                    self.class_modification()

                self.state = 291
                self.description_string()
                self.state = 292
                self.composition()
                self.state = 293
                self.end_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class End_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(Modelica.END, 0)

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_end_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnd_clause"):
                listener.enterEnd_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnd_clause"):
                listener.exitEnd_clause(self)

    def end_clause(self):
        localctx = Modelica.End_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_end_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(Modelica.END)
            self.state = 298
            self.match(Modelica.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_class_specifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def base_prefix(self):
            return self.getTypedRuleContext(Modelica.Base_prefixContext, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(Modelica.Array_subscriptsContext, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext, 0)

        def ENUMERATION(self):
            return self.getToken(Modelica.ENUMERATION, 0)

        def enumerations(self):
            return self.getTypedRuleContext(Modelica.EnumerationsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_short_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShort_class_specifier"):
                listener.enterShort_class_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShort_class_specifier"):
                listener.exitShort_class_specifier(self)

    def short_class_specifier(self):
        localctx = Modelica.Short_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_short_class_specifier)
        self._la = 0  # Token type
        try:
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.match(Modelica.IDENT)
                self.state = 301
                self.match(Modelica.EQUAL)
                self.state = 302
                self.base_prefix()
                self.state = 303
                self.type_specifier()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 11:
                    self.state = 304
                    self.array_subscripts()

                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 7:
                    self.state = 307
                    self.class_modification()

                self.state = 310
                self.description()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.match(Modelica.IDENT)
                self.state = 313
                self.match(Modelica.EQUAL)
                self.state = 314
                self.match(Modelica.ENUMERATION)
                self.state = 315
                self.enumerations()
                self.state = 316
                self.description()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Der_class_specifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def DER(self):
            return self.getToken(Modelica.DER, 0)

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_der_class_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDer_class_specifier"):
                listener.enterDer_class_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDer_class_specifier"):
                listener.exitDer_class_specifier(self)

    def der_class_specifier(self):
        localctx = Modelica.Der_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_der_class_specifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(Modelica.IDENT)
            self.state = 321
            self.match(Modelica.EQUAL)
            self.state = 322
            self.match(Modelica.DER)
            self.state = 323
            self.match(Modelica.LPAREN)
            self.state = 324
            self.type_specifier()
            self.state = 325
            self.match(Modelica.COMMA)
            self.state = 326
            self.match(Modelica.IDENT)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 327
                self.match(Modelica.COMMA)
                self.state = 328
                self.match(Modelica.IDENT)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(Modelica.RPAREN)
            self.state = 335
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_prefixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(Modelica.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(Modelica.OUTPUT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_base_prefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBase_prefix"):
                listener.enterBase_prefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBase_prefix"):
                listener.exitBase_prefix(self)

    def base_prefix(self):
        localctx = Modelica.Base_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_base_prefix)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 71 or _la == 72:
                self.state = 337
                _la = self._input.LA(1)
                if not (_la == 71 or _la == 72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def COLON(self):
            return self.getToken(Modelica.COLON, 0)

        def enum_list(self):
            return self.getTypedRuleContext(Modelica.Enum_listContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_enumerations

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumerations"):
                listener.enterEnumerations(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumerations"):
                listener.exitEnumerations(self)

    def enumerations(self):
        localctx = Modelica.EnumerationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enumerations)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(Modelica.LPAREN)
            self.state = 345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 93]:
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 93:
                    self.state = 341
                    self.enum_list()

                pass
            elif token in [6]:
                self.state = 344
                self.match(Modelica.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 347
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_literal(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Enumeration_literalContext)
            else:
                return self.getTypedRuleContext(Modelica.Enumeration_literalContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_enum_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnum_list"):
                listener.enterEnum_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnum_list"):
                listener.exitEnum_list(self)

    def enum_list(self):
        localctx = Modelica.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enum_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.enumeration_literal()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 350
                self.match(Modelica.COMMA)
                self.state = 351
                self.enumeration_literal()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enumeration_literalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_enumeration_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeration_literal"):
                listener.enterEnumeration_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeration_literal"):
                listener.exitEnumeration_literal(self)

    def enumeration_literal(self):
        localctx = Modelica.Enumeration_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumeration_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(Modelica.IDENT)
            self.state = 358
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initial_element_list(self):
            return self.getTypedRuleContext(Modelica.Initial_element_listContext, 0)

        def public_element_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Public_element_listContext)
            else:
                return self.getTypedRuleContext(Modelica.Public_element_listContext, i)

        def protected_element_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Protected_element_listContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Protected_element_listContext, i
                )

        def equation_section(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Equation_sectionContext)
            else:
                return self.getTypedRuleContext(Modelica.Equation_sectionContext, i)

        def algorithm_section(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Algorithm_sectionContext)
            else:
                return self.getTypedRuleContext(Modelica.Algorithm_sectionContext, i)

        def external_element(self):
            return self.getTypedRuleContext(Modelica.External_elementContext, 0)

        def class_annotation(self):
            return self.getTypedRuleContext(Modelica.Class_annotationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_composition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComposition"):
                listener.enterComposition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComposition"):
                listener.exitComposition(self)

    def composition(self):
        localctx = Modelica.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_composition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.initial_element_list()
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 62)) & ~0x3F) == 0 and ((1 << (_la - 62)) & 6151) != 0:
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
                if la_ == 1:
                    self.state = 361
                    self.public_element_list()
                    pass

                elif la_ == 2:
                    self.state = 362
                    self.protected_element_list()
                    pass

                elif la_ == 3:
                    self.state = 363
                    self.equation_section()
                    pass

                elif la_ == 4:
                    self.state = 364
                    self.algorithm_section()
                    pass

                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 87:
                self.state = 370
                self.external_element()

            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 373
                self.class_annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_annotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION(self):
            return self.getToken(Modelica.ANNOTATION, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext, 0)

        def SEMICOLON(self):
            return self.getToken(Modelica.SEMICOLON, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_annotation"):
                listener.enterClass_annotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_annotation"):
                listener.exitClass_annotation(self)

    def class_annotation(self):
        localctx = Modelica.Class_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_class_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(Modelica.ANNOTATION)
            self.state = 377
            self.class_modification()
            self.state = 378
            self.match(Modelica.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_elementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(Modelica.EXTERNAL, 0)

        def SEMICOLON(self):
            return self.getToken(Modelica.SEMICOLON, 0)

        def language_specification(self):
            return self.getTypedRuleContext(Modelica.Language_specificationContext, 0)

        def external_function_call(self):
            return self.getTypedRuleContext(Modelica.External_function_callContext, 0)

        def annotation(self):
            return self.getTypedRuleContext(Modelica.AnnotationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_external_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExternal_element"):
                listener.enterExternal_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExternal_element"):
                listener.exitExternal_element(self)

    def external_element(self):
        localctx = Modelica.External_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_external_element)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(Modelica.EXTERNAL)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 90:
                self.state = 381
                self.language_specification()

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 4 or _la == 93:
                self.state = 384
                self.external_function_call()

            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 387
                self.annotation()

            self.state = 390
            self.match(Modelica.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Language_specificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(Modelica.STRING, 0)

        def getRuleIndex(self):
            return Modelica.RULE_language_specification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLanguage_specification"):
                listener.enterLanguage_specification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLanguage_specification"):
                listener.exitLanguage_specification(self)

    def language_specification(self):
        localctx = Modelica.Language_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_language_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(Modelica.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_function_callContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def external_function_args(self):
            return self.getTypedRuleContext(Modelica.External_function_argsContext, 0)

        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_external_function_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExternal_function_call"):
                listener.enterExternal_function_call(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExternal_function_call"):
                listener.exitExternal_function_call(self)

    def external_function_call(self):
        localctx = Modelica.External_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_external_function_call)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.state = 394
                self.component_reference()
                self.state = 395
                self.match(Modelica.EQUAL)

            self.state = 399
            self.match(Modelica.IDENT)
            self.state = 400
            self.external_function_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_function_argsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(Modelica.Expression_listContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_external_function_args

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExternal_function_args"):
                listener.enterExternal_function_args(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExternal_function_args"):
                listener.exitExternal_function_args(self)

    def external_function_args(self):
        localctx = Modelica.External_function_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_external_function_args)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(Modelica.LPAREN)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 6485183534283721360) != 0) or (
                (((_la - 90)) & ~0x3F) == 0 and ((1 << (_la - 90)) & 15) != 0
            ):
                self.state = 403
                self.expression_list()

            self.state = 406
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Initial_element_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_list(self):
            return self.getTypedRuleContext(Modelica.Element_listContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_initial_element_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitial_element_list"):
                listener.enterInitial_element_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitial_element_list"):
                listener.exitInitial_element_list(self)

    def initial_element_list(self):
        localctx = Modelica.Initial_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_initial_element_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.element_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Public_element_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(Modelica.PUBLIC, 0)

        def element_list(self):
            return self.getTypedRuleContext(Modelica.Element_listContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_public_element_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPublic_element_list"):
                listener.enterPublic_element_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPublic_element_list"):
                listener.exitPublic_element_list(self)

    def public_element_list(self):
        localctx = Modelica.Public_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_public_element_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(Modelica.PUBLIC)
            self.state = 411
            self.element_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Protected_element_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(Modelica.PROTECTED, 0)

        def element_list(self):
            return self.getTypedRuleContext(Modelica.Element_listContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_protected_element_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProtected_element_list"):
                listener.enterProtected_element_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProtected_element_list"):
                listener.exitProtected_element_list(self)

    def protected_element_list(self):
        localctx = Modelica.Protected_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_protected_element_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(Modelica.PROTECTED)
            self.state = 414
            self.element_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ElementContext)
            else:
                return self.getTypedRuleContext(Modelica.ElementContext, i)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_element_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_list"):
                listener.enterElement_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_list"):
                listener.exitElement_list(self)

    def element_list(self):
        localctx = Modelica.Element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_element_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3F) == 0 and ((1 << _la) & 576390383559245840) != 0) or (
                (((_la - 66)) & ~0x3F) == 0 and ((1 << (_la - 66)) & 134733423) != 0
            ):
                self.state = 416
                self.element()
                self.state = 417
                self.match(Modelica.SEMICOLON)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_clause(self):
            return self.getTypedRuleContext(Modelica.Import_clauseContext, 0)

        def extends_clause(self):
            return self.getTypedRuleContext(Modelica.Extends_clauseContext, 0)

        def declaration_clause(self):
            return self.getTypedRuleContext(Modelica.Declaration_clauseContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):
        localctx = Modelica.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_element)
        try:
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.import_clause()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.extends_clause()
                pass
            elif token in [
                4,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                66,
                67,
                71,
                72,
                75,
                76,
                77,
                78,
                80,
                81,
                82,
                83,
                84,
                93,
            ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.declaration_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Modelica.IMPORT, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def name(self):
            return self.getTypedRuleContext(Modelica.NameContext, 0)

        def DOTSTAR(self):
            return self.getToken(Modelica.DOTSTAR, 0)

        def DOT(self):
            return self.getToken(Modelica.DOT, 0)

        def LCURLY(self):
            return self.getToken(Modelica.LCURLY, 0)

        def import_list(self):
            return self.getTypedRuleContext(Modelica.Import_listContext, 0)

        def RCURLY(self):
            return self.getToken(Modelica.RCURLY, 0)

        def getRuleIndex(self):
            return Modelica.RULE_import_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_clause"):
                listener.enterImport_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_clause"):
                listener.exitImport_clause(self)

    def import_clause(self):
        localctx = Modelica.Import_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_import_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(Modelica.IMPORT)
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
            if la_ == 1:
                self.state = 430
                self.match(Modelica.IDENT)
                self.state = 431
                self.match(Modelica.EQUAL)
                self.state = 432
                self.name()
                pass

            elif la_ == 2:
                self.state = 433
                self.name()
                self.state = 440
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 434
                    self.match(Modelica.DOTSTAR)
                    pass
                elif token in [4]:
                    self.state = 435
                    self.match(Modelica.DOT)
                    self.state = 436
                    self.match(Modelica.LCURLY)
                    self.state = 437
                    self.import_list()
                    self.state = 438
                    self.match(Modelica.RCURLY)
                    pass
                elif token in [5, 86, 90]:
                    pass
                else:
                    pass
                pass

            self.state = 444
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_import_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_list"):
                listener.enterImport_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_list"):
                listener.exitImport_list(self)

    def import_list(self):
        localctx = Modelica.Import_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_import_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(Modelica.IDENT)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 447
                self.match(Modelica.COMMA)
                self.state = 448
                self.match(Modelica.IDENT)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(Modelica.Class_definitionContext, 0)

        def component_clause(self):
            return self.getTypedRuleContext(Modelica.Component_clauseContext, 0)

        def REDECLARE(self):
            return self.getToken(Modelica.REDECLARE, 0)

        def FINAL(self):
            return self.getToken(Modelica.FINAL, 0)

        def INNER(self):
            return self.getToken(Modelica.INNER, 0)

        def OUTER(self):
            return self.getToken(Modelica.OUTER, 0)

        def REPLACEABLE(self):
            return self.getToken(Modelica.REPLACEABLE, 0)

        def constraining_clause(self):
            return self.getTypedRuleContext(Modelica.Constraining_clauseContext, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_declaration_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration_clause"):
                listener.enterDeclaration_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration_clause"):
                listener.exitDeclaration_clause(self)

    def declaration_clause(self):
        localctx = Modelica.Declaration_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 75:
                self.state = 454
                self.match(Modelica.REDECLARE)

            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 66:
                self.state = 457
                self.match(Modelica.FINAL)

            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 76:
                self.state = 460
                self.match(Modelica.INNER)

            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 77:
                self.state = 463
                self.match(Modelica.OUTER)

            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 78:
                self.state = 466
                self.match(Modelica.REPLACEABLE)

            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67]:
                self.state = 469
                self.class_definition()
                pass
            elif token in [4, 71, 72, 80, 81, 82, 83, 84, 93]:
                self.state = 470
                self.component_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 79:
                self.state = 473
                self.constraining_clause()
                self.state = 474
                self.description()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extends_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Modelica.EXTENDS, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def class_or_inheritance_modification(self):
            return self.getTypedRuleContext(
                Modelica.Class_or_inheritance_modificationContext, 0
            )

        def annotation(self):
            return self.getTypedRuleContext(Modelica.AnnotationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_extends_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExtends_clause"):
                listener.enterExtends_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExtends_clause"):
                listener.exitExtends_clause(self)

    def extends_clause(self):
        localctx = Modelica.Extends_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_extends_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(Modelica.EXTENDS)
            self.state = 479
            self.type_specifier()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 7:
                self.state = 480
                self.class_or_inheritance_modification()

            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 483
                self.annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraining_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINEDBY(self):
            return self.getToken(Modelica.CONSTRAINEDBY, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_constraining_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraining_clause"):
                listener.enterConstraining_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraining_clause"):
                listener.exitConstraining_clause(self)

    def constraining_clause(self):
        localctx = Modelica.Constraining_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constraining_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(Modelica.CONSTRAINEDBY)
            self.state = 487
            self.type_specifier()
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 7:
                self.state = 488
                self.class_modification()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_or_inheritance_modificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def argument_or_inheritance_modification_list(self):
            return self.getTypedRuleContext(
                Modelica.Argument_or_inheritance_modification_listContext, 0
            )

        def getRuleIndex(self):
            return Modelica.RULE_class_or_inheritance_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_or_inheritance_modification"):
                listener.enterClass_or_inheritance_modification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_or_inheritance_modification"):
                listener.exitClass_or_inheritance_modification(self)

    def class_or_inheritance_modification(self):
        localctx = Modelica.Class_or_inheritance_modificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 56, self.RULE_class_or_inheritance_modification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(Modelica.LPAREN)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 44)) & ~0x3F) == 0 and (
                (1 << (_la - 44)) & 565168308224001
            ) != 0:
                self.state = 492
                self.argument_or_inheritance_modification_list()

            self.state = 495
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_or_inheritance_modification_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ArgumentContext)
            else:
                return self.getTypedRuleContext(Modelica.ArgumentContext, i)

        def inheritance_modification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Modelica.Inheritance_modificationContext
                )
            else:
                return self.getTypedRuleContext(
                    Modelica.Inheritance_modificationContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_argument_or_inheritance_modification_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument_or_inheritance_modification_list"):
                listener.enterArgument_or_inheritance_modification_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument_or_inheritance_modification_list"):
                listener.exitArgument_or_inheritance_modification_list(self)

    def argument_or_inheritance_modification_list(self):
        localctx = Modelica.Argument_or_inheritance_modification_listContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 58, self.RULE_argument_or_inheritance_modification_list
        )
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 75, 78, 85, 93]:
                self.state = 497
                self.argument()
                pass
            elif token in [44]:
                self.state = 498
                self.inheritance_modification()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 501
                self.match(Modelica.COMMA)
                self.state = 504
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [66, 75, 78, 85, 93]:
                    self.state = 502
                    self.argument()
                    pass
                elif token in [44]:
                    self.state = 503
                    self.inheritance_modification()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inheritance_modificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Modelica.BREAK, 0)

        def connect_equation(self):
            return self.getTypedRuleContext(Modelica.Connect_equationContext, 0)

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_inheritance_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInheritance_modification"):
                listener.enterInheritance_modification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInheritance_modification"):
                listener.exitInheritance_modification(self)

    def inheritance_modification(self):
        localctx = Modelica.Inheritance_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_inheritance_modification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(Modelica.BREAK)
            self.state = 514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 512
                self.connect_equation()
                pass
            elif token in [93]:
                self.state = 513
                self.match(Modelica.IDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(Modelica.Type_prefixContext, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def component_list(self):
            return self.getTypedRuleContext(Modelica.Component_listContext, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(Modelica.Array_subscriptsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_component_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_clause"):
                listener.enterComponent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_clause"):
                listener.exitComponent_clause(self)

    def component_clause(self):
        localctx = Modelica.Component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_component_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.type_prefix()
            self.state = 517
            self.type_specifier()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 11:
                self.state = 518
                self.array_subscripts()

            self.state = 521
            self.component_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_prefixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOW(self):
            return self.getToken(Modelica.FLOW, 0)

        def STREAM(self):
            return self.getToken(Modelica.STREAM, 0)

        def DISCRETE(self):
            return self.getToken(Modelica.DISCRETE, 0)

        def PARAMETER(self):
            return self.getToken(Modelica.PARAMETER, 0)

        def CONSTANT(self):
            return self.getToken(Modelica.CONSTANT, 0)

        def INPUT(self):
            return self.getToken(Modelica.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(Modelica.OUTPUT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_type_prefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_prefix"):
                listener.enterType_prefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_prefix"):
                listener.exitType_prefix(self)

    def type_prefix(self):
        localctx = Modelica.Type_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_type_prefix)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 80 or _la == 81:
                self.state = 523
                _la = self._input.LA(1)
                if not (_la == 80 or _la == 81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 82)) & ~0x3F) == 0 and ((1 << (_la - 82)) & 7) != 0:
                self.state = 526
                _la = self._input.LA(1)
                if not (((((_la - 82)) & ~0x3F) == 0 and ((1 << (_la - 82)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 71 or _la == 72:
                self.state = 529
                _la = self._input.LA(1)
                if not (_la == 71 or _la == 72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Component_declarationContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Component_declarationContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_component_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_list"):
                listener.enterComponent_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_list"):
                listener.exitComponent_list(self)

    def component_list(self):
        localctx = Modelica.Component_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_component_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.component_declaration()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 533
                self.match(Modelica.COMMA)
                self.state = 534
                self.component_declaration()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_declarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Modelica.DeclarationContext, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_component_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_declaration"):
                listener.enterComponent_declaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_declaration"):
                listener.exitComponent_declaration(self)

    def component_declaration(self):
        localctx = Modelica.Component_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_component_declaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.declaration()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 36:
                self.state = 541
                self.match(Modelica.IF)
                self.state = 542
                self.expression()

            self.state = 545
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(Modelica.Array_subscriptsContext, 0)

        def modification(self):
            return self.getTypedRuleContext(Modelica.ModificationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):
        localctx = Modelica.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(Modelica.IDENT)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 11:
                self.state = 548
                self.array_subscripts()

            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 24704) != 0:
                self.state = 551
                self.modification()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def modification_expression(self):
            return self.getTypedRuleContext(Modelica.Modification_expressionContext, 0)

        def ASSIGN(self):
            return self.getToken(Modelica.ASSIGN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModification"):
                listener.enterModification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModification"):
                listener.exitModification(self)

    def modification(self):
        localctx = Modelica.ModificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_modification)
        self._la = 0  # Token type
        try:
            self.state = 563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.class_modification()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 13:
                    self.state = 555
                    self.match(Modelica.EQUAL)
                    self.state = 556
                    self.modification_expression()

                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.match(Modelica.EQUAL)
                self.state = 560
                self.modification_expression()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 561
                self.match(Modelica.ASSIGN)
                self.state = 562
                self.modification_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modification_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def BREAK(self):
            return self.getToken(Modelica.BREAK, 0)

        def getRuleIndex(self):
            return Modelica.RULE_modification_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModification_expression"):
                listener.enterModification_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModification_expression"):
                listener.exitModification_expression(self)

    def modification_expression(self):
        localctx = Modelica.Modification_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_modification_expression)
        try:
            self.state = 567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                4,
                7,
                9,
                11,
                15,
                16,
                20,
                21,
                31,
                36,
                57,
                59,
                60,
                62,
                90,
                91,
                92,
                93,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.expression()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.match(Modelica.BREAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def argument_list(self):
            return self.getTypedRuleContext(Modelica.Argument_listContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClass_modification"):
                listener.enterClass_modification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClass_modification"):
                listener.exitClass_modification(self)

    def class_modification(self):
        localctx = Modelica.Class_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_class_modification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(Modelica.LPAREN)
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 66)) & ~0x3F) == 0 and ((1 << (_la - 66)) & 134746625) != 0:
                self.state = 570
                self.argument_list()

            self.state = 573
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ArgumentContext)
            else:
                return self.getTypedRuleContext(Modelica.ArgumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_argument_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument_list"):
                listener.enterArgument_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument_list"):
                listener.exitArgument_list(self)

    def argument_list(self):
        localctx = Modelica.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_argument_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.argument()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 576
                self.match(Modelica.COMMA)
                self.state = 577
                self.argument()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification_or_replaceable(self):
            return self.getTypedRuleContext(
                Modelica.Element_modification_or_replaceableContext, 0
            )

        def element_redeclaration(self):
            return self.getTypedRuleContext(Modelica.Element_redeclarationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

    def argument(self):
        localctx = Modelica.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_argument)
        try:
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 78, 85, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.element_modification_or_replaceable()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.element_redeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_modification_or_replaceableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification(self):
            return self.getTypedRuleContext(Modelica.Element_modificationContext, 0)

        def element_replaceable(self):
            return self.getTypedRuleContext(Modelica.Element_replaceableContext, 0)

        def EACH(self):
            return self.getToken(Modelica.EACH, 0)

        def FINAL(self):
            return self.getToken(Modelica.FINAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element_modification_or_replaceable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_modification_or_replaceable"):
                listener.enterElement_modification_or_replaceable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_modification_or_replaceable"):
                listener.exitElement_modification_or_replaceable(self)

    def element_modification_or_replaceable(self):
        localctx = Modelica.Element_modification_or_replaceableContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 82, self.RULE_element_modification_or_replaceable)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 587
                self.match(Modelica.EACH)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 66:
                self.state = 590
                self.match(Modelica.FINAL)

            self.state = 595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.state = 593
                self.element_modification()
                pass
            elif token in [78]:
                self.state = 594
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_modificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Modelica.NameContext, 0)

        def description_string(self):
            return self.getTypedRuleContext(Modelica.Description_stringContext, 0)

        def modification(self):
            return self.getTypedRuleContext(Modelica.ModificationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element_modification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_modification"):
                listener.enterElement_modification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_modification"):
                listener.exitElement_modification(self)

    def element_modification(self):
        localctx = Modelica.Element_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_element_modification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.name()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 24704) != 0:
                self.state = 598
                self.modification()

            self.state = 601
            self.description_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_redeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDECLARE(self):
            return self.getToken(Modelica.REDECLARE, 0)

        def short_definition(self):
            return self.getTypedRuleContext(Modelica.Short_definitionContext, 0)

        def short_component_clause(self):
            return self.getTypedRuleContext(Modelica.Short_component_clauseContext, 0)

        def element_replaceable(self):
            return self.getTypedRuleContext(Modelica.Element_replaceableContext, 0)

        def EACH(self):
            return self.getToken(Modelica.EACH, 0)

        def FINAL(self):
            return self.getToken(Modelica.FINAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element_redeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_redeclaration"):
                listener.enterElement_redeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_redeclaration"):
                listener.exitElement_redeclaration(self)

    def element_redeclaration(self):
        localctx = Modelica.Element_redeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_element_redeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(Modelica.REDECLARE)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 85:
                self.state = 604
                self.match(Modelica.EACH)

            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 66:
                self.state = 607
                self.match(Modelica.FINAL)

            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.state = 610
                self.short_definition()
                pass
            elif token in [4, 71, 72, 80, 81, 82, 83, 84, 93]:
                self.state = 611
                self.short_component_clause()
                pass
            elif token in [78]:
                self.state = 612
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_replaceableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACEABLE(self):
            return self.getToken(Modelica.REPLACEABLE, 0)

        def short_definition(self):
            return self.getTypedRuleContext(Modelica.Short_definitionContext, 0)

        def short_component_clause(self):
            return self.getTypedRuleContext(Modelica.Short_component_clauseContext, 0)

        def constraining_clause(self):
            return self.getTypedRuleContext(Modelica.Constraining_clauseContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element_replaceable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_replaceable"):
                listener.enterElement_replaceable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_replaceable"):
                listener.exitElement_replaceable(self)

    def element_replaceable(self):
        localctx = Modelica.Element_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_element_replaceable)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(Modelica.REPLACEABLE)
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.state = 616
                self.short_definition()
                pass
            elif token in [4, 71, 72, 80, 81, 82, 83, 84, 93]:
                self.state = 617
                self.short_component_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 79:
                self.state = 620
                self.constraining_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_component_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(Modelica.Type_prefixContext, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def short_component_declaration(self):
            return self.getTypedRuleContext(
                Modelica.Short_component_declarationContext, 0
            )

        def getRuleIndex(self):
            return Modelica.RULE_short_component_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShort_component_clause"):
                listener.enterShort_component_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShort_component_clause"):
                listener.exitShort_component_clause(self)

    def short_component_clause(self):
        localctx = Modelica.Short_component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_short_component_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.type_prefix()
            self.state = 624
            self.type_specifier()
            self.state = 625
            self.short_component_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_component_declarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Modelica.DeclarationContext, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_short_component_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShort_component_declaration"):
                listener.enterShort_component_declaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShort_component_declaration"):
                listener.exitShort_component_declaration(self)

    def short_component_declaration(self):
        localctx = Modelica.Short_component_declarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 92, self.RULE_short_component_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.declaration()
            self.state = 628
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_definitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(Modelica.Class_prefixesContext, 0)

        def short_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Short_class_specifierContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_short_definition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShort_definition"):
                listener.enterShort_definition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShort_definition"):
                listener.exitShort_definition(self)

    def short_definition(self):
        localctx = Modelica.Short_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_short_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.class_prefixes()
            self.state = 631
            self.short_class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equation_sectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUATION(self):
            return self.getToken(Modelica.EQUATION, 0)

        def equation_list(self):
            return self.getTypedRuleContext(Modelica.Equation_listContext, 0)

        def INITIAL(self):
            return self.getToken(Modelica.INITIAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_equation_section

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEquation_section"):
                listener.enterEquation_section(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEquation_section"):
                listener.exitEquation_section(self)

    def equation_section(self):
        localctx = Modelica.Equation_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_equation_section)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 62:
                self.state = 633
                self.match(Modelica.INITIAL)

            self.state = 636
            self.match(Modelica.EQUATION)
            self.state = 637
            self.equation_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Algorithm_sectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM(self):
            return self.getToken(Modelica.ALGORITHM, 0)

        def statement_list(self):
            return self.getTypedRuleContext(Modelica.Statement_listContext, 0)

        def INITIAL(self):
            return self.getToken(Modelica.INITIAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_algorithm_section

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlgorithm_section"):
                listener.enterAlgorithm_section(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlgorithm_section"):
                listener.exitAlgorithm_section(self)

    def algorithm_section(self):
        localctx = Modelica.Algorithm_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_algorithm_section)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 62:
                self.state = 639
                self.match(Modelica.INITIAL)

            self.state = 642
            self.match(Modelica.ALGORITHM)
            self.state = 643
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equation_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.EquationContext)
            else:
                return self.getTypedRuleContext(Modelica.EquationContext, i)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_equation_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEquation_list"):
                listener.enterEquation_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEquation_list"):
                listener.exitEquation_list(self)

    def equation_list(self):
        localctx = Modelica.Equation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_equation_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 645
                    self.equation()
                    self.state = 646
                    self.match(Modelica.SEMICOLON)
                self.state = 652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.StatementContext)
            else:
                return self.getTypedRuleContext(Modelica.StatementContext, i)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_statement_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement_list"):
                listener.enterStatement_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement_list"):
                listener.exitStatement_list(self)

    def statement_list(self):
        localctx = Modelica.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_statement_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & 58377195487376) != 0
            ) or _la == 93:
                self.state = 653
                self.statement()
                self.state = 654
                self.match(Modelica.SEMICOLON)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def simple_expression(self):
            return self.getTypedRuleContext(Modelica.Simple_expressionContext, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def if_equation(self):
            return self.getTypedRuleContext(Modelica.If_equationContext, 0)

        def for_equation(self):
            return self.getTypedRuleContext(Modelica.For_equationContext, 0)

        def connect_equation(self):
            return self.getTypedRuleContext(Modelica.Connect_equationContext, 0)

        def when_equation(self):
            return self.getTypedRuleContext(Modelica.When_equationContext, 0)

        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(Modelica.Function_call_argsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEquation"):
                listener.enterEquation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEquation"):
                listener.exitEquation(self)

    def equation(self):
        localctx = Modelica.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
            if la_ == 1:
                self.state = 661
                self.simple_expression()
                self.state = 662
                self.match(Modelica.EQUAL)
                self.state = 663
                self.expression()
                pass

            elif la_ == 2:
                self.state = 665
                self.if_equation()
                pass

            elif la_ == 3:
                self.state = 666
                self.for_equation()
                pass

            elif la_ == 4:
                self.state = 667
                self.connect_equation()
                pass

            elif la_ == 5:
                self.state = 668
                self.when_equation()
                pass

            elif la_ == 6:
                self.state = 669
                self.component_reference()
                self.state = 670
                self.function_call_args()
                pass

            self.state = 674
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext, 0)

        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext, 0)

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def output_expression_list(self):
            return self.getTypedRuleContext(Modelica.Output_expression_listContext, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def ASSIGN(self):
            return self.getToken(Modelica.ASSIGN, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(Modelica.Function_call_argsContext, 0)

        def BREAK(self):
            return self.getToken(Modelica.BREAK, 0)

        def RETURN(self):
            return self.getToken(Modelica.RETURN, 0)

        def if_statement(self):
            return self.getTypedRuleContext(Modelica.If_statementContext, 0)

        def for_statement(self):
            return self.getTypedRuleContext(Modelica.For_statementContext, 0)

        def while_statement(self):
            return self.getTypedRuleContext(Modelica.While_statementContext, 0)

        def when_statement(self):
            return self.getTypedRuleContext(Modelica.When_statementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):
        localctx = Modelica.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 93]:
                self.state = 676
                self.component_reference()
                self.state = 680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 677
                    self.match(Modelica.ASSIGN)
                    self.state = 678
                    self.expression()
                    pass
                elif token in [7]:
                    self.state = 679
                    self.function_call_args()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [7]:
                self.state = 682
                self.match(Modelica.LPAREN)
                self.state = 683
                self.output_expression_list()
                self.state = 684
                self.match(Modelica.RPAREN)
                self.state = 685
                self.match(Modelica.ASSIGN)
                self.state = 686
                self.component_reference()
                self.state = 687
                self.function_call_args()
                pass
            elif token in [44]:
                self.state = 689
                self.match(Modelica.BREAK)
                pass
            elif token in [45]:
                self.state = 690
                self.match(Modelica.RETURN)
                pass
            elif token in [36]:
                self.state = 691
                self.if_statement()
                pass
            elif token in [35]:
                self.state = 692
                self.for_statement()
                pass
            elif token in [42]:
                self.state = 693
                self.while_statement()
                pass
            elif token in [40]:
                self.state = 694
                self.when_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 697
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_equationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_branch(self):
            return self.getTypedRuleContext(Modelica.If_branchContext, 0)

        def conditional_equations(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_equationsContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Conditional_equationsContext, i
                )

        def END(self):
            return self.getToken(Modelica.END, 0)

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def elseif_branch(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elseif_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elseif_branchContext, i)

        def else_branch(self):
            return self.getTypedRuleContext(Modelica.Else_branchContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_if_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_equation"):
                listener.enterIf_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_equation"):
                listener.exitIf_equation(self)

    def if_equation(self):
        localctx = Modelica.If_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_if_equation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.if_branch()
            self.state = 700
            self.conditional_equations()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 38:
                self.state = 701
                self.elseif_branch()
                self.state = 702
                self.conditional_equations()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 37:
                self.state = 709
                self.else_branch()
                self.state = 710
                self.conditional_equations()

            self.state = 714
            self.match(Modelica.END)
            self.state = 715
            self.match(Modelica.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_equationsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.EquationContext)
            else:
                return self.getTypedRuleContext(Modelica.EquationContext, i)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_conditional_equations

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditional_equations"):
                listener.enterConditional_equations(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditional_equations"):
                listener.exitConditional_equations(self)

    def conditional_equations(self):
        localctx = Modelica.Conditional_equationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_conditional_equations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 717
                    self.equation()
                    self.state = 718
                    self.match(Modelica.SEMICOLON)
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_branch(self):
            return self.getTypedRuleContext(Modelica.If_branchContext, 0)

        def conditional_statements(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_statementsContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Conditional_statementsContext, i
                )

        def END(self):
            return self.getToken(Modelica.END, 0)

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def elseif_branch(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elseif_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elseif_branchContext, i)

        def else_branch(self):
            return self.getTypedRuleContext(Modelica.Else_branchContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_if_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_statement"):
                listener.enterIf_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_statement"):
                listener.exitIf_statement(self)

    def if_statement(self):
        localctx = Modelica.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_if_statement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.if_branch()
            self.state = 726
            self.conditional_statements()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 38:
                self.state = 727
                self.elseif_branch()
                self.state = 728
                self.conditional_statements()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 37:
                self.state = 735
                self.else_branch()
                self.state = 736
                self.conditional_statements()

            self.state = 740
            self.match(Modelica.END)
            self.state = 741
            self.match(Modelica.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_branchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_if_branch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_branch"):
                listener.enterIf_branch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_branch"):
                listener.exitIf_branch(self)

    def if_branch(self):
        localctx = Modelica.If_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_if_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(Modelica.IF)
            self.state = 744
            self.expression()
            self.state = 745
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elseif_branchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(Modelica.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_elseif_branch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElseif_branch"):
                listener.enterElseif_branch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElseif_branch"):
                listener.exitElseif_branch(self)

    def elseif_branch(self):
        localctx = Modelica.Elseif_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elseif_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(Modelica.ELSEIF)
            self.state = 748
            self.expression()
            self.state = 749
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_branchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Modelica.ELSE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_else_branch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_branch"):
                listener.enterElse_branch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_branch"):
                listener.exitElse_branch(self)

    def else_branch(self):
        localctx = Modelica.Else_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_else_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(Modelica.ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_statementsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.StatementContext)
            else:
                return self.getTypedRuleContext(Modelica.StatementContext, i)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_conditional_statements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditional_statements"):
                listener.enterConditional_statements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditional_statements"):
                listener.exitConditional_statements(self)

    def conditional_statements(self):
        localctx = Modelica.Conditional_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_conditional_statements)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & 58377195487376) != 0
            ) or _la == 93:
                self.state = 753
                self.statement()
                self.state = 754
                self.match(Modelica.SEMICOLON)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_equationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.FOR)
            else:
                return self.getToken(Modelica.FOR, i)

        def for_indices(self):
            return self.getTypedRuleContext(Modelica.For_indicesContext, 0)

        def LOOP(self):
            return self.getToken(Modelica.LOOP, 0)

        def conditional_equations(self):
            return self.getTypedRuleContext(Modelica.Conditional_equationsContext, 0)

        def END(self):
            return self.getToken(Modelica.END, 0)

        def getRuleIndex(self):
            return Modelica.RULE_for_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_equation"):
                listener.enterFor_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_equation"):
                listener.exitFor_equation(self)

    def for_equation(self):
        localctx = Modelica.For_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_for_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(Modelica.FOR)
            self.state = 762
            self.for_indices()
            self.state = 763
            self.match(Modelica.LOOP)
            self.state = 764
            self.conditional_equations()
            self.state = 765
            self.match(Modelica.END)
            self.state = 766
            self.match(Modelica.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_statementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.FOR)
            else:
                return self.getToken(Modelica.FOR, i)

        def for_indices(self):
            return self.getTypedRuleContext(Modelica.For_indicesContext, 0)

        def LOOP(self):
            return self.getToken(Modelica.LOOP, 0)

        def conditional_statements(self):
            return self.getTypedRuleContext(Modelica.Conditional_statementsContext, 0)

        def END(self):
            return self.getToken(Modelica.END, 0)

        def getRuleIndex(self):
            return Modelica.RULE_for_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_statement"):
                listener.enterFor_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_statement"):
                listener.exitFor_statement(self)

    def for_statement(self):
        localctx = Modelica.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_for_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(Modelica.FOR)
            self.state = 769
            self.for_indices()
            self.state = 770
            self.match(Modelica.LOOP)
            self.state = 771
            self.conditional_statements()
            self.state = 772
            self.match(Modelica.END)
            self.state = 773
            self.match(Modelica.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_indicesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_index(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.For_indexContext)
            else:
                return self.getTypedRuleContext(Modelica.For_indexContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_for_indices

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_indices"):
                listener.enterFor_indices(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_indices"):
                listener.exitFor_indices(self)

    def for_indices(self):
        localctx = Modelica.For_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_for_indices)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.for_index()
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 776
                self.match(Modelica.COMMA)
                self.state = 777
                self.for_index()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_indexContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def IN(self):
            return self.getToken(Modelica.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_for_index

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_index"):
                listener.enterFor_index(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_index"):
                listener.exitFor_index(self)

    def for_index(self):
        localctx = Modelica.For_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_for_index)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(Modelica.IDENT)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 34:
                self.state = 784
                self.match(Modelica.IN)
                self.state = 785
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.WHILE)
            else:
                return self.getToken(Modelica.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def LOOP(self):
            return self.getToken(Modelica.LOOP, 0)

        def conditional_statements(self):
            return self.getTypedRuleContext(Modelica.Conditional_statementsContext, 0)

        def END(self):
            return self.getToken(Modelica.END, 0)

        def getRuleIndex(self):
            return Modelica.RULE_while_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_statement"):
                listener.enterWhile_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_statement"):
                listener.exitWhile_statement(self)

    def while_statement(self):
        localctx = Modelica.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(Modelica.WHILE)
            self.state = 789
            self.expression()
            self.state = 790
            self.match(Modelica.LOOP)
            self.state = 791
            self.conditional_statements()
            self.state = 792
            self.match(Modelica.END)
            self.state = 793
            self.match(Modelica.WHILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_equationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_branch(self):
            return self.getTypedRuleContext(Modelica.When_branchContext, 0)

        def conditional_equations(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_equationsContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Conditional_equationsContext, i
                )

        def END(self):
            return self.getToken(Modelica.END, 0)

        def WHEN(self):
            return self.getToken(Modelica.WHEN, 0)

        def elsewhen_branch(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elsewhen_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elsewhen_branchContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_when_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhen_equation"):
                listener.enterWhen_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhen_equation"):
                listener.exitWhen_equation(self)

    def when_equation(self):
        localctx = Modelica.When_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_when_equation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.when_branch()
            self.state = 796
            self.conditional_equations()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 41:
                self.state = 797
                self.elsewhen_branch()
                self.state = 798
                self.conditional_equations()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 805
            self.match(Modelica.END)
            self.state = 806
            self.match(Modelica.WHEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_statementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_branch(self):
            return self.getTypedRuleContext(Modelica.When_branchContext, 0)

        def conditional_statements(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_statementsContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Conditional_statementsContext, i
                )

        def END(self):
            return self.getToken(Modelica.END, 0)

        def WHEN(self):
            return self.getToken(Modelica.WHEN, 0)

        def elsewhen_branch(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elsewhen_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elsewhen_branchContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_when_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhen_statement"):
                listener.enterWhen_statement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhen_statement"):
                listener.exitWhen_statement(self)

    def when_statement(self):
        localctx = Modelica.When_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_when_statement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.when_branch()
            self.state = 809
            self.conditional_statements()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 41:
                self.state = 810
                self.elsewhen_branch()
                self.state = 811
                self.conditional_statements()
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.match(Modelica.END)
            self.state = 819
            self.match(Modelica.WHEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_branchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Modelica.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_when_branch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhen_branch"):
                listener.enterWhen_branch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhen_branch"):
                listener.exitWhen_branch(self)

    def when_branch(self):
        localctx = Modelica.When_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_when_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(Modelica.WHEN)
            self.state = 822
            self.expression()
            self.state = 823
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elsewhen_branchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEWHEN(self):
            return self.getToken(Modelica.ELSEWHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_elsewhen_branch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsewhen_branch"):
                listener.enterElsewhen_branch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsewhen_branch"):
                listener.exitElsewhen_branch(self)

    def elsewhen_branch(self):
        localctx = Modelica.Elsewhen_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elsewhen_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(Modelica.ELSEWHEN)
            self.state = 826
            self.expression()
            self.state = 827
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_equationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(Modelica.CONNECT, 0)

        def connected_components(self):
            return self.getTypedRuleContext(Modelica.Connected_componentsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_connect_equation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_equation"):
                listener.enterConnect_equation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_equation"):
                listener.exitConnect_equation(self)

    def connect_equation(self):
        localctx = Modelica.Connect_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_connect_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(Modelica.CONNECT)
            self.state = 830
            self.connected_components()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connected_componentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def component_reference(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Component_referenceContext)
            else:
                return self.getTypedRuleContext(Modelica.Component_referenceContext, i)

        def COMMA(self):
            return self.getToken(Modelica.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_connected_components

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnected_components"):
                listener.enterConnected_components(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnected_components"):
                listener.exitConnected_components(self)

    def connected_components(self):
        localctx = Modelica.Connected_componentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_connected_components)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(Modelica.LPAREN)
            self.state = 833
            self.component_reference()
            self.state = 834
            self.match(Modelica.COMMA)
            self.state = 835
            self.component_reference()
            self.state = 836
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(Modelica.Simple_expressionContext, 0)

        def if_expression(self):
            return self.getTypedRuleContext(Modelica.If_expressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):
        localctx = Modelica.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expression)
        try:
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                4,
                7,
                9,
                11,
                15,
                16,
                20,
                21,
                31,
                57,
                59,
                60,
                62,
                90,
                91,
                92,
                93,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.simple_expression()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.if_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_eval(self):
            return self.getTypedRuleContext(Modelica.If_evalContext, 0)

        def conditional_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_expressionContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Conditional_expressionContext, i
                )

        def else_eval(self):
            return self.getTypedRuleContext(Modelica.Else_evalContext, 0)

        def elseif_eval(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elseif_evalContext)
            else:
                return self.getTypedRuleContext(Modelica.Elseif_evalContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_if_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_expression"):
                listener.enterIf_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_expression"):
                listener.exitIf_expression(self)

    def if_expression(self):
        localctx = Modelica.If_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_if_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.if_eval()
            self.state = 843
            self.conditional_expression()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 38:
                self.state = 844
                self.elseif_eval()
                self.state = 845
                self.conditional_expression()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 852
            self.else_eval()
            self.state = 853
            self.conditional_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_evalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_if_eval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_eval"):
                listener.enterIf_eval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_eval"):
                listener.exitIf_eval(self)

    def if_eval(self):
        localctx = Modelica.If_evalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_if_eval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(Modelica.IF)
            self.state = 856
            self.expression()
            self.state = 857
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elseif_evalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(Modelica.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_elseif_eval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElseif_eval"):
                listener.enterElseif_eval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElseif_eval"):
                listener.exitElseif_eval(self)

    def elseif_eval(self):
        localctx = Modelica.Elseif_evalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_elseif_eval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(Modelica.ELSEIF)
            self.state = 860
            self.expression()
            self.state = 861
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_evalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Modelica.ELSE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_else_eval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_eval"):
                listener.enterElse_eval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_eval"):
                listener.exitElse_eval(self)

    def else_eval(self):
        localctx = Modelica.Else_evalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_else_eval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(Modelica.ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_conditional_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditional_expression"):
                listener.enterConditional_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditional_expression"):
                listener.exitConditional_expression(self)

    def conditional_expression(self):
        localctx = Modelica.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_conditional_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Logical_expressionContext)
            else:
                return self.getTypedRuleContext(Modelica.Logical_expressionContext, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COLON)
            else:
                return self.getToken(Modelica.COLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_simple_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_expression"):
                listener.enterSimple_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_expression"):
                listener.exitSimple_expression(self)

    def simple_expression(self):
        localctx = Modelica.Simple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simple_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.logical_expression()
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 6:
                self.state = 868
                self.match(Modelica.COLON)
                self.state = 869
                self.logical_expression()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 6:
                    self.state = 870
                    self.match(Modelica.COLON)
                    self.state = 871
                    self.logical_expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Logical_termContext)
            else:
                return self.getTypedRuleContext(Modelica.Logical_termContext, i)

        def or_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Or_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Or_operatorContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_logical_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical_expression"):
                listener.enterLogical_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical_expression"):
                listener.exitLogical_expression(self)

    def logical_expression(self):
        localctx = Modelica.Logical_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_logical_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.logical_term()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 33:
                self.state = 877
                self.or_operator()
                self.state = 878
                self.logical_term()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(Modelica.OR, 0)

        def getRuleIndex(self):
            return Modelica.RULE_or_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOr_operator"):
                listener.enterOr_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOr_operator"):
                listener.exitOr_operator(self)

    def or_operator(self):
        localctx = Modelica.Or_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_or_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(Modelica.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_termContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Logical_factorContext)
            else:
                return self.getTypedRuleContext(Modelica.Logical_factorContext, i)

        def and_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.And_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.And_operatorContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_logical_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical_term"):
                listener.enterLogical_term(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical_term"):
                listener.exitLogical_term(self)

    def logical_term(self):
        localctx = Modelica.Logical_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_logical_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.logical_factor()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 32:
                self.state = 888
                self.and_operator()
                self.state = 889
                self.logical_factor()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Modelica.AND, 0)

        def getRuleIndex(self):
            return Modelica.RULE_and_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnd_operator"):
                listener.enterAnd_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnd_operator"):
                listener.exitAnd_operator(self)

    def and_operator(self):
        localctx = Modelica.And_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_and_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(Modelica.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_factorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(Modelica.RelationContext, 0)

        def NOT(self):
            return self.getToken(Modelica.NOT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_logical_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical_factor"):
                listener.enterLogical_factor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical_factor"):
                listener.exitLogical_factor(self)

    def logical_factor(self):
        localctx = Modelica.Logical_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_logical_factor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 31:
                self.state = 898
                self.match(Modelica.NOT)

            self.state = 901
            self.relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Arithmetic_expressionContext)
            else:
                return self.getTypedRuleContext(
                    Modelica.Arithmetic_expressionContext, i
                )

        def relational_operator(self):
            return self.getTypedRuleContext(Modelica.Relational_operatorContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_relation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation"):
                listener.enterRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation"):
                listener.exitRelation(self)

    def relation(self):
        localctx = Modelica.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_relation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.arithmetic_expression()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 2113929216) != 0:
                self.state = 904
                self.relational_operator()
                self.state = 905
                self.arithmetic_expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRE(self):
            return self.getToken(Modelica.GRE, 0)

        def GEQ(self):
            return self.getToken(Modelica.GEQ, 0)

        def LES(self):
            return self.getToken(Modelica.LES, 0)

        def LEQ(self):
            return self.getToken(Modelica.LEQ, 0)

        def NEQ(self):
            return self.getToken(Modelica.NEQ, 0)

        def EEQ(self):
            return self.getToken(Modelica.EEQ, 0)

        def getRuleIndex(self):
            return Modelica.RULE_relational_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelational_operator"):
                listener.enterRelational_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelational_operator"):
                listener.exitRelational_operator(self)

    def relational_operator(self):
        localctx = Modelica.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_relational_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 2113929216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arithmetic_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.TermContext)
            else:
                return self.getTypedRuleContext(Modelica.TermContext, i)

        def add_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Add_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Add_operatorContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_arithmetic_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic_expression"):
                listener.enterArithmetic_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic_expression"):
                listener.exitArithmetic_expression(self)

    def arithmetic_expression(self):
        localctx = Modelica.Arithmetic_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_arithmetic_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.term()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and ((1 << _la) & 3244032) != 0:
                self.state = 912
                self.add_operator()
                self.state = 913
                self.term()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_operator(self):
            return self.getTypedRuleContext(Modelica.Add_operatorContext, 0)

        def unary_operand(self):
            return self.getTypedRuleContext(Modelica.Unary_operandContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_unary_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_expression"):
                listener.enterUnary_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_expression"):
                listener.exitUnary_expression(self)

    def unary_expression(self):
        localctx = Modelica.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_unary_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.add_operator()
            self.state = 921
            self.unary_operand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Modelica.PrimaryContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_unary_operand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_operand"):
                listener.enterUnary_operand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_operand"):
                listener.exitUnary_operand(self)

    def unary_operand(self):
        localctx = Modelica.Unary_operandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_unary_operand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.primary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(Modelica.PLUS, 0)

        def MINUS(self):
            return self.getToken(Modelica.MINUS, 0)

        def DOTPLUS(self):
            return self.getToken(Modelica.DOTPLUS, 0)

        def DOTMINUS(self):
            return self.getToken(Modelica.DOTMINUS, 0)

        def getRuleIndex(self):
            return Modelica.RULE_add_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdd_operator"):
                listener.enterAdd_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdd_operator"):
                listener.exitAdd_operator(self)

    def add_operator(self):
        localctx = Modelica.Add_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_add_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 3244032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.FactorContext)
            else:
                return self.getTypedRuleContext(Modelica.FactorContext, i)

        def mul_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Mul_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Mul_operatorContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):
        localctx = Modelica.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.factor()
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and ((1 << _la) & 12976128) != 0:
                self.state = 928
                self.mul_operator()
                self.state = 929
                self.factor()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mul_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Modelica.STAR, 0)

        def SLASH(self):
            return self.getToken(Modelica.SLASH, 0)

        def DOTSTAR(self):
            return self.getToken(Modelica.DOTSTAR, 0)

        def DOTSLASH(self):
            return self.getToken(Modelica.DOTSLASH, 0)

        def getRuleIndex(self):
            return Modelica.RULE_mul_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMul_operator"):
                listener.enterMul_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMul_operator"):
                listener.exitMul_operator(self)

    def mul_operator(self):
        localctx = Modelica.Mul_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_mul_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 12976128) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.PrimaryContext)
            else:
                return self.getTypedRuleContext(Modelica.PrimaryContext, i)

        def exp_operator(self):
            return self.getTypedRuleContext(Modelica.Exp_operatorContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):
        localctx = Modelica.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.primary()
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 19 or _la == 24:
                self.state = 939
                self.exp_operator()
                self.state = 940
                self.primary()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLEX(self):
            return self.getToken(Modelica.FLEX, 0)

        def DOTFLEX(self):
            return self.getToken(Modelica.DOTFLEX, 0)

        def getRuleIndex(self):
            return Modelica.RULE_exp_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExp_operator"):
                listener.enterExp_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExp_operator"):
                listener.exitExp_operator(self)

    def exp_operator(self):
        localctx = Modelica.Exp_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_exp_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            _la = self._input.LA(1)
            if not (_la == 19 or _la == 24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNUM(self):
            return self.getToken(Modelica.UNUM, 0)

        def STRING(self):
            return self.getToken(Modelica.STRING, 0)

        def BOOL(self):
            return self.getToken(Modelica.BOOL, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(Modelica.Unary_expressionContext, 0)

        def function_call_args(self):
            return self.getTypedRuleContext(Modelica.Function_call_argsContext, 0)

        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext, 0)

        def DER(self):
            return self.getToken(Modelica.DER, 0)

        def INITIAL(self):
            return self.getToken(Modelica.INITIAL, 0)

        def PURE(self):
            return self.getToken(Modelica.PURE, 0)

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def output_expression_list(self):
            return self.getTypedRuleContext(Modelica.Output_expression_listContext, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def LBRACK(self):
            return self.getToken(Modelica.LBRACK, 0)

        def expression_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Expression_listContext)
            else:
                return self.getTypedRuleContext(Modelica.Expression_listContext, i)

        def RBRACK(self):
            return self.getToken(Modelica.RBRACK, 0)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def LCURLY(self):
            return self.getToken(Modelica.LCURLY, 0)

        def array_arguments(self):
            return self.getTypedRuleContext(Modelica.Array_argumentsContext, 0)

        def RCURLY(self):
            return self.getToken(Modelica.RCURLY, 0)

        def END(self):
            return self.getToken(Modelica.END, 0)

        def getRuleIndex(self):
            return Modelica.RULE_primary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimary"):
                listener.enterPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimary"):
                listener.exitPrimary(self)

    def primary(self):
        localctx = Modelica.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_primary)
        self._la = 0  # Token type
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 946
                self.match(Modelica.UNUM)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(Modelica.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.match(Modelica.BOOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 949
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 954
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [4, 93]:
                    self.state = 950
                    self.component_reference()
                    pass
                elif token in [60]:
                    self.state = 951
                    self.match(Modelica.DER)
                    pass
                elif token in [62]:
                    self.state = 952
                    self.match(Modelica.INITIAL)
                    pass
                elif token in [57]:
                    self.state = 953
                    self.match(Modelica.PURE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 956
                self.function_call_args()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 957
                self.component_reference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 958
                self.match(Modelica.LPAREN)
                self.state = 959
                self.output_expression_list()
                self.state = 960
                self.match(Modelica.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 962
                self.match(Modelica.LBRACK)
                self.state = 963
                self.expression_list()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 5:
                    self.state = 964
                    self.match(Modelica.SEMICOLON)
                    self.state = 965
                    self.expression_list()
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 971
                self.match(Modelica.RBRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 973
                self.match(Modelica.LCURLY)
                self.state = 974
                self.array_arguments()
                self.state = 975
                self.match(Modelica.RCURLY)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 977
                self.match(Modelica.END)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.DOT)
            else:
                return self.getToken(Modelica.DOT, i)

        def getRuleIndex(self):
            return Modelica.RULE_type_specifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_specifier"):
                listener.enterType_specifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_specifier"):
                listener.exitType_specifier(self)

    def type_specifier(self):
        localctx = Modelica.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_type_specifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 4:
                self.state = 980
                self.match(Modelica.DOT)

            self.state = 983
            self.match(Modelica.IDENT)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 4:
                self.state = 984
                self.match(Modelica.DOT)
                self.state = 985
                self.match(Modelica.IDENT)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.DOT)
            else:
                return self.getToken(Modelica.DOT, i)

        def getRuleIndex(self):
            return Modelica.RULE_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)

    def name(self):
        localctx = Modelica.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(Modelica.IDENT)
            self.state = 996
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 992
                    self.match(Modelica.DOT)
                    self.state = 993
                    self.match(Modelica.IDENT)
                self.state = 998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_referenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.DOT)
            else:
                return self.getToken(Modelica.DOT, i)

        def array_subscripts(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Array_subscriptsContext)
            else:
                return self.getTypedRuleContext(Modelica.Array_subscriptsContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_component_reference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComponent_reference"):
                listener.enterComponent_reference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComponent_reference"):
                listener.exitComponent_reference(self)

    def component_reference(self):
        localctx = Modelica.Component_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_component_reference)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 4:
                self.state = 999
                self.match(Modelica.DOT)

            self.state = 1002
            self.match(Modelica.IDENT)
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 11:
                self.state = 1003
                self.array_subscripts()

            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 4:
                self.state = 1006
                self.match(Modelica.DOT)
                self.state = 1007
                self.match(Modelica.IDENT)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 11:
                    self.state = 1008
                    self.array_subscripts()

                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_call_argsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def function_arguments(self):
            return self.getTypedRuleContext(Modelica.Function_argumentsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_function_call_args

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_call_args"):
                listener.enterFunction_call_args(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_call_args"):
                listener.exitFunction_call_args(self)

    def function_call_args(self):
        localctx = Modelica.Function_call_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_function_call_args)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(Modelica.LPAREN)
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 6487435334097406608) != 0) or (
                (((_la - 90)) & ~0x3F) == 0 and ((1 << (_la - 90)) & 15) != 0
            ):
                self.state = 1017
                self.function_arguments()

            self.state = 1020
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def FOR(self):
            return self.getToken(Modelica.FOR, 0)

        def for_indices(self):
            return self.getTypedRuleContext(Modelica.For_indicesContext, 0)

        def function_argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Function_argumentContext)
            else:
                return self.getTypedRuleContext(Modelica.Function_argumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def named_arguments(self):
            return self.getTypedRuleContext(Modelica.Named_argumentsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_function_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_arguments"):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_arguments"):
                listener.exitFunction_arguments(self)

    def function_arguments(self):
        localctx = Modelica.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_function_arguments)
        self._la = 0  # Token type
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.expression()
                self.state = 1023
                self.match(Modelica.FOR)
                self.state = 1024
                self.for_indices()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.function_argument()
                self.state = 1031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1027
                        self.match(Modelica.COMMA)
                        self.state = 1028
                        self.function_argument()
                    self.state = 1033
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 3:
                    self.state = 1034
                    self.match(Modelica.COMMA)
                    self.state = 1035
                    self.named_arguments()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1038
                self.named_arguments()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Named_argumentContext)
            else:
                return self.getTypedRuleContext(Modelica.Named_argumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_named_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamed_arguments"):
                listener.enterNamed_arguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamed_arguments"):
                listener.exitNamed_arguments(self)

    def named_arguments(self):
        localctx = Modelica.Named_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_named_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.named_argument()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 1042
                self.match(Modelica.COMMA)
                self.state = 1043
                self.named_argument()
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(Modelica.Function_argumentContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_named_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamed_argument"):
                listener.enterNamed_argument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamed_argument"):
                listener.exitNamed_argument(self)

    def named_argument(self):
        localctx = Modelica.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(Modelica.IDENT)
            self.state = 1050
            self.match(Modelica.EQUAL)
            self.state = 1051
            self.function_argument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_partial_application(self):
            return self.getTypedRuleContext(
                Modelica.Function_partial_applicationContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_function_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_argument"):
                listener.enterFunction_argument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_argument"):
                listener.exitFunction_argument(self)

    def function_argument(self):
        localctx = Modelica.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_function_argument)
        try:
            self.state = 1055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1053
                self.function_partial_application()
                pass
            elif token in [
                4,
                7,
                9,
                11,
                15,
                16,
                20,
                21,
                31,
                36,
                57,
                59,
                60,
                62,
                90,
                91,
                92,
                93,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_partial_applicationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(Modelica.FUNCTION, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext, 0)

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def named_arguments(self):
            return self.getTypedRuleContext(Modelica.Named_argumentsContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_function_partial_application

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_partial_application"):
                listener.enterFunction_partial_application(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_partial_application"):
                listener.exitFunction_partial_application(self)

    def function_partial_application(self):
        localctx = Modelica.Function_partial_applicationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 206, self.RULE_function_partial_application)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(Modelica.FUNCTION)
            self.state = 1058
            self.type_specifier()
            self.state = 1059
            self.match(Modelica.LPAREN)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 93:
                self.state = 1060
                self.named_arguments()

            self.state = 1063
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_expression_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ExpressionContext)
            else:
                return self.getTypedRuleContext(Modelica.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_output_expression_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOutput_expression_list"):
                listener.enterOutput_expression_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOutput_expression_list"):
                listener.exitOutput_expression_list(self)

    def output_expression_list(self):
        localctx = Modelica.Output_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_output_expression_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 6485183534283721360) != 0) or (
                (((_la - 90)) & ~0x3F) == 0 and ((1 << (_la - 90)) & 15) != 0
            ):
                self.state = 1065
                self.expression()

            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 1068
                self.match(Modelica.COMMA)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & 6485183534283721360) != 0
                ) or ((((_la - 90)) & ~0x3F) == 0 and ((1 << (_la - 90)) & 15) != 0):
                    self.state = 1069
                    self.expression()

                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ExpressionContext)
            else:
                return self.getTypedRuleContext(Modelica.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_expression_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression_list"):
                listener.enterExpression_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression_list"):
                listener.exitExpression_list(self)

    def expression_list(self):
        localctx = Modelica.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_expression_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.expression()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 1078
                self.match(Modelica.COMMA)
                self.state = 1079
                self.expression()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_argumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ExpressionContext)
            else:
                return self.getTypedRuleContext(Modelica.ExpressionContext, i)

        def FOR(self):
            return self.getToken(Modelica.FOR, 0)

        def for_indices(self):
            return self.getTypedRuleContext(Modelica.For_indicesContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_array_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArray_arguments"):
                listener.enterArray_arguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArray_arguments"):
                listener.exitArray_arguments(self)

    def array_arguments(self):
        localctx = Modelica.Array_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_array_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.expression()
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10]:
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 3:
                    self.state = 1086
                    self.match(Modelica.COMMA)
                    self.state = 1087
                    self.expression()
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [35]:
                self.state = 1093
                self.match(Modelica.FOR)
                self.state = 1094
                self.for_indices()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_subscriptsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Modelica.LBRACK, 0)

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.SubscriptContext)
            else:
                return self.getTypedRuleContext(Modelica.SubscriptContext, i)

        def RBRACK(self):
            return self.getToken(Modelica.RBRACK, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_array_subscripts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArray_subscripts"):
                listener.enterArray_subscripts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArray_subscripts"):
                listener.exitArray_subscripts(self)

    def array_subscripts(self):
        localctx = Modelica.Array_subscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_array_subscripts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(Modelica.LBRACK)
            self.state = 1098
            self.subscript()
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 3:
                self.state = 1099
                self.match(Modelica.COMMA)
                self.state = 1100
                self.subscript()
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1106
            self.match(Modelica.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Modelica.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_subscript

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubscript"):
                listener.enterSubscript(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubscript"):
                listener.exitSubscript(self)

    def subscript(self):
        localctx = Modelica.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_subscript)
        try:
            self.state = 1110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(Modelica.COLON)
                pass
            elif token in [
                4,
                7,
                9,
                11,
                15,
                16,
                20,
                21,
                31,
                36,
                57,
                59,
                60,
                62,
                90,
                91,
                92,
                93,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescriptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def description_string(self):
            return self.getTypedRuleContext(Modelica.Description_stringContext, 0)

        def annotation(self):
            return self.getTypedRuleContext(Modelica.AnnotationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_description

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescription"):
                listener.enterDescription(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescription"):
                listener.exitDescription(self)

    def description(self):
        localctx = Modelica.DescriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_description)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.description_string()
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 1113
                self.annotation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Description_stringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(Modelica.STRING)
            else:
                return self.getToken(Modelica.STRING, i)

        def cat_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Cat_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Cat_operatorContext, i)

        def getRuleIndex(self):
            return Modelica.RULE_description_string

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescription_string"):
                listener.enterDescription_string(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescription_string"):
                listener.exitDescription_string(self)

    def description_string(self):
        localctx = Modelica.Description_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_description_string)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 90:
                self.state = 1116
                self.match(Modelica.STRING)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 15:
                    self.state = 1117
                    self.cat_operator()
                    self.state = 1118
                    self.match(Modelica.STRING)
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cat_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(Modelica.PLUS, 0)

        def getRuleIndex(self):
            return Modelica.RULE_cat_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCat_operator"):
                listener.enterCat_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCat_operator"):
                listener.exitCat_operator(self)

    def cat_operator(self):
        localctx = Modelica.Cat_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_cat_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(Modelica.PLUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION(self):
            return self.getToken(Modelica.ANNOTATION, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext, 0)

        def getRuleIndex(self):
            return Modelica.RULE_annotation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnnotation"):
                listener.enterAnnotation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnnotation"):
                listener.exitAnnotation(self)

    def annotation(self):
        localctx = Modelica.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(Modelica.ANNOTATION)
            self.state = 1130
            self.class_modification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

# Generated from grammar/Modelica.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,93,1155,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,1,0,1,0,3,0,245,8,0,1,0,3,0,248,8,0,1,0,3,0,251,8,0,1,0,1,
        0,1,0,5,0,256,8,0,10,0,12,0,259,9,0,1,1,3,1,262,8,1,1,1,1,1,1,1,
        1,2,3,2,268,8,2,1,2,1,2,1,2,3,2,273,8,2,1,2,1,2,1,2,3,2,278,8,2,
        1,2,1,2,1,2,1,2,3,2,284,8,2,1,2,3,2,287,8,2,1,2,1,2,3,2,291,8,2,
        1,3,1,3,1,3,3,3,296,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,306,
        8,4,1,4,1,4,1,4,1,4,3,4,312,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        3,6,322,8,6,1,6,3,6,325,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
        335,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,346,8,7,10,7,12,
        7,349,9,7,1,7,1,7,1,7,1,8,3,8,355,8,8,1,9,1,9,3,9,359,8,9,1,9,3,
        9,362,8,9,1,9,1,9,1,10,1,10,1,10,5,10,369,8,10,10,10,12,10,372,9,
        10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,5,12,382,8,12,10,12,12,
        12,385,9,12,1,12,3,12,388,8,12,1,12,3,12,391,8,12,1,13,1,13,1,13,
        1,13,1,14,1,14,3,14,399,8,14,1,14,3,14,402,8,14,1,14,3,14,405,8,
        14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,3,16,414,8,16,1,16,1,16,1,
        16,1,17,1,17,3,17,421,8,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,
        20,1,20,1,20,1,21,1,21,1,21,5,21,436,8,21,10,21,12,21,439,9,21,1,
        22,1,22,1,22,3,22,444,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,3,23,457,8,23,3,23,459,8,23,1,23,1,23,1,24,1,24,
        1,24,5,24,466,8,24,10,24,12,24,469,9,24,1,25,3,25,472,8,25,1,25,
        3,25,475,8,25,1,25,3,25,478,8,25,1,25,3,25,481,8,25,1,25,3,25,484,
        8,25,1,25,1,25,3,25,488,8,25,1,25,1,25,1,25,3,25,493,8,25,1,26,1,
        26,1,26,3,26,498,8,26,1,26,3,26,501,8,26,1,27,1,27,1,27,3,27,506,
        8,27,1,28,1,28,3,28,510,8,28,1,28,1,28,1,29,1,29,3,29,516,8,29,1,
        29,1,29,1,29,3,29,521,8,29,5,29,523,8,29,10,29,12,29,526,9,29,1,
        30,1,30,1,30,3,30,531,8,30,1,31,1,31,1,31,3,31,536,8,31,1,31,1,31,
        1,32,3,32,541,8,32,1,32,3,32,544,8,32,1,32,3,32,547,8,32,1,33,1,
        33,1,33,5,33,552,8,33,10,33,12,33,555,9,33,1,34,1,34,1,34,3,34,560,
        8,34,1,34,1,34,1,35,1,35,3,35,566,8,35,1,35,3,35,569,8,35,1,36,1,
        36,1,36,3,36,574,8,36,1,36,1,36,1,36,1,36,3,36,580,8,36,1,37,1,37,
        3,37,584,8,37,1,38,1,38,3,38,588,8,38,1,38,1,38,1,39,1,39,1,39,5,
        39,595,8,39,10,39,12,39,598,9,39,1,40,1,40,3,40,602,8,40,1,41,3,
        41,605,8,41,1,41,3,41,608,8,41,1,41,1,41,3,41,612,8,41,1,42,1,42,
        3,42,616,8,42,1,42,1,42,1,43,1,43,3,43,622,8,43,1,43,3,43,625,8,
        43,1,43,1,43,1,43,3,43,630,8,43,1,44,1,44,1,44,3,44,635,8,44,1,44,
        3,44,638,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,
        1,48,3,48,651,8,48,1,48,1,48,1,48,1,49,3,49,657,8,49,1,49,1,49,1,
        49,1,50,1,50,1,50,5,50,665,8,50,10,50,12,50,668,9,50,1,51,1,51,1,
        51,5,51,673,8,51,10,51,12,51,676,9,51,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,3,52,687,8,52,1,52,1,52,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,
        53,708,8,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,5,54,717,8,54,10,
        54,12,54,720,9,54,1,54,1,54,1,54,3,54,725,8,54,1,54,1,54,1,54,1,
        55,1,55,1,55,5,55,733,8,55,10,55,12,55,736,9,55,1,56,1,56,1,56,1,
        56,1,56,5,56,743,8,56,10,56,12,56,746,9,56,1,56,1,56,1,56,3,56,751,
        8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,
        1,59,1,60,1,60,1,60,5,60,769,8,60,10,60,12,60,772,9,60,1,61,1,61,
        1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,
        5,63,789,8,63,10,63,12,63,792,9,63,1,64,1,64,1,64,3,64,797,8,64,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,
        811,8,66,10,66,12,66,814,9,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,
        1,67,5,67,824,8,67,10,67,12,67,827,9,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
        1,71,1,71,1,72,1,72,3,72,851,8,72,1,73,1,73,1,73,1,73,1,73,5,73,
        858,8,73,10,73,12,73,861,9,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,
        1,75,1,75,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,78,1,78,
        3,78,883,8,78,3,78,885,8,78,1,79,1,79,1,79,1,79,5,79,891,8,79,10,
        79,12,79,894,9,79,1,80,1,80,1,81,1,81,1,81,1,81,5,81,902,8,81,10,
        81,12,81,905,9,81,1,82,1,82,1,83,3,83,910,8,83,1,83,1,83,1,84,1,
        84,1,84,1,84,3,84,918,8,84,1,85,1,85,1,86,1,86,1,86,1,86,5,86,926,
        8,86,10,86,12,86,929,9,86,1,87,1,87,1,87,1,88,1,88,1,89,1,89,1,90,
        1,90,1,90,1,90,5,90,942,8,90,10,90,12,90,945,9,90,1,91,1,91,1,92,
        1,92,1,92,1,92,3,92,953,8,92,1,93,1,93,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,970,8,94,1,95,3,95,
        973,8,95,1,95,1,95,1,95,5,95,978,8,95,10,95,12,95,981,9,95,1,96,
        1,96,1,96,5,96,986,8,96,10,96,12,96,989,9,96,1,97,1,97,1,97,1,97,
        1,98,1,98,1,98,5,98,998,8,98,10,98,12,98,1001,9,98,1,99,1,99,1,100,
        1,100,1,100,1,100,1,101,1,101,1,101,1,101,3,101,1013,8,101,1,101,
        1,101,1,102,3,102,1018,8,102,1,102,1,102,3,102,1022,8,102,1,102,
        1,102,1,102,3,102,1027,8,102,5,102,1029,8,102,10,102,12,102,1032,
        9,102,1,103,1,103,3,103,1036,8,103,1,103,1,103,1,104,1,104,3,104,
        1042,8,104,1,104,1,104,1,104,3,104,1047,8,104,5,104,1049,8,104,10,
        104,12,104,1052,9,104,1,104,3,104,1055,8,104,1,105,1,105,3,105,1059,
        8,105,1,106,1,106,1,106,1,106,3,106,1065,8,106,1,106,1,106,1,107,
        1,107,1,107,5,107,1072,8,107,10,107,12,107,1075,9,107,1,108,1,108,
        1,108,1,108,3,108,1081,8,108,1,109,3,109,1084,8,109,1,109,1,109,
        3,109,1088,8,109,5,109,1090,8,109,10,109,12,109,1093,9,109,1,110,
        1,110,1,110,5,110,1098,8,110,10,110,12,110,1101,9,110,1,111,1,111,
        1,111,5,111,1106,8,111,10,111,12,111,1109,9,111,1,111,3,111,1112,
        8,111,1,112,1,112,1,112,1,113,1,113,1,114,1,114,1,114,1,114,1,115,
        1,115,1,115,5,115,1126,8,115,10,115,12,115,1129,9,115,1,116,1,116,
        3,116,1133,8,116,1,117,1,117,3,117,1137,8,117,1,118,1,118,1,118,
        1,118,5,118,1143,8,118,10,118,12,118,1146,9,118,3,118,1148,8,118,
        1,119,1,119,1,120,1,120,1,120,1,120,0,0,121,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,0,8,1,0,57,58,1,0,71,72,1,0,80,81,1,0,82,84,
        1,0,25,30,2,0,15,16,20,21,2,0,17,18,22,23,2,0,19,19,24,24,1199,0,
        247,1,0,0,0,2,261,1,0,0,0,4,267,1,0,0,0,6,295,1,0,0,0,8,311,1,0,
        0,0,10,313,1,0,0,0,12,334,1,0,0,0,14,336,1,0,0,0,16,354,1,0,0,0,
        18,356,1,0,0,0,20,365,1,0,0,0,22,373,1,0,0,0,24,376,1,0,0,0,26,392,
        1,0,0,0,28,396,1,0,0,0,30,408,1,0,0,0,32,413,1,0,0,0,34,418,1,0,
        0,0,36,424,1,0,0,0,38,426,1,0,0,0,40,429,1,0,0,0,42,437,1,0,0,0,
        44,443,1,0,0,0,46,445,1,0,0,0,48,462,1,0,0,0,50,471,1,0,0,0,52,494,
        1,0,0,0,54,502,1,0,0,0,56,507,1,0,0,0,58,515,1,0,0,0,60,527,1,0,
        0,0,62,532,1,0,0,0,64,540,1,0,0,0,66,548,1,0,0,0,68,556,1,0,0,0,
        70,563,1,0,0,0,72,579,1,0,0,0,74,583,1,0,0,0,76,585,1,0,0,0,78,591,
        1,0,0,0,80,601,1,0,0,0,82,604,1,0,0,0,84,613,1,0,0,0,86,619,1,0,
        0,0,88,631,1,0,0,0,90,639,1,0,0,0,92,643,1,0,0,0,94,646,1,0,0,0,
        96,650,1,0,0,0,98,656,1,0,0,0,100,666,1,0,0,0,102,674,1,0,0,0,104,
        686,1,0,0,0,106,707,1,0,0,0,108,711,1,0,0,0,110,734,1,0,0,0,112,
        737,1,0,0,0,114,755,1,0,0,0,116,759,1,0,0,0,118,763,1,0,0,0,120,
        770,1,0,0,0,122,773,1,0,0,0,124,779,1,0,0,0,126,785,1,0,0,0,128,
        793,1,0,0,0,130,798,1,0,0,0,132,805,1,0,0,0,134,818,1,0,0,0,136,
        831,1,0,0,0,138,835,1,0,0,0,140,839,1,0,0,0,142,842,1,0,0,0,144,
        850,1,0,0,0,146,852,1,0,0,0,148,865,1,0,0,0,150,869,1,0,0,0,152,
        873,1,0,0,0,154,875,1,0,0,0,156,877,1,0,0,0,158,886,1,0,0,0,160,
        895,1,0,0,0,162,897,1,0,0,0,164,906,1,0,0,0,166,909,1,0,0,0,168,
        913,1,0,0,0,170,919,1,0,0,0,172,921,1,0,0,0,174,930,1,0,0,0,176,
        933,1,0,0,0,178,935,1,0,0,0,180,937,1,0,0,0,182,946,1,0,0,0,184,
        948,1,0,0,0,186,954,1,0,0,0,188,969,1,0,0,0,190,972,1,0,0,0,192,
        982,1,0,0,0,194,990,1,0,0,0,196,994,1,0,0,0,198,1002,1,0,0,0,200,
        1004,1,0,0,0,202,1012,1,0,0,0,204,1017,1,0,0,0,206,1033,1,0,0,0,
        208,1041,1,0,0,0,210,1058,1,0,0,0,212,1060,1,0,0,0,214,1068,1,0,
        0,0,216,1076,1,0,0,0,218,1083,1,0,0,0,220,1094,1,0,0,0,222,1102,
        1,0,0,0,224,1113,1,0,0,0,226,1116,1,0,0,0,228,1118,1,0,0,0,230,1122,
        1,0,0,0,232,1132,1,0,0,0,234,1134,1,0,0,0,236,1147,1,0,0,0,238,1149,
        1,0,0,0,240,1151,1,0,0,0,242,244,5,65,0,0,243,245,3,192,96,0,244,
        243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,248,5,5,0,0,247,
        242,1,0,0,0,247,248,1,0,0,0,248,257,1,0,0,0,249,251,5,66,0,0,250,
        249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,3,2,1,0,253,
        254,5,5,0,0,254,256,1,0,0,0,255,250,1,0,0,0,256,259,1,0,0,0,257,
        255,1,0,0,0,257,258,1,0,0,0,258,1,1,0,0,0,259,257,1,0,0,0,260,262,
        5,67,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,
        3,4,2,0,264,265,3,6,3,0,265,3,1,0,0,0,266,268,5,46,0,0,267,266,1,
        0,0,0,267,268,1,0,0,0,268,290,1,0,0,0,269,291,5,49,0,0,270,291,5,
        50,0,0,271,273,5,47,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,
        1,0,0,0,274,291,5,52,0,0,275,291,5,54,0,0,276,278,5,48,0,0,277,276,
        1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,291,5,55,0,0,280,291,
        5,53,0,0,281,291,5,56,0,0,282,284,7,0,0,0,283,282,1,0,0,0,283,284,
        1,0,0,0,284,286,1,0,0,0,285,287,5,47,0,0,286,285,1,0,0,0,286,287,
        1,0,0,0,287,288,1,0,0,0,288,291,5,51,0,0,289,291,5,47,0,0,290,269,
        1,0,0,0,290,270,1,0,0,0,290,272,1,0,0,0,290,275,1,0,0,0,290,277,
        1,0,0,0,290,280,1,0,0,0,290,281,1,0,0,0,290,283,1,0,0,0,290,289,
        1,0,0,0,291,5,1,0,0,0,292,296,3,8,4,0,293,296,3,12,6,0,294,296,3,
        14,7,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,7,1,0,
        0,0,297,298,5,93,0,0,298,299,3,236,118,0,299,300,3,24,12,0,300,301,
        3,10,5,0,301,312,1,0,0,0,302,303,5,68,0,0,303,305,5,93,0,0,304,306,
        3,76,38,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,
        3,236,118,0,308,309,3,24,12,0,309,310,3,10,5,0,310,312,1,0,0,0,311,
        297,1,0,0,0,311,302,1,0,0,0,312,9,1,0,0,0,313,314,5,59,0,0,314,315,
        5,93,0,0,315,11,1,0,0,0,316,317,5,93,0,0,317,318,5,13,0,0,318,319,
        3,16,8,0,319,321,3,190,95,0,320,322,3,228,114,0,321,320,1,0,0,0,
        321,322,1,0,0,0,322,324,1,0,0,0,323,325,3,76,38,0,324,323,1,0,0,
        0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,3,234,117,0,327,335,1,
        0,0,0,328,329,5,93,0,0,329,330,5,13,0,0,330,331,5,70,0,0,331,332,
        3,18,9,0,332,333,3,234,117,0,333,335,1,0,0,0,334,316,1,0,0,0,334,
        328,1,0,0,0,335,13,1,0,0,0,336,337,5,93,0,0,337,338,5,13,0,0,338,
        339,5,60,0,0,339,340,5,7,0,0,340,341,3,190,95,0,341,342,5,3,0,0,
        342,347,5,93,0,0,343,344,5,3,0,0,344,346,5,93,0,0,345,343,1,0,0,
        0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,
        0,349,347,1,0,0,0,350,351,5,8,0,0,351,352,3,234,117,0,352,15,1,0,
        0,0,353,355,7,1,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,17,1,0,0,
        0,356,361,5,7,0,0,357,359,3,20,10,0,358,357,1,0,0,0,358,359,1,0,
        0,0,359,362,1,0,0,0,360,362,5,6,0,0,361,358,1,0,0,0,361,360,1,0,
        0,0,362,363,1,0,0,0,363,364,5,8,0,0,364,19,1,0,0,0,365,370,3,22,
        11,0,366,367,5,3,0,0,367,369,3,22,11,0,368,366,1,0,0,0,369,372,1,
        0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,21,1,0,0,0,372,370,1,0,
        0,0,373,374,5,93,0,0,374,375,3,234,117,0,375,23,1,0,0,0,376,383,
        3,36,18,0,377,382,3,38,19,0,378,382,3,40,20,0,379,382,3,96,48,0,
        380,382,3,98,49,0,381,377,1,0,0,0,381,378,1,0,0,0,381,379,1,0,0,
        0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,
        0,384,387,1,0,0,0,385,383,1,0,0,0,386,388,3,28,14,0,387,386,1,0,
        0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,391,3,26,13,0,390,389,1,
        0,0,0,390,391,1,0,0,0,391,25,1,0,0,0,392,393,5,86,0,0,393,394,3,
        76,38,0,394,395,5,5,0,0,395,27,1,0,0,0,396,398,5,87,0,0,397,399,
        3,30,15,0,398,397,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,402,
        3,32,16,0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,
        3,240,120,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,
        407,5,5,0,0,407,29,1,0,0,0,408,409,5,90,0,0,409,31,1,0,0,0,410,411,
        3,204,102,0,411,412,5,13,0,0,412,414,1,0,0,0,413,410,1,0,0,0,413,
        414,1,0,0,0,414,415,1,0,0,0,415,416,5,93,0,0,416,417,3,34,17,0,417,
        33,1,0,0,0,418,420,5,7,0,0,419,421,3,220,110,0,420,419,1,0,0,0,420,
        421,1,0,0,0,421,422,1,0,0,0,422,423,5,8,0,0,423,35,1,0,0,0,424,425,
        3,42,21,0,425,37,1,0,0,0,426,427,5,73,0,0,427,428,3,42,21,0,428,
        39,1,0,0,0,429,430,5,74,0,0,430,431,3,42,21,0,431,41,1,0,0,0,432,
        433,3,44,22,0,433,434,5,5,0,0,434,436,1,0,0,0,435,432,1,0,0,0,436,
        439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,43,1,0,0,0,439,437,
        1,0,0,0,440,444,3,46,23,0,441,444,3,52,26,0,442,444,3,50,25,0,443,
        440,1,0,0,0,443,441,1,0,0,0,443,442,1,0,0,0,444,45,1,0,0,0,445,458,
        5,69,0,0,446,447,5,93,0,0,447,448,5,13,0,0,448,459,3,192,96,0,449,
        456,3,192,96,0,450,457,5,22,0,0,451,452,5,4,0,0,452,453,5,9,0,0,
        453,454,3,48,24,0,454,455,5,10,0,0,455,457,1,0,0,0,456,450,1,0,0,
        0,456,451,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,446,1,0,0,
        0,458,449,1,0,0,0,459,460,1,0,0,0,460,461,3,234,117,0,461,47,1,0,
        0,0,462,467,5,93,0,0,463,464,5,3,0,0,464,466,5,93,0,0,465,463,1,
        0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,49,1,0,
        0,0,469,467,1,0,0,0,470,472,5,75,0,0,471,470,1,0,0,0,471,472,1,0,
        0,0,472,474,1,0,0,0,473,475,5,66,0,0,474,473,1,0,0,0,474,475,1,0,
        0,0,475,477,1,0,0,0,476,478,5,76,0,0,477,476,1,0,0,0,477,478,1,0,
        0,0,478,480,1,0,0,0,479,481,5,77,0,0,480,479,1,0,0,0,480,481,1,0,
        0,0,481,483,1,0,0,0,482,484,5,78,0,0,483,482,1,0,0,0,483,484,1,0,
        0,0,484,487,1,0,0,0,485,488,3,2,1,0,486,488,3,62,31,0,487,485,1,
        0,0,0,487,486,1,0,0,0,488,492,1,0,0,0,489,490,3,54,27,0,490,491,
        3,234,117,0,491,493,1,0,0,0,492,489,1,0,0,0,492,493,1,0,0,0,493,
        51,1,0,0,0,494,495,5,68,0,0,495,497,3,190,95,0,496,498,3,56,28,0,
        497,496,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,0,499,501,3,240,120,
        0,500,499,1,0,0,0,500,501,1,0,0,0,501,53,1,0,0,0,502,503,5,79,0,
        0,503,505,3,190,95,0,504,506,3,76,38,0,505,504,1,0,0,0,505,506,1,
        0,0,0,506,55,1,0,0,0,507,509,5,7,0,0,508,510,3,58,29,0,509,508,1,
        0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,5,8,0,0,512,57,1,0,
        0,0,513,516,3,80,40,0,514,516,3,60,30,0,515,513,1,0,0,0,515,514,
        1,0,0,0,516,524,1,0,0,0,517,520,5,3,0,0,518,521,3,80,40,0,519,521,
        3,60,30,0,520,518,1,0,0,0,520,519,1,0,0,0,521,523,1,0,0,0,522,517,
        1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,59,1,
        0,0,0,526,524,1,0,0,0,527,530,5,44,0,0,528,531,3,140,70,0,529,531,
        5,93,0,0,530,528,1,0,0,0,530,529,1,0,0,0,531,61,1,0,0,0,532,533,
        3,64,32,0,533,535,3,190,95,0,534,536,3,228,114,0,535,534,1,0,0,0,
        535,536,1,0,0,0,536,537,1,0,0,0,537,538,3,66,33,0,538,63,1,0,0,0,
        539,541,7,2,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,
        542,544,7,3,0,0,543,542,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,
        545,547,7,1,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,65,1,0,0,0,548,
        553,3,68,34,0,549,550,5,3,0,0,550,552,3,68,34,0,551,549,1,0,0,0,
        552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,67,1,0,0,0,555,
        553,1,0,0,0,556,559,3,70,35,0,557,558,5,36,0,0,558,560,3,144,72,
        0,559,557,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,3,234,
        117,0,562,69,1,0,0,0,563,565,5,93,0,0,564,566,3,228,114,0,565,564,
        1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,569,3,72,36,0,568,567,
        1,0,0,0,568,569,1,0,0,0,569,71,1,0,0,0,570,573,3,76,38,0,571,572,
        5,13,0,0,572,574,3,74,37,0,573,571,1,0,0,0,573,574,1,0,0,0,574,580,
        1,0,0,0,575,576,5,13,0,0,576,580,3,74,37,0,577,578,5,14,0,0,578,
        580,3,74,37,0,579,570,1,0,0,0,579,575,1,0,0,0,579,577,1,0,0,0,580,
        73,1,0,0,0,581,584,3,144,72,0,582,584,5,44,0,0,583,581,1,0,0,0,583,
        582,1,0,0,0,584,75,1,0,0,0,585,587,5,7,0,0,586,588,3,78,39,0,587,
        586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,590,5,8,0,0,590,
        77,1,0,0,0,591,596,3,80,40,0,592,593,5,3,0,0,593,595,3,80,40,0,594,
        592,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,
        79,1,0,0,0,598,596,1,0,0,0,599,602,3,82,41,0,600,602,3,86,43,0,601,
        599,1,0,0,0,601,600,1,0,0,0,602,81,1,0,0,0,603,605,5,85,0,0,604,
        603,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,5,66,0,0,607,
        606,1,0,0,0,607,608,1,0,0,0,608,611,1,0,0,0,609,612,3,84,42,0,610,
        612,3,88,44,0,611,609,1,0,0,0,611,610,1,0,0,0,612,83,1,0,0,0,613,
        615,3,192,96,0,614,616,3,72,36,0,615,614,1,0,0,0,615,616,1,0,0,0,
        616,617,1,0,0,0,617,618,3,236,118,0,618,85,1,0,0,0,619,621,5,75,
        0,0,620,622,5,85,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,624,1,0,
        0,0,623,625,5,66,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,629,1,0,
        0,0,626,630,3,94,47,0,627,630,3,90,45,0,628,630,3,88,44,0,629,626,
        1,0,0,0,629,627,1,0,0,0,629,628,1,0,0,0,630,87,1,0,0,0,631,634,5,
        78,0,0,632,635,3,94,47,0,633,635,3,90,45,0,634,632,1,0,0,0,634,633,
        1,0,0,0,635,637,1,0,0,0,636,638,3,54,27,0,637,636,1,0,0,0,637,638,
        1,0,0,0,638,89,1,0,0,0,639,640,3,64,32,0,640,641,3,190,95,0,641,
        642,3,92,46,0,642,91,1,0,0,0,643,644,3,70,35,0,644,645,3,234,117,
        0,645,93,1,0,0,0,646,647,3,4,2,0,647,648,3,12,6,0,648,95,1,0,0,0,
        649,651,5,62,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,
        652,653,5,63,0,0,653,654,3,100,50,0,654,97,1,0,0,0,655,657,5,62,
        0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,659,5,64,
        0,0,659,660,3,102,51,0,660,99,1,0,0,0,661,662,3,104,52,0,662,663,
        5,5,0,0,663,665,1,0,0,0,664,661,1,0,0,0,665,668,1,0,0,0,666,664,
        1,0,0,0,666,667,1,0,0,0,667,101,1,0,0,0,668,666,1,0,0,0,669,670,
        3,106,53,0,670,671,5,5,0,0,671,673,1,0,0,0,672,669,1,0,0,0,673,676,
        1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,103,1,0,0,0,676,674,
        1,0,0,0,677,678,3,156,78,0,678,679,5,13,0,0,679,680,3,144,72,0,680,
        687,1,0,0,0,681,687,3,108,54,0,682,687,3,122,61,0,683,687,3,140,
        70,0,684,687,3,132,66,0,685,687,3,202,101,0,686,677,1,0,0,0,686,
        681,1,0,0,0,686,682,1,0,0,0,686,683,1,0,0,0,686,684,1,0,0,0,686,
        685,1,0,0,0,687,688,1,0,0,0,688,689,3,234,117,0,689,105,1,0,0,0,
        690,691,3,204,102,0,691,692,5,14,0,0,692,693,3,144,72,0,693,708,
        1,0,0,0,694,708,3,202,101,0,695,696,5,7,0,0,696,697,3,218,109,0,
        697,698,5,8,0,0,698,699,5,14,0,0,699,700,3,202,101,0,700,708,1,0,
        0,0,701,708,5,44,0,0,702,708,5,45,0,0,703,708,3,112,56,0,704,708,
        3,124,62,0,705,708,3,130,65,0,706,708,3,134,67,0,707,690,1,0,0,0,
        707,694,1,0,0,0,707,695,1,0,0,0,707,701,1,0,0,0,707,702,1,0,0,0,
        707,703,1,0,0,0,707,704,1,0,0,0,707,705,1,0,0,0,707,706,1,0,0,0,
        708,709,1,0,0,0,709,710,3,234,117,0,710,107,1,0,0,0,711,712,3,114,
        57,0,712,718,3,110,55,0,713,714,3,116,58,0,714,715,3,110,55,0,715,
        717,1,0,0,0,716,713,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,
        719,1,0,0,0,719,724,1,0,0,0,720,718,1,0,0,0,721,722,3,118,59,0,722,
        723,3,110,55,0,723,725,1,0,0,0,724,721,1,0,0,0,724,725,1,0,0,0,725,
        726,1,0,0,0,726,727,5,59,0,0,727,728,5,36,0,0,728,109,1,0,0,0,729,
        730,3,104,52,0,730,731,5,5,0,0,731,733,1,0,0,0,732,729,1,0,0,0,733,
        736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,111,1,0,0,0,736,
        734,1,0,0,0,737,738,3,114,57,0,738,744,3,120,60,0,739,740,3,116,
        58,0,740,741,3,120,60,0,741,743,1,0,0,0,742,739,1,0,0,0,743,746,
        1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,750,1,0,0,0,746,744,
        1,0,0,0,747,748,3,118,59,0,748,749,3,120,60,0,749,751,1,0,0,0,750,
        747,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,753,5,59,0,0,753,
        754,5,36,0,0,754,113,1,0,0,0,755,756,5,36,0,0,756,757,3,144,72,0,
        757,758,5,39,0,0,758,115,1,0,0,0,759,760,5,38,0,0,760,761,3,144,
        72,0,761,762,5,39,0,0,762,117,1,0,0,0,763,764,5,37,0,0,764,119,1,
        0,0,0,765,766,3,106,53,0,766,767,5,5,0,0,767,769,1,0,0,0,768,765,
        1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,121,
        1,0,0,0,772,770,1,0,0,0,773,774,3,224,112,0,774,775,5,43,0,0,775,
        776,3,110,55,0,776,777,5,59,0,0,777,778,5,35,0,0,778,123,1,0,0,0,
        779,780,3,224,112,0,780,781,5,43,0,0,781,782,3,120,60,0,782,783,
        5,59,0,0,783,784,5,35,0,0,784,125,1,0,0,0,785,790,3,128,64,0,786,
        787,5,3,0,0,787,789,3,128,64,0,788,786,1,0,0,0,789,792,1,0,0,0,790,
        788,1,0,0,0,790,791,1,0,0,0,791,127,1,0,0,0,792,790,1,0,0,0,793,
        796,5,93,0,0,794,795,5,34,0,0,795,797,3,144,72,0,796,794,1,0,0,0,
        796,797,1,0,0,0,797,129,1,0,0,0,798,799,5,42,0,0,799,800,3,144,72,
        0,800,801,5,43,0,0,801,802,3,120,60,0,802,803,5,59,0,0,803,804,5,
        42,0,0,804,131,1,0,0,0,805,806,3,136,68,0,806,812,3,110,55,0,807,
        808,3,138,69,0,808,809,3,110,55,0,809,811,1,0,0,0,810,807,1,0,0,
        0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,
        0,814,812,1,0,0,0,815,816,5,59,0,0,816,817,5,40,0,0,817,133,1,0,
        0,0,818,819,3,136,68,0,819,825,3,120,60,0,820,821,3,138,69,0,821,
        822,3,120,60,0,822,824,1,0,0,0,823,820,1,0,0,0,824,827,1,0,0,0,825,
        823,1,0,0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,1,0,0,0,828,
        829,5,59,0,0,829,830,5,40,0,0,830,135,1,0,0,0,831,832,5,40,0,0,832,
        833,3,144,72,0,833,834,5,39,0,0,834,137,1,0,0,0,835,836,5,41,0,0,
        836,837,3,144,72,0,837,838,5,39,0,0,838,139,1,0,0,0,839,840,5,61,
        0,0,840,841,3,142,71,0,841,141,1,0,0,0,842,843,5,7,0,0,843,844,3,
        204,102,0,844,845,5,3,0,0,845,846,3,204,102,0,846,847,5,8,0,0,847,
        143,1,0,0,0,848,851,3,156,78,0,849,851,3,146,73,0,850,848,1,0,0,
        0,850,849,1,0,0,0,851,145,1,0,0,0,852,853,3,148,74,0,853,859,3,154,
        77,0,854,855,3,150,75,0,855,856,3,154,77,0,856,858,1,0,0,0,857,854,
        1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,862,
        1,0,0,0,861,859,1,0,0,0,862,863,3,152,76,0,863,864,3,154,77,0,864,
        147,1,0,0,0,865,866,5,36,0,0,866,867,3,144,72,0,867,868,5,39,0,0,
        868,149,1,0,0,0,869,870,5,38,0,0,870,871,3,144,72,0,871,872,5,39,
        0,0,872,151,1,0,0,0,873,874,5,37,0,0,874,153,1,0,0,0,875,876,3,144,
        72,0,876,155,1,0,0,0,877,884,3,158,79,0,878,879,5,6,0,0,879,882,
        3,158,79,0,880,881,5,6,0,0,881,883,3,158,79,0,882,880,1,0,0,0,882,
        883,1,0,0,0,883,885,1,0,0,0,884,878,1,0,0,0,884,885,1,0,0,0,885,
        157,1,0,0,0,886,892,3,162,81,0,887,888,3,160,80,0,888,889,3,162,
        81,0,889,891,1,0,0,0,890,887,1,0,0,0,891,894,1,0,0,0,892,890,1,0,
        0,0,892,893,1,0,0,0,893,159,1,0,0,0,894,892,1,0,0,0,895,896,5,33,
        0,0,896,161,1,0,0,0,897,903,3,166,83,0,898,899,3,164,82,0,899,900,
        3,166,83,0,900,902,1,0,0,0,901,898,1,0,0,0,902,905,1,0,0,0,903,901,
        1,0,0,0,903,904,1,0,0,0,904,163,1,0,0,0,905,903,1,0,0,0,906,907,
        5,32,0,0,907,165,1,0,0,0,908,910,5,31,0,0,909,908,1,0,0,0,909,910,
        1,0,0,0,910,911,1,0,0,0,911,912,3,168,84,0,912,167,1,0,0,0,913,917,
        3,172,86,0,914,915,3,170,85,0,915,916,3,172,86,0,916,918,1,0,0,0,
        917,914,1,0,0,0,917,918,1,0,0,0,918,169,1,0,0,0,919,920,7,4,0,0,
        920,171,1,0,0,0,921,927,3,180,90,0,922,923,3,178,89,0,923,924,3,
        180,90,0,924,926,1,0,0,0,925,922,1,0,0,0,926,929,1,0,0,0,927,925,
        1,0,0,0,927,928,1,0,0,0,928,173,1,0,0,0,929,927,1,0,0,0,930,931,
        3,178,89,0,931,932,3,176,88,0,932,175,1,0,0,0,933,934,3,188,94,0,
        934,177,1,0,0,0,935,936,7,5,0,0,936,179,1,0,0,0,937,943,3,184,92,
        0,938,939,3,182,91,0,939,940,3,184,92,0,940,942,1,0,0,0,941,938,
        1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,181,
        1,0,0,0,945,943,1,0,0,0,946,947,7,6,0,0,947,183,1,0,0,0,948,952,
        3,188,94,0,949,950,3,186,93,0,950,951,3,188,94,0,951,953,1,0,0,0,
        952,949,1,0,0,0,952,953,1,0,0,0,953,185,1,0,0,0,954,955,7,7,0,0,
        955,187,1,0,0,0,956,970,5,91,0,0,957,970,5,90,0,0,958,970,5,92,0,
        0,959,970,3,174,87,0,960,970,3,202,101,0,961,970,3,204,102,0,962,
        963,5,7,0,0,963,964,3,218,109,0,964,965,5,8,0,0,965,970,1,0,0,0,
        966,970,3,194,97,0,967,970,3,200,100,0,968,970,5,59,0,0,969,956,
        1,0,0,0,969,957,1,0,0,0,969,958,1,0,0,0,969,959,1,0,0,0,969,960,
        1,0,0,0,969,961,1,0,0,0,969,962,1,0,0,0,969,966,1,0,0,0,969,967,
        1,0,0,0,969,968,1,0,0,0,970,189,1,0,0,0,971,973,5,4,0,0,972,971,
        1,0,0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,979,5,93,0,0,975,976,
        5,4,0,0,976,978,5,93,0,0,977,975,1,0,0,0,978,981,1,0,0,0,979,977,
        1,0,0,0,979,980,1,0,0,0,980,191,1,0,0,0,981,979,1,0,0,0,982,987,
        5,93,0,0,983,984,5,4,0,0,984,986,5,93,0,0,985,983,1,0,0,0,986,989,
        1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,193,1,0,0,0,989,987,
        1,0,0,0,990,991,5,11,0,0,991,992,3,196,98,0,992,993,5,12,0,0,993,
        195,1,0,0,0,994,999,3,198,99,0,995,996,5,5,0,0,996,998,3,198,99,
        0,997,995,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,1000,1,0,
        0,0,1000,197,1,0,0,0,1001,999,1,0,0,0,1002,1003,3,220,110,0,1003,
        199,1,0,0,0,1004,1005,5,9,0,0,1005,1006,3,222,111,0,1006,1007,5,
        10,0,0,1007,201,1,0,0,0,1008,1013,3,204,102,0,1009,1013,5,60,0,0,
        1010,1013,5,62,0,0,1011,1013,5,57,0,0,1012,1008,1,0,0,0,1012,1009,
        1,0,0,0,1012,1010,1,0,0,0,1012,1011,1,0,0,0,1013,1014,1,0,0,0,1014,
        1015,3,206,103,0,1015,203,1,0,0,0,1016,1018,5,4,0,0,1017,1016,1,
        0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1021,5,93,0,0,1020,
        1022,3,228,114,0,1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,1030,1,
        0,0,0,1023,1024,5,4,0,0,1024,1026,5,93,0,0,1025,1027,3,228,114,0,
        1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,1023,
        1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,
        205,1,0,0,0,1032,1030,1,0,0,0,1033,1035,5,7,0,0,1034,1036,3,208,
        104,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,
        1038,5,8,0,0,1038,207,1,0,0,0,1039,1042,3,210,105,0,1040,1042,3,
        216,108,0,1041,1039,1,0,0,0,1041,1040,1,0,0,0,1042,1054,1,0,0,0,
        1043,1046,5,3,0,0,1044,1047,3,210,105,0,1045,1047,3,216,108,0,1046,
        1044,1,0,0,0,1046,1045,1,0,0,0,1047,1049,1,0,0,0,1048,1043,1,0,0,
        0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1055,
        1,0,0,0,1052,1050,1,0,0,0,1053,1055,3,224,112,0,1054,1050,1,0,0,
        0,1054,1053,1,0,0,0,1055,209,1,0,0,0,1056,1059,3,212,106,0,1057,
        1059,3,144,72,0,1058,1056,1,0,0,0,1058,1057,1,0,0,0,1059,211,1,0,
        0,0,1060,1061,5,51,0,0,1061,1062,3,190,95,0,1062,1064,5,7,0,0,1063,
        1065,3,214,107,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,
        0,0,0,1066,1067,5,8,0,0,1067,213,1,0,0,0,1068,1073,3,216,108,0,1069,
        1070,5,3,0,0,1070,1072,3,216,108,0,1071,1069,1,0,0,0,1072,1075,1,
        0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,215,1,0,0,0,1075,
        1073,1,0,0,0,1076,1077,5,93,0,0,1077,1080,5,13,0,0,1078,1081,3,212,
        106,0,1079,1081,3,144,72,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,
        217,1,0,0,0,1082,1084,3,144,72,0,1083,1082,1,0,0,0,1083,1084,1,0,
        0,0,1084,1091,1,0,0,0,1085,1087,5,3,0,0,1086,1088,3,144,72,0,1087,
        1086,1,0,0,0,1087,1088,1,0,0,0,1088,1090,1,0,0,0,1089,1085,1,0,0,
        0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,219,
        1,0,0,0,1093,1091,1,0,0,0,1094,1099,3,144,72,0,1095,1096,5,3,0,0,
        1096,1098,3,144,72,0,1097,1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,
        1,0,0,0,1099,1100,1,0,0,0,1100,221,1,0,0,0,1101,1099,1,0,0,0,1102,
        1111,3,226,113,0,1103,1104,5,3,0,0,1104,1106,3,226,113,0,1105,1103,
        1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,
        1112,1,0,0,0,1109,1107,1,0,0,0,1110,1112,3,224,112,0,1111,1107,1,
        0,0,0,1111,1110,1,0,0,0,1112,223,1,0,0,0,1113,1114,5,35,0,0,1114,
        1115,3,126,63,0,1115,225,1,0,0,0,1116,1117,3,144,72,0,1117,227,1,
        0,0,0,1118,1119,5,11,0,0,1119,1120,3,230,115,0,1120,1121,5,12,0,
        0,1121,229,1,0,0,0,1122,1127,3,232,116,0,1123,1124,5,3,0,0,1124,
        1126,3,232,116,0,1125,1123,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,
        0,0,0,1127,1128,1,0,0,0,1128,231,1,0,0,0,1129,1127,1,0,0,0,1130,
        1133,5,6,0,0,1131,1133,3,144,72,0,1132,1130,1,0,0,0,1132,1131,1,
        0,0,0,1133,233,1,0,0,0,1134,1136,3,236,118,0,1135,1137,3,240,120,
        0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,235,1,0,0,0,1138,1144,
        5,90,0,0,1139,1140,3,238,119,0,1140,1141,5,90,0,0,1141,1143,1,0,
        0,0,1142,1139,1,0,0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,
        1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1147,1138,1,0,0,0,1147,
        1148,1,0,0,0,1148,237,1,0,0,0,1149,1150,5,15,0,0,1150,239,1,0,0,
        0,1151,1152,5,86,0,0,1152,1153,3,76,38,0,1153,241,1,0,0,0,131,244,
        247,250,257,261,267,272,277,283,286,290,295,305,311,321,324,334,
        347,354,358,361,370,381,383,387,390,398,401,404,413,420,437,443,
        456,458,467,471,474,477,480,483,487,492,497,500,505,509,515,520,
        524,530,535,540,543,546,553,559,565,568,573,579,583,587,596,601,
        604,607,611,615,621,624,629,634,637,650,656,666,674,686,707,718,
        724,734,744,750,770,790,796,812,825,850,859,882,884,892,903,909,
        917,927,943,952,969,972,979,987,999,1012,1017,1021,1026,1030,1035,
        1041,1046,1050,1054,1058,1064,1073,1080,1083,1087,1091,1099,1107,
        1111,1127,1132,1136,1144,1147
    ]

class Modelica ( Parser ):

    grammarFileName = "Modelica.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'\"'", "','", "'.'", "';'", 
                     "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", 
                     "':='", "'+'", "'-'", "'*'", "'/'", "'^'", "'.+'", 
                     "'.-'", "'.*'", "'./'", "'.^'", "'>'", "'>='", "'<'", 
                     "'<='", "'<>'", "'=='", "'not'", "'and'", "'or'", "'in'", 
                     "'for'", "'if'", "'else'", "'elseif'", "'then'", "'when'", 
                     "'elsewhen'", "'while'", "'loop'", "'break'", "'return'", 
                     "'partial'", "'operator'", "'expandable'", "'class'", 
                     "'model'", "'function'", "'record'", "'type'", "'block'", 
                     "'connector'", "'package'", "'pure'", "'impure'", "'end'", 
                     "'der'", "'connect'", "'initial'", "'equation'", "'algorithm'", 
                     "'within'", "'final'", "'encapsulated'", "'extends'", 
                     "'import'", "'enumeration'", "'input'", "'output'", 
                     "'public'", "'protected'", "'redeclare'", "'inner'", 
                     "'outer'", "'replaceable'", "'constrainedby'", "'flow'", 
                     "'stream'", "'discrete'", "'parameter'", "'constant'", 
                     "'each'", "'annotation'", "'external'" ]

    symbolicNames = [ "<INVALID>", "WS", "DQUOTE", "COMMA", "DOT", "SEMICOLON", 
                      "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACK", 
                      "RBRACK", "EQUAL", "ASSIGN", "PLUS", "MINUS", "STAR", 
                      "SLASH", "FLEX", "DOTPLUS", "DOTMINUS", "DOTSTAR", 
                      "DOTSLASH", "DOTFLEX", "GRE", "GEQ", "LES", "LEQ", 
                      "NEQ", "EEQ", "NOT", "AND", "OR", "IN", "FOR", "IF", 
                      "ELSE", "ELSEIF", "THEN", "WHEN", "ELSEWHEN", "WHILE", 
                      "LOOP", "BREAK", "RETURN", "PARTIAL", "OPERATOR", 
                      "EXPANDABLE", "CLASS", "MODEL", "FUNCTION", "RECORD", 
                      "TYPE", "BLOCK", "CONNECTOR", "PACKAGE", "PURE", "IMPURE", 
                      "END", "DER", "CONNECT", "INITIAL", "EQUATION", "ALGORITHM", 
                      "WITHIN", "FINAL", "ENCAPSULATED", "EXTENDS", "IMPORT", 
                      "ENUMERATION", "INPUT", "OUTPUT", "PUBLIC", "PROTECTED", 
                      "REDECLARE", "INNER", "OUTER", "REPLACEABLE", "CONSTRAINEDBY", 
                      "FLOW", "STREAM", "DISCRETE", "PARAMETER", "CONSTANT", 
                      "EACH", "ANNOTATION", "EXTERNAL", "BLOCK_COMMENT", 
                      "LINE_COMMENT", "STRING", "UNUM", "BOOL", "IDENT" ]

    RULE_stored_definition = 0
    RULE_class_definition = 1
    RULE_class_prefixes = 2
    RULE_class_specifier = 3
    RULE_long_class_specifier = 4
    RULE_end_clause = 5
    RULE_short_class_specifier = 6
    RULE_der_class_specifier = 7
    RULE_base_prefix = 8
    RULE_enumerations = 9
    RULE_enum_list = 10
    RULE_enumeration_literal = 11
    RULE_composition = 12
    RULE_class_annotation = 13
    RULE_external_element = 14
    RULE_language_specification = 15
    RULE_external_function_call = 16
    RULE_external_function_args = 17
    RULE_initial_element_list = 18
    RULE_public_element_list = 19
    RULE_protected_element_list = 20
    RULE_element_list = 21
    RULE_element = 22
    RULE_import_clause = 23
    RULE_import_list = 24
    RULE_declaration_clause = 25
    RULE_extends_clause = 26
    RULE_constraining_clause = 27
    RULE_inheritance_modification = 28
    RULE_inheritance_modification_list = 29
    RULE_inheritance_modifier = 30
    RULE_component_clause = 31
    RULE_type_prefix = 32
    RULE_component_list = 33
    RULE_component_declaration = 34
    RULE_declaration = 35
    RULE_modification = 36
    RULE_modification_expression = 37
    RULE_class_modification = 38
    RULE_argument_list = 39
    RULE_argument = 40
    RULE_element_modification_or_replaceable = 41
    RULE_element_modification = 42
    RULE_element_redeclaration = 43
    RULE_element_replaceable = 44
    RULE_short_component_clause = 45
    RULE_short_component_declaration = 46
    RULE_short_definition = 47
    RULE_equation_section = 48
    RULE_algorithm_section = 49
    RULE_equation_list = 50
    RULE_statement_list = 51
    RULE_equation = 52
    RULE_statement = 53
    RULE_if_equation = 54
    RULE_conditional_equations = 55
    RULE_if_statement = 56
    RULE_if_branch = 57
    RULE_elseif_branch = 58
    RULE_else_branch = 59
    RULE_conditional_statements = 60
    RULE_for_equation = 61
    RULE_for_statement = 62
    RULE_for_indices = 63
    RULE_for_index = 64
    RULE_while_statement = 65
    RULE_when_equation = 66
    RULE_when_statement = 67
    RULE_when_branch = 68
    RULE_elsewhen_branch = 69
    RULE_connect_equation = 70
    RULE_connected_components = 71
    RULE_expression = 72
    RULE_if_expression = 73
    RULE_if_eval = 74
    RULE_elseif_eval = 75
    RULE_else_eval = 76
    RULE_conditional_expression = 77
    RULE_simple_expression = 78
    RULE_logical_expression = 79
    RULE_or_operator = 80
    RULE_logical_term = 81
    RULE_and_operator = 82
    RULE_logical_factor = 83
    RULE_relation = 84
    RULE_relational_operator = 85
    RULE_arithmetic_expression = 86
    RULE_unary_expression = 87
    RULE_unary_operand = 88
    RULE_add_operator = 89
    RULE_term = 90
    RULE_mul_operator = 91
    RULE_factor = 92
    RULE_exp_operator = 93
    RULE_primary = 94
    RULE_type_specifier = 95
    RULE_name = 96
    RULE_matrix = 97
    RULE_matrix_arguments = 98
    RULE_matrix_row = 99
    RULE_array = 100
    RULE_function_call = 101
    RULE_component_reference = 102
    RULE_function_call_args = 103
    RULE_function_arguments = 104
    RULE_function_argument = 105
    RULE_function_partial_application = 106
    RULE_named_arguments = 107
    RULE_named_argument = 108
    RULE_output_expression_list = 109
    RULE_expression_list = 110
    RULE_array_arguments = 111
    RULE_for_initializer = 112
    RULE_array_argument = 113
    RULE_array_subscripts = 114
    RULE_subscript_list = 115
    RULE_subscript = 116
    RULE_description = 117
    RULE_description_string = 118
    RULE_cat_operator = 119
    RULE_annotation = 120

    ruleNames =  [ "stored_definition", "class_definition", "class_prefixes", 
                   "class_specifier", "long_class_specifier", "end_clause", 
                   "short_class_specifier", "der_class_specifier", "base_prefix", 
                   "enumerations", "enum_list", "enumeration_literal", "composition", 
                   "class_annotation", "external_element", "language_specification", 
                   "external_function_call", "external_function_args", "initial_element_list", 
                   "public_element_list", "protected_element_list", "element_list", 
                   "element", "import_clause", "import_list", "declaration_clause", 
                   "extends_clause", "constraining_clause", "inheritance_modification", 
                   "inheritance_modification_list", "inheritance_modifier", 
                   "component_clause", "type_prefix", "component_list", 
                   "component_declaration", "declaration", "modification", 
                   "modification_expression", "class_modification", "argument_list", 
                   "argument", "element_modification_or_replaceable", "element_modification", 
                   "element_redeclaration", "element_replaceable", "short_component_clause", 
                   "short_component_declaration", "short_definition", "equation_section", 
                   "algorithm_section", "equation_list", "statement_list", 
                   "equation", "statement", "if_equation", "conditional_equations", 
                   "if_statement", "if_branch", "elseif_branch", "else_branch", 
                   "conditional_statements", "for_equation", "for_statement", 
                   "for_indices", "for_index", "while_statement", "when_equation", 
                   "when_statement", "when_branch", "elsewhen_branch", "connect_equation", 
                   "connected_components", "expression", "if_expression", 
                   "if_eval", "elseif_eval", "else_eval", "conditional_expression", 
                   "simple_expression", "logical_expression", "or_operator", 
                   "logical_term", "and_operator", "logical_factor", "relation", 
                   "relational_operator", "arithmetic_expression", "unary_expression", 
                   "unary_operand", "add_operator", "term", "mul_operator", 
                   "factor", "exp_operator", "primary", "type_specifier", 
                   "name", "matrix", "matrix_arguments", "matrix_row", "array", 
                   "function_call", "component_reference", "function_call_args", 
                   "function_arguments", "function_argument", "function_partial_application", 
                   "named_arguments", "named_argument", "output_expression_list", 
                   "expression_list", "array_arguments", "for_initializer", 
                   "array_argument", "array_subscripts", "subscript_list", 
                   "subscript", "description", "description_string", "cat_operator", 
                   "annotation" ]

    EOF = Token.EOF
    WS=1
    DQUOTE=2
    COMMA=3
    DOT=4
    SEMICOLON=5
    COLON=6
    LPAREN=7
    RPAREN=8
    LCURLY=9
    RCURLY=10
    LBRACK=11
    RBRACK=12
    EQUAL=13
    ASSIGN=14
    PLUS=15
    MINUS=16
    STAR=17
    SLASH=18
    FLEX=19
    DOTPLUS=20
    DOTMINUS=21
    DOTSTAR=22
    DOTSLASH=23
    DOTFLEX=24
    GRE=25
    GEQ=26
    LES=27
    LEQ=28
    NEQ=29
    EEQ=30
    NOT=31
    AND=32
    OR=33
    IN=34
    FOR=35
    IF=36
    ELSE=37
    ELSEIF=38
    THEN=39
    WHEN=40
    ELSEWHEN=41
    WHILE=42
    LOOP=43
    BREAK=44
    RETURN=45
    PARTIAL=46
    OPERATOR=47
    EXPANDABLE=48
    CLASS=49
    MODEL=50
    FUNCTION=51
    RECORD=52
    TYPE=53
    BLOCK=54
    CONNECTOR=55
    PACKAGE=56
    PURE=57
    IMPURE=58
    END=59
    DER=60
    CONNECT=61
    INITIAL=62
    EQUATION=63
    ALGORITHM=64
    WITHIN=65
    FINAL=66
    ENCAPSULATED=67
    EXTENDS=68
    IMPORT=69
    ENUMERATION=70
    INPUT=71
    OUTPUT=72
    PUBLIC=73
    PROTECTED=74
    REDECLARE=75
    INNER=76
    OUTER=77
    REPLACEABLE=78
    CONSTRAINEDBY=79
    FLOW=80
    STREAM=81
    DISCRETE=82
    PARAMETER=83
    CONSTANT=84
    EACH=85
    ANNOTATION=86
    EXTERNAL=87
    BLOCK_COMMENT=88
    LINE_COMMENT=89
    STRING=90
    UNUM=91
    BOOL=92
    IDENT=93

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Stored_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(Modelica.WITHIN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def class_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Class_definitionContext)
            else:
                return self.getTypedRuleContext(Modelica.Class_definitionContext,i)


        def name(self):
            return self.getTypedRuleContext(Modelica.NameContext,0)


        def FINAL(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.FINAL)
            else:
                return self.getToken(Modelica.FINAL, i)

        def getRuleIndex(self):
            return Modelica.RULE_stored_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStored_definition" ):
                listener.enterStored_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStored_definition" ):
                listener.exitStored_definition(self)




    def stored_definition(self):

        localctx = Modelica.Stored_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stored_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 242
                self.match(Modelica.WITHIN)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 243
                    self.name()


                self.state = 246
                self.match(Modelica.SEMICOLON)


            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & 3153919) != 0):
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 249
                    self.match(Modelica.FINAL)


                self.state = 252
                self.class_definition()
                self.state = 253
                self.match(Modelica.SEMICOLON)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(Modelica.Class_prefixesContext,0)


        def class_specifier(self):
            return self.getTypedRuleContext(Modelica.Class_specifierContext,0)


        def ENCAPSULATED(self):
            return self.getToken(Modelica.ENCAPSULATED, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = Modelica.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 260
                self.match(Modelica.ENCAPSULATED)


            self.state = 263
            self.class_prefixes()
            self.state = 264
            self.class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Modelica.CLASS, 0)

        def MODEL(self):
            return self.getToken(Modelica.MODEL, 0)

        def RECORD(self):
            return self.getToken(Modelica.RECORD, 0)

        def BLOCK(self):
            return self.getToken(Modelica.BLOCK, 0)

        def CONNECTOR(self):
            return self.getToken(Modelica.CONNECTOR, 0)

        def TYPE(self):
            return self.getToken(Modelica.TYPE, 0)

        def PACKAGE(self):
            return self.getToken(Modelica.PACKAGE, 0)

        def FUNCTION(self):
            return self.getToken(Modelica.FUNCTION, 0)

        def OPERATOR(self):
            return self.getToken(Modelica.OPERATOR, 0)

        def PARTIAL(self):
            return self.getToken(Modelica.PARTIAL, 0)

        def EXPANDABLE(self):
            return self.getToken(Modelica.EXPANDABLE, 0)

        def PURE(self):
            return self.getToken(Modelica.PURE, 0)

        def IMPURE(self):
            return self.getToken(Modelica.IMPURE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_prefixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefixes" ):
                listener.enterClass_prefixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefixes" ):
                listener.exitClass_prefixes(self)




    def class_prefixes(self):

        localctx = Modelica.Class_prefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_class_prefixes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 266
                self.match(Modelica.PARTIAL)


            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 269
                self.match(Modelica.CLASS)
                pass

            elif la_ == 2:
                self.state = 270
                self.match(Modelica.MODEL)
                pass

            elif la_ == 3:
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 271
                    self.match(Modelica.OPERATOR)


                self.state = 274
                self.match(Modelica.RECORD)
                pass

            elif la_ == 4:
                self.state = 275
                self.match(Modelica.BLOCK)
                pass

            elif la_ == 5:
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 276
                    self.match(Modelica.EXPANDABLE)


                self.state = 279
                self.match(Modelica.CONNECTOR)
                pass

            elif la_ == 6:
                self.state = 280
                self.match(Modelica.TYPE)
                pass

            elif la_ == 7:
                self.state = 281
                self.match(Modelica.PACKAGE)
                pass

            elif la_ == 8:
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or _la==58:
                    self.state = 282
                    _la = self._input.LA(1)
                    if not(_la==57 or _la==58):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 285
                    self.match(Modelica.OPERATOR)


                self.state = 288
                self.match(Modelica.FUNCTION)
                pass

            elif la_ == 9:
                self.state = 289
                self.match(Modelica.OPERATOR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def long_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Long_class_specifierContext,0)


        def short_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Short_class_specifierContext,0)


        def der_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Der_class_specifierContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_specifier" ):
                listener.enterClass_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_specifier" ):
                listener.exitClass_specifier(self)




    def class_specifier(self):

        localctx = Modelica.Class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_class_specifier)
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self.long_class_specifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.short_class_specifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 294
                self.der_class_specifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Long_class_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def description_string(self):
            return self.getTypedRuleContext(Modelica.Description_stringContext,0)


        def composition(self):
            return self.getTypedRuleContext(Modelica.CompositionContext,0)


        def end_clause(self):
            return self.getTypedRuleContext(Modelica.End_clauseContext,0)


        def EXTENDS(self):
            return self.getToken(Modelica.EXTENDS, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_long_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLong_class_specifier" ):
                listener.enterLong_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLong_class_specifier" ):
                listener.exitLong_class_specifier(self)




    def long_class_specifier(self):

        localctx = Modelica.Long_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_long_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.match(Modelica.IDENT)
                self.state = 298
                self.description_string()
                self.state = 299
                self.composition()
                self.state = 300
                self.end_clause()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.match(Modelica.EXTENDS)
                self.state = 303
                self.match(Modelica.IDENT)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 304
                    self.class_modification()


                self.state = 307
                self.description_string()
                self.state = 308
                self.composition()
                self.state = 309
                self.end_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(Modelica.END, 0)

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_end_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_clause" ):
                listener.enterEnd_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_clause" ):
                listener.exitEnd_clause(self)




    def end_clause(self):

        localctx = Modelica.End_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_end_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(Modelica.END)
            self.state = 314
            self.match(Modelica.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_class_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def base_prefix(self):
            return self.getTypedRuleContext(Modelica.Base_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(Modelica.Array_subscriptsContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext,0)


        def ENUMERATION(self):
            return self.getToken(Modelica.ENUMERATION, 0)

        def enumerations(self):
            return self.getTypedRuleContext(Modelica.EnumerationsContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_short_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_class_specifier" ):
                listener.enterShort_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_class_specifier" ):
                listener.exitShort_class_specifier(self)




    def short_class_specifier(self):

        localctx = Modelica.Short_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_short_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 316
                self.match(Modelica.IDENT)
                self.state = 317
                self.match(Modelica.EQUAL)
                self.state = 318
                self.base_prefix()
                self.state = 319
                self.type_specifier()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 320
                    self.array_subscripts()


                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 323
                    self.class_modification()


                self.state = 326
                self.description()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                self.match(Modelica.IDENT)
                self.state = 329
                self.match(Modelica.EQUAL)
                self.state = 330
                self.match(Modelica.ENUMERATION)
                self.state = 331
                self.enumerations()
                self.state = 332
                self.description()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Der_class_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def DER(self):
            return self.getToken(Modelica.DER, 0)

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_der_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDer_class_specifier" ):
                listener.enterDer_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDer_class_specifier" ):
                listener.exitDer_class_specifier(self)




    def der_class_specifier(self):

        localctx = Modelica.Der_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_der_class_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(Modelica.IDENT)
            self.state = 337
            self.match(Modelica.EQUAL)
            self.state = 338
            self.match(Modelica.DER)
            self.state = 339
            self.match(Modelica.LPAREN)
            self.state = 340
            self.type_specifier()
            self.state = 341
            self.match(Modelica.COMMA)
            self.state = 342
            self.match(Modelica.IDENT)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 343
                self.match(Modelica.COMMA)
                self.state = 344
                self.match(Modelica.IDENT)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 350
            self.match(Modelica.RPAREN)
            self.state = 351
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(Modelica.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(Modelica.OUTPUT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_base_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_prefix" ):
                listener.enterBase_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_prefix" ):
                listener.exitBase_prefix(self)




    def base_prefix(self):

        localctx = Modelica.Base_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_base_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71 or _la==72:
                self.state = 353
                _la = self._input.LA(1)
                if not(_la==71 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def COLON(self):
            return self.getToken(Modelica.COLON, 0)

        def enum_list(self):
            return self.getTypedRuleContext(Modelica.Enum_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_enumerations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerations" ):
                listener.enterEnumerations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerations" ):
                listener.exitEnumerations(self)




    def enumerations(self):

        localctx = Modelica.EnumerationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enumerations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(Modelica.LPAREN)
            self.state = 361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 93]:
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 357
                    self.enum_list()


                pass
            elif token in [6]:
                self.state = 360
                self.match(Modelica.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 363
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Enumeration_literalContext)
            else:
                return self.getTypedRuleContext(Modelica.Enumeration_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_enum_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_list" ):
                listener.enterEnum_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_list" ):
                listener.exitEnum_list(self)




    def enum_list(self):

        localctx = Modelica.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enum_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.enumeration_literal()
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 366
                self.match(Modelica.COMMA)
                self.state = 367
                self.enumeration_literal()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_enumeration_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_literal" ):
                listener.enterEnumeration_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_literal" ):
                listener.exitEnumeration_literal(self)




    def enumeration_literal(self):

        localctx = Modelica.Enumeration_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumeration_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(Modelica.IDENT)
            self.state = 374
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initial_element_list(self):
            return self.getTypedRuleContext(Modelica.Initial_element_listContext,0)


        def public_element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Public_element_listContext)
            else:
                return self.getTypedRuleContext(Modelica.Public_element_listContext,i)


        def protected_element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Protected_element_listContext)
            else:
                return self.getTypedRuleContext(Modelica.Protected_element_listContext,i)


        def equation_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Equation_sectionContext)
            else:
                return self.getTypedRuleContext(Modelica.Equation_sectionContext,i)


        def algorithm_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Algorithm_sectionContext)
            else:
                return self.getTypedRuleContext(Modelica.Algorithm_sectionContext,i)


        def external_element(self):
            return self.getTypedRuleContext(Modelica.External_elementContext,0)


        def class_annotation(self):
            return self.getTypedRuleContext(Modelica.Class_annotationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_composition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition" ):
                listener.enterComposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition" ):
                listener.exitComposition(self)




    def composition(self):

        localctx = Modelica.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_composition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.initial_element_list()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 6151) != 0):
                self.state = 381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 377
                    self.public_element_list()
                    pass

                elif la_ == 2:
                    self.state = 378
                    self.protected_element_list()
                    pass

                elif la_ == 3:
                    self.state = 379
                    self.equation_section()
                    pass

                elif la_ == 4:
                    self.state = 380
                    self.algorithm_section()
                    pass


                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 386
                self.external_element()


            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 389
                self.class_annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION(self):
            return self.getToken(Modelica.ANNOTATION, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext,0)


        def SEMICOLON(self):
            return self.getToken(Modelica.SEMICOLON, 0)

        def getRuleIndex(self):
            return Modelica.RULE_class_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_annotation" ):
                listener.enterClass_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_annotation" ):
                listener.exitClass_annotation(self)




    def class_annotation(self):

        localctx = Modelica.Class_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_class_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(Modelica.ANNOTATION)
            self.state = 393
            self.class_modification()
            self.state = 394
            self.match(Modelica.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(Modelica.EXTERNAL, 0)

        def SEMICOLON(self):
            return self.getToken(Modelica.SEMICOLON, 0)

        def language_specification(self):
            return self.getTypedRuleContext(Modelica.Language_specificationContext,0)


        def external_function_call(self):
            return self.getTypedRuleContext(Modelica.External_function_callContext,0)


        def annotation(self):
            return self.getTypedRuleContext(Modelica.AnnotationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_external_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_element" ):
                listener.enterExternal_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_element" ):
                listener.exitExternal_element(self)




    def external_element(self):

        localctx = Modelica.External_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_external_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(Modelica.EXTERNAL)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 397
                self.language_specification()


            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==93:
                self.state = 400
                self.external_function_call()


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 403
                self.annotation()


            self.state = 406
            self.match(Modelica.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Language_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(Modelica.STRING, 0)

        def getRuleIndex(self):
            return Modelica.RULE_language_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage_specification" ):
                listener.enterLanguage_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage_specification" ):
                listener.exitLanguage_specification(self)




    def language_specification(self):

        localctx = Modelica.Language_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_language_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(Modelica.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def external_function_args(self):
            return self.getTypedRuleContext(Modelica.External_function_argsContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext,0)


        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_external_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_call" ):
                listener.enterExternal_function_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_call" ):
                listener.exitExternal_function_call(self)




    def external_function_call(self):

        localctx = Modelica.External_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_external_function_call)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 410
                self.component_reference()
                self.state = 411
                self.match(Modelica.EQUAL)


            self.state = 415
            self.match(Modelica.IDENT)
            self.state = 416
            self.external_function_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(Modelica.Expression_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_external_function_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_args" ):
                listener.enterExternal_function_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_args" ):
                listener.exitExternal_function_args(self)




    def external_function_args(self):

        localctx = Modelica.External_function_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_external_function_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(Modelica.LPAREN)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6485183534283721360) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 15) != 0):
                self.state = 419
                self.expression_list()


            self.state = 422
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_list(self):
            return self.getTypedRuleContext(Modelica.Element_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_initial_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_element_list" ):
                listener.enterInitial_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_element_list" ):
                listener.exitInitial_element_list(self)




    def initial_element_list(self):

        localctx = Modelica.Initial_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_initial_element_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.element_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Public_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(Modelica.PUBLIC, 0)

        def element_list(self):
            return self.getTypedRuleContext(Modelica.Element_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_public_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublic_element_list" ):
                listener.enterPublic_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublic_element_list" ):
                listener.exitPublic_element_list(self)




    def public_element_list(self):

        localctx = Modelica.Public_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_public_element_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(Modelica.PUBLIC)
            self.state = 427
            self.element_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protected_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(Modelica.PROTECTED, 0)

        def element_list(self):
            return self.getTypedRuleContext(Modelica.Element_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_protected_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtected_element_list" ):
                listener.enterProtected_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtected_element_list" ):
                listener.exitProtected_element_list(self)




    def protected_element_list(self):

        localctx = Modelica.Protected_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_protected_element_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(Modelica.PROTECTED)
            self.state = 430
            self.element_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ElementContext)
            else:
                return self.getTypedRuleContext(Modelica.ElementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_list" ):
                listener.enterElement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_list" ):
                listener.exitElement_list(self)




    def element_list(self):

        localctx = Modelica.Element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576390383559245840) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 134733423) != 0):
                self.state = 432
                self.element()
                self.state = 433
                self.match(Modelica.SEMICOLON)
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_clause(self):
            return self.getTypedRuleContext(Modelica.Import_clauseContext,0)


        def extends_clause(self):
            return self.getTypedRuleContext(Modelica.Extends_clauseContext,0)


        def declaration_clause(self):
            return self.getTypedRuleContext(Modelica.Declaration_clauseContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = Modelica.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_element)
        try:
            self.state = 443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.import_clause()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.extends_clause()
                pass
            elif token in [4, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 93]:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.declaration_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Modelica.IMPORT, 0)

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def name(self):
            return self.getTypedRuleContext(Modelica.NameContext,0)


        def DOTSTAR(self):
            return self.getToken(Modelica.DOTSTAR, 0)

        def DOT(self):
            return self.getToken(Modelica.DOT, 0)

        def LCURLY(self):
            return self.getToken(Modelica.LCURLY, 0)

        def import_list(self):
            return self.getTypedRuleContext(Modelica.Import_listContext,0)


        def RCURLY(self):
            return self.getToken(Modelica.RCURLY, 0)

        def getRuleIndex(self):
            return Modelica.RULE_import_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_clause" ):
                listener.enterImport_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_clause" ):
                listener.exitImport_clause(self)




    def import_clause(self):

        localctx = Modelica.Import_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_import_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(Modelica.IMPORT)
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 446
                self.match(Modelica.IDENT)
                self.state = 447
                self.match(Modelica.EQUAL)
                self.state = 448
                self.name()
                pass

            elif la_ == 2:
                self.state = 449
                self.name()
                self.state = 456
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 450
                    self.match(Modelica.DOTSTAR)
                    pass
                elif token in [4]:
                    self.state = 451
                    self.match(Modelica.DOT)
                    self.state = 452
                    self.match(Modelica.LCURLY)
                    self.state = 453
                    self.import_list()
                    self.state = 454
                    self.match(Modelica.RCURLY)
                    pass
                elif token in [5, 86, 90]:
                    pass
                else:
                    pass
                pass


            self.state = 460
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_import_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_list" ):
                listener.enterImport_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_list" ):
                listener.exitImport_list(self)




    def import_list(self):

        localctx = Modelica.Import_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_import_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(Modelica.IDENT)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 463
                self.match(Modelica.COMMA)
                self.state = 464
                self.match(Modelica.IDENT)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(Modelica.Class_definitionContext,0)


        def component_clause(self):
            return self.getTypedRuleContext(Modelica.Component_clauseContext,0)


        def REDECLARE(self):
            return self.getToken(Modelica.REDECLARE, 0)

        def FINAL(self):
            return self.getToken(Modelica.FINAL, 0)

        def INNER(self):
            return self.getToken(Modelica.INNER, 0)

        def OUTER(self):
            return self.getToken(Modelica.OUTER, 0)

        def REPLACEABLE(self):
            return self.getToken(Modelica.REPLACEABLE, 0)

        def constraining_clause(self):
            return self.getTypedRuleContext(Modelica.Constraining_clauseContext,0)


        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_declaration_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_clause" ):
                listener.enterDeclaration_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_clause" ):
                listener.exitDeclaration_clause(self)




    def declaration_clause(self):

        localctx = Modelica.Declaration_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 470
                self.match(Modelica.REDECLARE)


            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 473
                self.match(Modelica.FINAL)


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 476
                self.match(Modelica.INNER)


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 479
                self.match(Modelica.OUTER)


            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 482
                self.match(Modelica.REPLACEABLE)


            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67]:
                self.state = 485
                self.class_definition()
                pass
            elif token in [4, 71, 72, 80, 81, 82, 83, 84, 93]:
                self.state = 486
                self.component_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 489
                self.constraining_clause()
                self.state = 490
                self.description()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extends_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Modelica.EXTENDS, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def inheritance_modification(self):
            return self.getTypedRuleContext(Modelica.Inheritance_modificationContext,0)


        def annotation(self):
            return self.getTypedRuleContext(Modelica.AnnotationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_extends_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtends_clause" ):
                listener.enterExtends_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtends_clause" ):
                listener.exitExtends_clause(self)




    def extends_clause(self):

        localctx = Modelica.Extends_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_extends_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(Modelica.EXTENDS)
            self.state = 495
            self.type_specifier()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 496
                self.inheritance_modification()


            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 499
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraining_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINEDBY(self):
            return self.getToken(Modelica.CONSTRAINEDBY, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_constraining_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraining_clause" ):
                listener.enterConstraining_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraining_clause" ):
                listener.exitConstraining_clause(self)




    def constraining_clause(self):

        localctx = Modelica.Constraining_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constraining_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(Modelica.CONSTRAINEDBY)
            self.state = 503
            self.type_specifier()
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 504
                self.class_modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inheritance_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def inheritance_modification_list(self):
            return self.getTypedRuleContext(Modelica.Inheritance_modification_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_inheritance_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritance_modification" ):
                listener.enterInheritance_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritance_modification" ):
                listener.exitInheritance_modification(self)




    def inheritance_modification(self):

        localctx = Modelica.Inheritance_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_inheritance_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(Modelica.LPAREN)
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 565168308224001) != 0):
                self.state = 508
                self.inheritance_modification_list()


            self.state = 511
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inheritance_modification_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ArgumentContext)
            else:
                return self.getTypedRuleContext(Modelica.ArgumentContext,i)


        def inheritance_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Inheritance_modifierContext)
            else:
                return self.getTypedRuleContext(Modelica.Inheritance_modifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_inheritance_modification_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritance_modification_list" ):
                listener.enterInheritance_modification_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritance_modification_list" ):
                listener.exitInheritance_modification_list(self)




    def inheritance_modification_list(self):

        localctx = Modelica.Inheritance_modification_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_inheritance_modification_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 75, 78, 85, 93]:
                self.state = 513
                self.argument()
                pass
            elif token in [44]:
                self.state = 514
                self.inheritance_modifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 517
                self.match(Modelica.COMMA)
                self.state = 520
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [66, 75, 78, 85, 93]:
                    self.state = 518
                    self.argument()
                    pass
                elif token in [44]:
                    self.state = 519
                    self.inheritance_modifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inheritance_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Modelica.BREAK, 0)

        def connect_equation(self):
            return self.getTypedRuleContext(Modelica.Connect_equationContext,0)


        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_inheritance_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritance_modifier" ):
                listener.enterInheritance_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritance_modifier" ):
                listener.exitInheritance_modifier(self)




    def inheritance_modifier(self):

        localctx = Modelica.Inheritance_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_inheritance_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(Modelica.BREAK)
            self.state = 530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 528
                self.connect_equation()
                pass
            elif token in [93]:
                self.state = 529
                self.match(Modelica.IDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(Modelica.Type_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def component_list(self):
            return self.getTypedRuleContext(Modelica.Component_listContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(Modelica.Array_subscriptsContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_component_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause" ):
                listener.enterComponent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause" ):
                listener.exitComponent_clause(self)




    def component_clause(self):

        localctx = Modelica.Component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_component_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.type_prefix()
            self.state = 533
            self.type_specifier()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 534
                self.array_subscripts()


            self.state = 537
            self.component_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOW(self):
            return self.getToken(Modelica.FLOW, 0)

        def STREAM(self):
            return self.getToken(Modelica.STREAM, 0)

        def DISCRETE(self):
            return self.getToken(Modelica.DISCRETE, 0)

        def PARAMETER(self):
            return self.getToken(Modelica.PARAMETER, 0)

        def CONSTANT(self):
            return self.getToken(Modelica.CONSTANT, 0)

        def INPUT(self):
            return self.getToken(Modelica.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(Modelica.OUTPUT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_type_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix" ):
                listener.enterType_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix" ):
                listener.exitType_prefix(self)




    def type_prefix(self):

        localctx = Modelica.Type_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_type_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==81:
                self.state = 539
                _la = self._input.LA(1)
                if not(_la==80 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 7) != 0):
                self.state = 542
                _la = self._input.LA(1)
                if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71 or _la==72:
                self.state = 545
                _la = self._input.LA(1)
                if not(_la==71 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Component_declarationContext)
            else:
                return self.getTypedRuleContext(Modelica.Component_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_component_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_list" ):
                listener.enterComponent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_list" ):
                listener.exitComponent_list(self)




    def component_list(self):

        localctx = Modelica.Component_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_component_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.component_declaration()
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 549
                self.match(Modelica.COMMA)
                self.state = 550
                self.component_declaration()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Modelica.DeclarationContext,0)


        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_component_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration" ):
                listener.enterComponent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration" ):
                listener.exitComponent_declaration(self)




    def component_declaration(self):

        localctx = Modelica.Component_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_component_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.declaration()
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 557
                self.match(Modelica.IF)
                self.state = 558
                self.expression()


            self.state = 561
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(Modelica.Array_subscriptsContext,0)


        def modification(self):
            return self.getTypedRuleContext(Modelica.ModificationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = Modelica.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(Modelica.IDENT)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 564
                self.array_subscripts()


            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 24704) != 0):
                self.state = 567
                self.modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext,0)


        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def modification_expression(self):
            return self.getTypedRuleContext(Modelica.Modification_expressionContext,0)


        def ASSIGN(self):
            return self.getToken(Modelica.ASSIGN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification" ):
                listener.enterModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification" ):
                listener.exitModification(self)




    def modification(self):

        localctx = Modelica.ModificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_modification)
        self._la = 0 # Token type
        try:
            self.state = 579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.class_modification()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 571
                    self.match(Modelica.EQUAL)
                    self.state = 572
                    self.modification_expression()


                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(Modelica.EQUAL)
                self.state = 576
                self.modification_expression()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.match(Modelica.ASSIGN)
                self.state = 578
                self.modification_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modification_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def BREAK(self):
            return self.getToken(Modelica.BREAK, 0)

        def getRuleIndex(self):
            return Modelica.RULE_modification_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification_expression" ):
                listener.enterModification_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification_expression" ):
                listener.exitModification_expression(self)




    def modification_expression(self):

        localctx = Modelica.Modification_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_modification_expression)
        try:
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 7, 9, 11, 15, 16, 20, 21, 31, 36, 57, 59, 60, 62, 90, 91, 92, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.expression()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.match(Modelica.BREAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def argument_list(self):
            return self.getTypedRuleContext(Modelica.Argument_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_class_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modification" ):
                listener.enterClass_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modification" ):
                listener.exitClass_modification(self)




    def class_modification(self):

        localctx = Modelica.Class_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_class_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(Modelica.LPAREN)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 134746625) != 0):
                self.state = 586
                self.argument_list()


            self.state = 589
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ArgumentContext)
            else:
                return self.getTypedRuleContext(Modelica.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = Modelica.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.argument()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 592
                self.match(Modelica.COMMA)
                self.state = 593
                self.argument()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification_or_replaceable(self):
            return self.getTypedRuleContext(Modelica.Element_modification_or_replaceableContext,0)


        def element_redeclaration(self):
            return self.getTypedRuleContext(Modelica.Element_redeclarationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = Modelica.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_argument)
        try:
            self.state = 601
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 78, 85, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.element_modification_or_replaceable()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.element_redeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_modification_or_replaceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification(self):
            return self.getTypedRuleContext(Modelica.Element_modificationContext,0)


        def element_replaceable(self):
            return self.getTypedRuleContext(Modelica.Element_replaceableContext,0)


        def EACH(self):
            return self.getToken(Modelica.EACH, 0)

        def FINAL(self):
            return self.getToken(Modelica.FINAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element_modification_or_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification_or_replaceable" ):
                listener.enterElement_modification_or_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification_or_replaceable" ):
                listener.exitElement_modification_or_replaceable(self)




    def element_modification_or_replaceable(self):

        localctx = Modelica.Element_modification_or_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_element_modification_or_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 603
                self.match(Modelica.EACH)


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 606
                self.match(Modelica.FINAL)


            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.state = 609
                self.element_modification()
                pass
            elif token in [78]:
                self.state = 610
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Modelica.NameContext,0)


        def description_string(self):
            return self.getTypedRuleContext(Modelica.Description_stringContext,0)


        def modification(self):
            return self.getTypedRuleContext(Modelica.ModificationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_element_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification" ):
                listener.enterElement_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification" ):
                listener.exitElement_modification(self)




    def element_modification(self):

        localctx = Modelica.Element_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_element_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.name()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 24704) != 0):
                self.state = 614
                self.modification()


            self.state = 617
            self.description_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_redeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDECLARE(self):
            return self.getToken(Modelica.REDECLARE, 0)

        def short_definition(self):
            return self.getTypedRuleContext(Modelica.Short_definitionContext,0)


        def short_component_clause(self):
            return self.getTypedRuleContext(Modelica.Short_component_clauseContext,0)


        def element_replaceable(self):
            return self.getTypedRuleContext(Modelica.Element_replaceableContext,0)


        def EACH(self):
            return self.getToken(Modelica.EACH, 0)

        def FINAL(self):
            return self.getToken(Modelica.FINAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_element_redeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_redeclaration" ):
                listener.enterElement_redeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_redeclaration" ):
                listener.exitElement_redeclaration(self)




    def element_redeclaration(self):

        localctx = Modelica.Element_redeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_element_redeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(Modelica.REDECLARE)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 620
                self.match(Modelica.EACH)


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 623
                self.match(Modelica.FINAL)


            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.state = 626
                self.short_definition()
                pass
            elif token in [4, 71, 72, 80, 81, 82, 83, 84, 93]:
                self.state = 627
                self.short_component_clause()
                pass
            elif token in [78]:
                self.state = 628
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_replaceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACEABLE(self):
            return self.getToken(Modelica.REPLACEABLE, 0)

        def short_definition(self):
            return self.getTypedRuleContext(Modelica.Short_definitionContext,0)


        def short_component_clause(self):
            return self.getTypedRuleContext(Modelica.Short_component_clauseContext,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(Modelica.Constraining_clauseContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_element_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_replaceable" ):
                listener.enterElement_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_replaceable" ):
                listener.exitElement_replaceable(self)




    def element_replaceable(self):

        localctx = Modelica.Element_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_element_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(Modelica.REPLACEABLE)
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.state = 632
                self.short_definition()
                pass
            elif token in [4, 71, 72, 80, 81, 82, 83, 84, 93]:
                self.state = 633
                self.short_component_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 636
                self.constraining_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_component_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(Modelica.Type_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def short_component_declaration(self):
            return self.getTypedRuleContext(Modelica.Short_component_declarationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_short_component_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_component_clause" ):
                listener.enterShort_component_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_component_clause" ):
                listener.exitShort_component_clause(self)




    def short_component_clause(self):

        localctx = Modelica.Short_component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_short_component_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.type_prefix()
            self.state = 640
            self.type_specifier()
            self.state = 641
            self.short_component_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_component_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Modelica.DeclarationContext,0)


        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_short_component_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_component_declaration" ):
                listener.enterShort_component_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_component_declaration" ):
                listener.exitShort_component_declaration(self)




    def short_component_declaration(self):

        localctx = Modelica.Short_component_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_short_component_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.declaration()
            self.state = 644
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(Modelica.Class_prefixesContext,0)


        def short_class_specifier(self):
            return self.getTypedRuleContext(Modelica.Short_class_specifierContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_short_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_definition" ):
                listener.enterShort_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_definition" ):
                listener.exitShort_definition(self)




    def short_definition(self):

        localctx = Modelica.Short_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_short_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.class_prefixes()
            self.state = 647
            self.short_class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equation_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUATION(self):
            return self.getToken(Modelica.EQUATION, 0)

        def equation_list(self):
            return self.getTypedRuleContext(Modelica.Equation_listContext,0)


        def INITIAL(self):
            return self.getToken(Modelica.INITIAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_equation_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_section" ):
                listener.enterEquation_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_section" ):
                listener.exitEquation_section(self)




    def equation_section(self):

        localctx = Modelica.Equation_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_equation_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 649
                self.match(Modelica.INITIAL)


            self.state = 652
            self.match(Modelica.EQUATION)
            self.state = 653
            self.equation_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Algorithm_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM(self):
            return self.getToken(Modelica.ALGORITHM, 0)

        def statement_list(self):
            return self.getTypedRuleContext(Modelica.Statement_listContext,0)


        def INITIAL(self):
            return self.getToken(Modelica.INITIAL, 0)

        def getRuleIndex(self):
            return Modelica.RULE_algorithm_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm_section" ):
                listener.enterAlgorithm_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm_section" ):
                listener.exitAlgorithm_section(self)




    def algorithm_section(self):

        localctx = Modelica.Algorithm_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_algorithm_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 655
                self.match(Modelica.INITIAL)


            self.state = 658
            self.match(Modelica.ALGORITHM)
            self.state = 659
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.EquationContext)
            else:
                return self.getTypedRuleContext(Modelica.EquationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_equation_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_list" ):
                listener.enterEquation_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_list" ):
                listener.exitEquation_list(self)




    def equation_list(self):

        localctx = Modelica.Equation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_equation_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 661
                    self.equation()
                    self.state = 662
                    self.match(Modelica.SEMICOLON) 
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.StatementContext)
            else:
                return self.getTypedRuleContext(Modelica.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = Modelica.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 669
                    self.statement()
                    self.state = 670
                    self.match(Modelica.SEMICOLON) 
                self.state = 676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EquationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def simple_expression(self):
            return self.getTypedRuleContext(Modelica.Simple_expressionContext,0)


        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def if_equation(self):
            return self.getTypedRuleContext(Modelica.If_equationContext,0)


        def for_equation(self):
            return self.getTypedRuleContext(Modelica.For_equationContext,0)


        def connect_equation(self):
            return self.getTypedRuleContext(Modelica.Connect_equationContext,0)


        def when_equation(self):
            return self.getTypedRuleContext(Modelica.When_equationContext,0)


        def function_call(self):
            return self.getTypedRuleContext(Modelica.Function_callContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation" ):
                listener.enterEquation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation" ):
                listener.exitEquation(self)




    def equation(self):

        localctx = Modelica.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 677
                self.simple_expression()
                self.state = 678
                self.match(Modelica.EQUAL)
                self.state = 679
                self.expression()
                pass

            elif la_ == 2:
                self.state = 681
                self.if_equation()
                pass

            elif la_ == 3:
                self.state = 682
                self.for_equation()
                pass

            elif la_ == 4:
                self.state = 683
                self.connect_equation()
                pass

            elif la_ == 5:
                self.state = 684
                self.when_equation()
                pass

            elif la_ == 6:
                self.state = 685
                self.function_call()
                pass


            self.state = 688
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def description(self):
            return self.getTypedRuleContext(Modelica.DescriptionContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext,0)


        def ASSIGN(self):
            return self.getToken(Modelica.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def function_call(self):
            return self.getTypedRuleContext(Modelica.Function_callContext,0)


        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def output_expression_list(self):
            return self.getTypedRuleContext(Modelica.Output_expression_listContext,0)


        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def BREAK(self):
            return self.getToken(Modelica.BREAK, 0)

        def RETURN(self):
            return self.getToken(Modelica.RETURN, 0)

        def if_statement(self):
            return self.getTypedRuleContext(Modelica.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(Modelica.For_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(Modelica.While_statementContext,0)


        def when_statement(self):
            return self.getTypedRuleContext(Modelica.When_statementContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = Modelica.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 690
                self.component_reference()
                self.state = 691
                self.match(Modelica.ASSIGN)
                self.state = 692
                self.expression()
                pass

            elif la_ == 2:
                self.state = 694
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 695
                self.match(Modelica.LPAREN)
                self.state = 696
                self.output_expression_list()
                self.state = 697
                self.match(Modelica.RPAREN)
                self.state = 698
                self.match(Modelica.ASSIGN)
                self.state = 699
                self.function_call()
                pass

            elif la_ == 4:
                self.state = 701
                self.match(Modelica.BREAK)
                pass

            elif la_ == 5:
                self.state = 702
                self.match(Modelica.RETURN)
                pass

            elif la_ == 6:
                self.state = 703
                self.if_statement()
                pass

            elif la_ == 7:
                self.state = 704
                self.for_statement()
                pass

            elif la_ == 8:
                self.state = 705
                self.while_statement()
                pass

            elif la_ == 9:
                self.state = 706
                self.when_statement()
                pass


            self.state = 709
            self.description()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_equationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_branch(self):
            return self.getTypedRuleContext(Modelica.If_branchContext,0)


        def conditional_equations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_equationsContext)
            else:
                return self.getTypedRuleContext(Modelica.Conditional_equationsContext,i)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def elseif_branch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elseif_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elseif_branchContext,i)


        def else_branch(self):
            return self.getTypedRuleContext(Modelica.Else_branchContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_if_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_equation" ):
                listener.enterIf_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_equation" ):
                listener.exitIf_equation(self)




    def if_equation(self):

        localctx = Modelica.If_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_if_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.if_branch()
            self.state = 712
            self.conditional_equations()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 713
                self.elseif_branch()
                self.state = 714
                self.conditional_equations()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 721
                self.else_branch()
                self.state = 722
                self.conditional_equations()


            self.state = 726
            self.match(Modelica.END)
            self.state = 727
            self.match(Modelica.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_equationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.EquationContext)
            else:
                return self.getTypedRuleContext(Modelica.EquationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_conditional_equations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_equations" ):
                listener.enterConditional_equations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_equations" ):
                listener.exitConditional_equations(self)




    def conditional_equations(self):

        localctx = Modelica.Conditional_equationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_conditional_equations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 729
                    self.equation()
                    self.state = 730
                    self.match(Modelica.SEMICOLON) 
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_branch(self):
            return self.getTypedRuleContext(Modelica.If_branchContext,0)


        def conditional_statements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_statementsContext)
            else:
                return self.getTypedRuleContext(Modelica.Conditional_statementsContext,i)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def elseif_branch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elseif_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elseif_branchContext,i)


        def else_branch(self):
            return self.getTypedRuleContext(Modelica.Else_branchContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = Modelica.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.if_branch()
            self.state = 738
            self.conditional_statements()
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 739
                self.elseif_branch()
                self.state = 740
                self.conditional_statements()
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 747
                self.else_branch()
                self.state = 748
                self.conditional_statements()


            self.state = 752
            self.match(Modelica.END)
            self.state = 753
            self.match(Modelica.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_branchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_if_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_branch" ):
                listener.enterIf_branch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_branch" ):
                listener.exitIf_branch(self)




    def if_branch(self):

        localctx = Modelica.If_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_if_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(Modelica.IF)
            self.state = 756
            self.expression()
            self.state = 757
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elseif_branchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(Modelica.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_elseif_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseif_branch" ):
                listener.enterElseif_branch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseif_branch" ):
                listener.exitElseif_branch(self)




    def elseif_branch(self):

        localctx = Modelica.Elseif_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elseif_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(Modelica.ELSEIF)
            self.state = 760
            self.expression()
            self.state = 761
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_branchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Modelica.ELSE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_else_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_branch" ):
                listener.enterElse_branch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_branch" ):
                listener.exitElse_branch(self)




    def else_branch(self):

        localctx = Modelica.Else_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_else_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(Modelica.ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.StatementContext)
            else:
                return self.getTypedRuleContext(Modelica.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_conditional_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_statements" ):
                listener.enterConditional_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_statements" ):
                listener.exitConditional_statements(self)




    def conditional_statements(self):

        localctx = Modelica.Conditional_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_conditional_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5908781088305578128) != 0) or _la==93:
                self.state = 765
                self.statement()
                self.state = 766
                self.match(Modelica.SEMICOLON)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_equationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_initializer(self):
            return self.getTypedRuleContext(Modelica.For_initializerContext,0)


        def LOOP(self):
            return self.getToken(Modelica.LOOP, 0)

        def conditional_equations(self):
            return self.getTypedRuleContext(Modelica.Conditional_equationsContext,0)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def FOR(self):
            return self.getToken(Modelica.FOR, 0)

        def getRuleIndex(self):
            return Modelica.RULE_for_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_equation" ):
                listener.enterFor_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_equation" ):
                listener.exitFor_equation(self)




    def for_equation(self):

        localctx = Modelica.For_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_for_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.for_initializer()
            self.state = 774
            self.match(Modelica.LOOP)
            self.state = 775
            self.conditional_equations()
            self.state = 776
            self.match(Modelica.END)
            self.state = 777
            self.match(Modelica.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_initializer(self):
            return self.getTypedRuleContext(Modelica.For_initializerContext,0)


        def LOOP(self):
            return self.getToken(Modelica.LOOP, 0)

        def conditional_statements(self):
            return self.getTypedRuleContext(Modelica.Conditional_statementsContext,0)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def FOR(self):
            return self.getToken(Modelica.FOR, 0)

        def getRuleIndex(self):
            return Modelica.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = Modelica.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_for_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.for_initializer()
            self.state = 780
            self.match(Modelica.LOOP)
            self.state = 781
            self.conditional_statements()
            self.state = 782
            self.match(Modelica.END)
            self.state = 783
            self.match(Modelica.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_indicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.For_indexContext)
            else:
                return self.getTypedRuleContext(Modelica.For_indexContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_for_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_indices" ):
                listener.enterFor_indices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_indices" ):
                listener.exitFor_indices(self)




    def for_indices(self):

        localctx = Modelica.For_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_for_indices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.for_index()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 786
                self.match(Modelica.COMMA)
                self.state = 787
                self.for_index()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def IN(self):
            return self.getToken(Modelica.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_for_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_index" ):
                listener.enterFor_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_index" ):
                listener.exitFor_index(self)




    def for_index(self):

        localctx = Modelica.For_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_for_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(Modelica.IDENT)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 794
                self.match(Modelica.IN)
                self.state = 795
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.WHILE)
            else:
                return self.getToken(Modelica.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def LOOP(self):
            return self.getToken(Modelica.LOOP, 0)

        def conditional_statements(self):
            return self.getTypedRuleContext(Modelica.Conditional_statementsContext,0)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def getRuleIndex(self):
            return Modelica.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = Modelica.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(Modelica.WHILE)
            self.state = 799
            self.expression()
            self.state = 800
            self.match(Modelica.LOOP)
            self.state = 801
            self.conditional_statements()
            self.state = 802
            self.match(Modelica.END)
            self.state = 803
            self.match(Modelica.WHILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_equationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_branch(self):
            return self.getTypedRuleContext(Modelica.When_branchContext,0)


        def conditional_equations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_equationsContext)
            else:
                return self.getTypedRuleContext(Modelica.Conditional_equationsContext,i)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def WHEN(self):
            return self.getToken(Modelica.WHEN, 0)

        def elsewhen_branch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elsewhen_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elsewhen_branchContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_when_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_equation" ):
                listener.enterWhen_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_equation" ):
                listener.exitWhen_equation(self)




    def when_equation(self):

        localctx = Modelica.When_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_when_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.when_branch()
            self.state = 806
            self.conditional_equations()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41:
                self.state = 807
                self.elsewhen_branch()
                self.state = 808
                self.conditional_equations()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 815
            self.match(Modelica.END)
            self.state = 816
            self.match(Modelica.WHEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_branch(self):
            return self.getTypedRuleContext(Modelica.When_branchContext,0)


        def conditional_statements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_statementsContext)
            else:
                return self.getTypedRuleContext(Modelica.Conditional_statementsContext,i)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def WHEN(self):
            return self.getToken(Modelica.WHEN, 0)

        def elsewhen_branch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elsewhen_branchContext)
            else:
                return self.getTypedRuleContext(Modelica.Elsewhen_branchContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_statement" ):
                listener.enterWhen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_statement" ):
                listener.exitWhen_statement(self)




    def when_statement(self):

        localctx = Modelica.When_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.when_branch()
            self.state = 819
            self.conditional_statements()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41:
                self.state = 820
                self.elsewhen_branch()
                self.state = 821
                self.conditional_statements()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 828
            self.match(Modelica.END)
            self.state = 829
            self.match(Modelica.WHEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_branchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Modelica.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_when_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_branch" ):
                listener.enterWhen_branch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_branch" ):
                listener.exitWhen_branch(self)




    def when_branch(self):

        localctx = Modelica.When_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_when_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(Modelica.WHEN)
            self.state = 832
            self.expression()
            self.state = 833
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elsewhen_branchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEWHEN(self):
            return self.getToken(Modelica.ELSEWHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_elsewhen_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsewhen_branch" ):
                listener.enterElsewhen_branch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsewhen_branch" ):
                listener.exitElsewhen_branch(self)




    def elsewhen_branch(self):

        localctx = Modelica.Elsewhen_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elsewhen_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(Modelica.ELSEWHEN)
            self.state = 836
            self.expression()
            self.state = 837
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Connect_equationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(Modelica.CONNECT, 0)

        def connected_components(self):
            return self.getTypedRuleContext(Modelica.Connected_componentsContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_connect_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect_equation" ):
                listener.enterConnect_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect_equation" ):
                listener.exitConnect_equation(self)




    def connect_equation(self):

        localctx = Modelica.Connect_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_connect_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(Modelica.CONNECT)
            self.state = 840
            self.connected_components()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Connected_componentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def component_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Component_referenceContext)
            else:
                return self.getTypedRuleContext(Modelica.Component_referenceContext,i)


        def COMMA(self):
            return self.getToken(Modelica.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_connected_components

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnected_components" ):
                listener.enterConnected_components(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnected_components" ):
                listener.exitConnected_components(self)




    def connected_components(self):

        localctx = Modelica.Connected_componentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_connected_components)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(Modelica.LPAREN)
            self.state = 843
            self.component_reference()
            self.state = 844
            self.match(Modelica.COMMA)
            self.state = 845
            self.component_reference()
            self.state = 846
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(Modelica.Simple_expressionContext,0)


        def if_expression(self):
            return self.getTypedRuleContext(Modelica.If_expressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = Modelica.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expression)
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 7, 9, 11, 15, 16, 20, 21, 31, 57, 59, 60, 62, 90, 91, 92, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.simple_expression()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.if_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_eval(self):
            return self.getTypedRuleContext(Modelica.If_evalContext,0)


        def conditional_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Conditional_expressionContext)
            else:
                return self.getTypedRuleContext(Modelica.Conditional_expressionContext,i)


        def else_eval(self):
            return self.getTypedRuleContext(Modelica.Else_evalContext,0)


        def elseif_eval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Elseif_evalContext)
            else:
                return self.getTypedRuleContext(Modelica.Elseif_evalContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_if_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_expression" ):
                listener.enterIf_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_expression" ):
                listener.exitIf_expression(self)




    def if_expression(self):

        localctx = Modelica.If_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_if_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.if_eval()
            self.state = 853
            self.conditional_expression()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 854
                self.elseif_eval()
                self.state = 855
                self.conditional_expression()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.else_eval()
            self.state = 863
            self.conditional_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_evalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Modelica.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_if_eval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_eval" ):
                listener.enterIf_eval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_eval" ):
                listener.exitIf_eval(self)




    def if_eval(self):

        localctx = Modelica.If_evalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_if_eval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(Modelica.IF)
            self.state = 866
            self.expression()
            self.state = 867
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elseif_evalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(Modelica.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def THEN(self):
            return self.getToken(Modelica.THEN, 0)

        def getRuleIndex(self):
            return Modelica.RULE_elseif_eval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseif_eval" ):
                listener.enterElseif_eval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseif_eval" ):
                listener.exitElseif_eval(self)




    def elseif_eval(self):

        localctx = Modelica.Elseif_evalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_elseif_eval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(Modelica.ELSEIF)
            self.state = 870
            self.expression()
            self.state = 871
            self.match(Modelica.THEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_evalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Modelica.ELSE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_else_eval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_eval" ):
                listener.enterElse_eval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_eval" ):
                listener.exitElse_eval(self)




    def else_eval(self):

        localctx = Modelica.Else_evalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_else_eval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(Modelica.ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = Modelica.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_conditional_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Logical_expressionContext)
            else:
                return self.getTypedRuleContext(Modelica.Logical_expressionContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COLON)
            else:
                return self.getToken(Modelica.COLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_simple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expression" ):
                listener.enterSimple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expression" ):
                listener.exitSimple_expression(self)




    def simple_expression(self):

        localctx = Modelica.Simple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simple_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.logical_expression()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 878
                self.match(Modelica.COLON)
                self.state = 879
                self.logical_expression()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 880
                    self.match(Modelica.COLON)
                    self.state = 881
                    self.logical_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Logical_termContext)
            else:
                return self.getTypedRuleContext(Modelica.Logical_termContext,i)


        def or_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Or_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Or_operatorContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_logical_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_expression" ):
                listener.enterLogical_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_expression" ):
                listener.exitLogical_expression(self)




    def logical_expression(self):

        localctx = Modelica.Logical_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_logical_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.logical_term()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 887
                self.or_operator()
                self.state = 888
                self.logical_term()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(Modelica.OR, 0)

        def getRuleIndex(self):
            return Modelica.RULE_or_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_operator" ):
                listener.enterOr_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_operator" ):
                listener.exitOr_operator(self)




    def or_operator(self):

        localctx = Modelica.Or_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_or_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(Modelica.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Logical_factorContext)
            else:
                return self.getTypedRuleContext(Modelica.Logical_factorContext,i)


        def and_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.And_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.And_operatorContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_logical_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_term" ):
                listener.enterLogical_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_term" ):
                listener.exitLogical_term(self)




    def logical_term(self):

        localctx = Modelica.Logical_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_logical_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.logical_factor()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==32:
                self.state = 898
                self.and_operator()
                self.state = 899
                self.logical_factor()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Modelica.AND, 0)

        def getRuleIndex(self):
            return Modelica.RULE_and_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_operator" ):
                listener.enterAnd_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_operator" ):
                listener.exitAnd_operator(self)




    def and_operator(self):

        localctx = Modelica.And_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_and_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(Modelica.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_factorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(Modelica.RelationContext,0)


        def NOT(self):
            return self.getToken(Modelica.NOT, 0)

        def getRuleIndex(self):
            return Modelica.RULE_logical_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_factor" ):
                listener.enterLogical_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_factor" ):
                listener.exitLogical_factor(self)




    def logical_factor(self):

        localctx = Modelica.Logical_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_logical_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 908
                self.match(Modelica.NOT)


            self.state = 911
            self.relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Arithmetic_expressionContext)
            else:
                return self.getTypedRuleContext(Modelica.Arithmetic_expressionContext,i)


        def relational_operator(self):
            return self.getTypedRuleContext(Modelica.Relational_operatorContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = Modelica.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.arithmetic_expression()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2113929216) != 0):
                self.state = 914
                self.relational_operator()
                self.state = 915
                self.arithmetic_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRE(self):
            return self.getToken(Modelica.GRE, 0)

        def GEQ(self):
            return self.getToken(Modelica.GEQ, 0)

        def LES(self):
            return self.getToken(Modelica.LES, 0)

        def LEQ(self):
            return self.getToken(Modelica.LEQ, 0)

        def NEQ(self):
            return self.getToken(Modelica.NEQ, 0)

        def EEQ(self):
            return self.getToken(Modelica.EEQ, 0)

        def getRuleIndex(self):
            return Modelica.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)




    def relational_operator(self):

        localctx = Modelica.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_relational_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2113929216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.TermContext)
            else:
                return self.getTypedRuleContext(Modelica.TermContext,i)


        def add_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Add_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Add_operatorContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_arithmetic_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_expression" ):
                listener.enterArithmetic_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_expression" ):
                listener.exitArithmetic_expression(self)




    def arithmetic_expression(self):

        localctx = Modelica.Arithmetic_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_arithmetic_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.term()
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3244032) != 0):
                self.state = 922
                self.add_operator()
                self.state = 923
                self.term()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_operator(self):
            return self.getTypedRuleContext(Modelica.Add_operatorContext,0)


        def unary_operand(self):
            return self.getTypedRuleContext(Modelica.Unary_operandContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = Modelica.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_unary_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.add_operator()
            self.state = 931
            self.unary_operand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Modelica.PrimaryContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_unary_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operand" ):
                listener.enterUnary_operand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operand" ):
                listener.exitUnary_operand(self)




    def unary_operand(self):

        localctx = Modelica.Unary_operandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_unary_operand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.primary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(Modelica.PLUS, 0)

        def MINUS(self):
            return self.getToken(Modelica.MINUS, 0)

        def DOTPLUS(self):
            return self.getToken(Modelica.DOTPLUS, 0)

        def DOTMINUS(self):
            return self.getToken(Modelica.DOTMINUS, 0)

        def getRuleIndex(self):
            return Modelica.RULE_add_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_operator" ):
                listener.enterAdd_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_operator" ):
                listener.exitAdd_operator(self)




    def add_operator(self):

        localctx = Modelica.Add_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_add_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3244032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.FactorContext)
            else:
                return self.getTypedRuleContext(Modelica.FactorContext,i)


        def mul_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Mul_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Mul_operatorContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = Modelica.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.factor()
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 12976128) != 0):
                self.state = 938
                self.mul_operator()
                self.state = 939
                self.factor()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Modelica.STAR, 0)

        def SLASH(self):
            return self.getToken(Modelica.SLASH, 0)

        def DOTSTAR(self):
            return self.getToken(Modelica.DOTSTAR, 0)

        def DOTSLASH(self):
            return self.getToken(Modelica.DOTSLASH, 0)

        def getRuleIndex(self):
            return Modelica.RULE_mul_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_operator" ):
                listener.enterMul_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_operator" ):
                listener.exitMul_operator(self)




    def mul_operator(self):

        localctx = Modelica.Mul_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_mul_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12976128) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.PrimaryContext)
            else:
                return self.getTypedRuleContext(Modelica.PrimaryContext,i)


        def exp_operator(self):
            return self.getTypedRuleContext(Modelica.Exp_operatorContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = Modelica.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.primary()
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19 or _la==24:
                self.state = 949
                self.exp_operator()
                self.state = 950
                self.primary()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLEX(self):
            return self.getToken(Modelica.FLEX, 0)

        def DOTFLEX(self):
            return self.getToken(Modelica.DOTFLEX, 0)

        def getRuleIndex(self):
            return Modelica.RULE_exp_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_operator" ):
                listener.enterExp_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_operator" ):
                listener.exitExp_operator(self)




    def exp_operator(self):

        localctx = Modelica.Exp_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_exp_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            _la = self._input.LA(1)
            if not(_la==19 or _la==24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNUM(self):
            return self.getToken(Modelica.UNUM, 0)

        def STRING(self):
            return self.getToken(Modelica.STRING, 0)

        def BOOL(self):
            return self.getToken(Modelica.BOOL, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(Modelica.Unary_expressionContext,0)


        def function_call(self):
            return self.getTypedRuleContext(Modelica.Function_callContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext,0)


        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def output_expression_list(self):
            return self.getTypedRuleContext(Modelica.Output_expression_listContext,0)


        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def matrix(self):
            return self.getTypedRuleContext(Modelica.MatrixContext,0)


        def array(self):
            return self.getTypedRuleContext(Modelica.ArrayContext,0)


        def END(self):
            return self.getToken(Modelica.END, 0)

        def getRuleIndex(self):
            return Modelica.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = Modelica.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_primary)
        try:
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.match(Modelica.UNUM)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.match(Modelica.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 958
                self.match(Modelica.BOOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 959
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 960
                self.function_call()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 961
                self.component_reference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 962
                self.match(Modelica.LPAREN)
                self.state = 963
                self.output_expression_list()
                self.state = 964
                self.match(Modelica.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 966
                self.matrix()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 967
                self.array()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 968
                self.match(Modelica.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.DOT)
            else:
                return self.getToken(Modelica.DOT, i)

        def getRuleIndex(self):
            return Modelica.RULE_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier" ):
                listener.enterType_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier" ):
                listener.exitType_specifier(self)




    def type_specifier(self):

        localctx = Modelica.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_type_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 971
                self.match(Modelica.DOT)


            self.state = 974
            self.match(Modelica.IDENT)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 975
                self.match(Modelica.DOT)
                self.state = 976
                self.match(Modelica.IDENT)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.DOT)
            else:
                return self.getToken(Modelica.DOT, i)

        def getRuleIndex(self):
            return Modelica.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = Modelica.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(Modelica.IDENT)
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 983
                    self.match(Modelica.DOT)
                    self.state = 984
                    self.match(Modelica.IDENT) 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Modelica.LBRACK, 0)

        def matrix_arguments(self):
            return self.getTypedRuleContext(Modelica.Matrix_argumentsContext,0)


        def RBRACK(self):
            return self.getToken(Modelica.RBRACK, 0)

        def getRuleIndex(self):
            return Modelica.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)




    def matrix(self):

        localctx = Modelica.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_matrix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(Modelica.LBRACK)
            self.state = 991
            self.matrix_arguments()
            self.state = 992
            self.match(Modelica.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(Modelica.Matrix_rowContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.SEMICOLON)
            else:
                return self.getToken(Modelica.SEMICOLON, i)

        def getRuleIndex(self):
            return Modelica.RULE_matrix_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_arguments" ):
                listener.enterMatrix_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_arguments" ):
                listener.exitMatrix_arguments(self)




    def matrix_arguments(self):

        localctx = Modelica.Matrix_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_matrix_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.matrix_row()
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 995
                self.match(Modelica.SEMICOLON)
                self.state = 996
                self.matrix_row()
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(Modelica.Expression_listContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_matrix_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_row" ):
                listener.enterMatrix_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_row" ):
                listener.exitMatrix_row(self)




    def matrix_row(self):

        localctx = Modelica.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_matrix_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Modelica.LCURLY, 0)

        def array_arguments(self):
            return self.getTypedRuleContext(Modelica.Array_argumentsContext,0)


        def RCURLY(self):
            return self.getToken(Modelica.RCURLY, 0)

        def getRuleIndex(self):
            return Modelica.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = Modelica.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(Modelica.LCURLY)
            self.state = 1005
            self.array_arguments()
            self.state = 1006
            self.match(Modelica.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call_args(self):
            return self.getTypedRuleContext(Modelica.Function_call_argsContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(Modelica.Component_referenceContext,0)


        def DER(self):
            return self.getToken(Modelica.DER, 0)

        def INITIAL(self):
            return self.getToken(Modelica.INITIAL, 0)

        def PURE(self):
            return self.getToken(Modelica.PURE, 0)

        def getRuleIndex(self):
            return Modelica.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = Modelica.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_function_call)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 93]:
                self.state = 1008
                self.component_reference()
                pass
            elif token in [60]:
                self.state = 1009
                self.match(Modelica.DER)
                pass
            elif token in [62]:
                self.state = 1010
                self.match(Modelica.INITIAL)
                pass
            elif token in [57]:
                self.state = 1011
                self.match(Modelica.PURE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1014
            self.function_call_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.IDENT)
            else:
                return self.getToken(Modelica.IDENT, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.DOT)
            else:
                return self.getToken(Modelica.DOT, i)

        def array_subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Array_subscriptsContext)
            else:
                return self.getTypedRuleContext(Modelica.Array_subscriptsContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_component_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_reference" ):
                listener.enterComponent_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_reference" ):
                listener.exitComponent_reference(self)




    def component_reference(self):

        localctx = Modelica.Component_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_component_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 1016
                self.match(Modelica.DOT)


            self.state = 1019
            self.match(Modelica.IDENT)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 1020
                self.array_subscripts()


            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1023
                self.match(Modelica.DOT)
                self.state = 1024
                self.match(Modelica.IDENT)
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1025
                    self.array_subscripts()


                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def function_arguments(self):
            return self.getTypedRuleContext(Modelica.Function_argumentsContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_function_call_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_args" ):
                listener.enterFunction_call_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_args" ):
                listener.exitFunction_call_args(self)




    def function_call_args(self):

        localctx = Modelica.Function_call_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_function_call_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(Modelica.LPAREN)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6487435334097406608) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 15) != 0):
                self.state = 1034
                self.function_arguments()


            self.state = 1037
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Function_argumentContext)
            else:
                return self.getTypedRuleContext(Modelica.Function_argumentContext,i)


        def named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Named_argumentContext)
            else:
                return self.getTypedRuleContext(Modelica.Named_argumentContext,i)


        def for_initializer(self):
            return self.getTypedRuleContext(Modelica.For_initializerContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_function_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arguments" ):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arguments" ):
                listener.exitFunction_arguments(self)




    def function_arguments(self):

        localctx = Modelica.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_function_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1039
                self.function_argument()
                pass

            elif la_ == 2:
                self.state = 1040
                self.named_argument()
                pass


            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8]:
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1043
                    self.match(Modelica.COMMA)
                    self.state = 1046
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                    if la_ == 1:
                        self.state = 1044
                        self.function_argument()
                        pass

                    elif la_ == 2:
                        self.state = 1045
                        self.named_argument()
                        pass


                    self.state = 1052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [35]:
                self.state = 1053
                self.for_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_partial_application(self):
            return self.getTypedRuleContext(Modelica.Function_partial_applicationContext,0)


        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)




    def function_argument(self):

        localctx = Modelica.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_function_argument)
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                self.function_partial_application()
                pass
            elif token in [4, 7, 9, 11, 15, 16, 20, 21, 31, 36, 57, 59, 60, 62, 90, 91, 92, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_partial_applicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(Modelica.FUNCTION, 0)

        def type_specifier(self):
            return self.getTypedRuleContext(Modelica.Type_specifierContext,0)


        def LPAREN(self):
            return self.getToken(Modelica.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Modelica.RPAREN, 0)

        def named_arguments(self):
            return self.getTypedRuleContext(Modelica.Named_argumentsContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_function_partial_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_partial_application" ):
                listener.enterFunction_partial_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_partial_application" ):
                listener.exitFunction_partial_application(self)




    def function_partial_application(self):

        localctx = Modelica.Function_partial_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_function_partial_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(Modelica.FUNCTION)
            self.state = 1061
            self.type_specifier()
            self.state = 1062
            self.match(Modelica.LPAREN)
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1063
                self.named_arguments()


            self.state = 1066
            self.match(Modelica.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Named_argumentContext)
            else:
                return self.getTypedRuleContext(Modelica.Named_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_named_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_arguments" ):
                listener.enterNamed_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_arguments" ):
                listener.exitNamed_arguments(self)




    def named_arguments(self):

        localctx = Modelica.Named_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_named_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.named_argument()
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1069
                self.match(Modelica.COMMA)
                self.state = 1070
                self.named_argument()
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(Modelica.IDENT, 0)

        def EQUAL(self):
            return self.getToken(Modelica.EQUAL, 0)

        def function_partial_application(self):
            return self.getTypedRuleContext(Modelica.Function_partial_applicationContext,0)


        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = Modelica.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(Modelica.IDENT)
            self.state = 1077
            self.match(Modelica.EQUAL)
            self.state = 1080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 1078
                self.function_partial_application()
                pass
            elif token in [4, 7, 9, 11, 15, 16, 20, 21, 31, 36, 57, 59, 60, 62, 90, 91, 92, 93]:
                self.state = 1079
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ExpressionContext)
            else:
                return self.getTypedRuleContext(Modelica.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_output_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_expression_list" ):
                listener.enterOutput_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_expression_list" ):
                listener.exitOutput_expression_list(self)




    def output_expression_list(self):

        localctx = Modelica.Output_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_output_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6485183534283721360) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 15) != 0):
                self.state = 1082
                self.expression()


            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1085
                self.match(Modelica.COMMA)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6485183534283721360) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 15) != 0):
                    self.state = 1086
                    self.expression()


                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.ExpressionContext)
            else:
                return self.getTypedRuleContext(Modelica.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = Modelica.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.expression()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1095
                self.match(Modelica.COMMA)
                self.state = 1096
                self.expression()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Array_argumentContext)
            else:
                return self.getTypedRuleContext(Modelica.Array_argumentContext,i)


        def for_initializer(self):
            return self.getTypedRuleContext(Modelica.For_initializerContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_array_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_arguments" ):
                listener.enterArray_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_arguments" ):
                listener.exitArray_arguments(self)




    def array_arguments(self):

        localctx = Modelica.Array_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_array_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.array_argument()
            self.state = 1111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10]:
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1103
                    self.match(Modelica.COMMA)
                    self.state = 1104
                    self.array_argument()
                    self.state = 1109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [35]:
                self.state = 1110
                self.for_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Modelica.FOR, 0)

        def for_indices(self):
            return self.getTypedRuleContext(Modelica.For_indicesContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = Modelica.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_for_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(Modelica.FOR)
            self.state = 1114
            self.for_indices()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_array_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_argument" ):
                listener.enterArray_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_argument" ):
                listener.exitArray_argument(self)




    def array_argument(self):

        localctx = Modelica.Array_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_array_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_subscriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Modelica.LBRACK, 0)

        def subscript_list(self):
            return self.getTypedRuleContext(Modelica.Subscript_listContext,0)


        def RBRACK(self):
            return self.getToken(Modelica.RBRACK, 0)

        def getRuleIndex(self):
            return Modelica.RULE_array_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_subscripts" ):
                listener.enterArray_subscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_subscripts" ):
                listener.exitArray_subscripts(self)




    def array_subscripts(self):

        localctx = Modelica.Array_subscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_array_subscripts)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(Modelica.LBRACK)
            self.state = 1119
            self.subscript_list()
            self.state = 1120
            self.match(Modelica.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.SubscriptContext)
            else:
                return self.getTypedRuleContext(Modelica.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.COMMA)
            else:
                return self.getToken(Modelica.COMMA, i)

        def getRuleIndex(self):
            return Modelica.RULE_subscript_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_list" ):
                listener.enterSubscript_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_list" ):
                listener.exitSubscript_list(self)




    def subscript_list(self):

        localctx = Modelica.Subscript_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_subscript_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.subscript()
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1123
                self.match(Modelica.COMMA)
                self.state = 1124
                self.subscript()
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Modelica.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(Modelica.ExpressionContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = Modelica.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_subscript)
        try:
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.match(Modelica.COLON)
                pass
            elif token in [4, 7, 9, 11, 15, 16, 20, 21, 31, 36, 57, 59, 60, 62, 90, 91, 92, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def description_string(self):
            return self.getTypedRuleContext(Modelica.Description_stringContext,0)


        def annotation(self):
            return self.getTypedRuleContext(Modelica.AnnotationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescription" ):
                listener.enterDescription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescription" ):
                listener.exitDescription(self)




    def description(self):

        localctx = Modelica.DescriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_description)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.description_string()
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1135
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Description_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Modelica.STRING)
            else:
                return self.getToken(Modelica.STRING, i)

        def cat_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Modelica.Cat_operatorContext)
            else:
                return self.getTypedRuleContext(Modelica.Cat_operatorContext,i)


        def getRuleIndex(self):
            return Modelica.RULE_description_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescription_string" ):
                listener.enterDescription_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescription_string" ):
                listener.exitDescription_string(self)




    def description_string(self):

        localctx = Modelica.Description_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_description_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1138
                self.match(Modelica.STRING)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1139
                    self.cat_operator()
                    self.state = 1140
                    self.match(Modelica.STRING)
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cat_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(Modelica.PLUS, 0)

        def getRuleIndex(self):
            return Modelica.RULE_cat_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCat_operator" ):
                listener.enterCat_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCat_operator" ):
                listener.exitCat_operator(self)




    def cat_operator(self):

        localctx = Modelica.Cat_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_cat_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(Modelica.PLUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION(self):
            return self.getToken(Modelica.ANNOTATION, 0)

        def class_modification(self):
            return self.getTypedRuleContext(Modelica.Class_modificationContext,0)


        def getRuleIndex(self):
            return Modelica.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = Modelica.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(Modelica.ANNOTATION)
            self.state = 1152
            self.class_modification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





